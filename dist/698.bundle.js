"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[698],{8073:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _003_alliance)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 266 modules\nvar src = __webpack_require__(6496);\n;// ./src/components/graphs/003_MigrationMap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar MigrationMap = function MigrationMap() {\n  var svgRef = useRef();\n  var width = 800;\n  var height = 400;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    worldGeoJSON = _useState2[0],\n    setWorldGeoJSON = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    countryCentroids = _useState4[0],\n    setCountryCentroids = _useState4[1];\n  var _useState5 = useState({\n      "United States": [],\n      "Russia": [],\n      "China": []\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    tradeData = _useState6[0],\n    setTradeData = _useState6[1];\n  var _useState7 = useState(2014),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedYear = _useState8[0],\n    setSelectedYear = _useState8[1];\n  var _useState9 = useState("All"),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedCountry = _useState10[0],\n    setSelectedCountry = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    error = _useState12[0],\n    setError = _useState12[1];\n  var originColors = {\n    "United States": "#4682B4",\n    "Russia": "#DC143C",\n    "China": "#FFDB58",\n    "All": "#9467bd"\n  };\n\n  // Update URLs to use `process.env.PUBLIC_URL` for deployment compatibility\n  var urls = {\n    "United States": "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_recipients_of_us_arms_hierarchical.json"),\n    "Russia": "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_recipients_of_russia_arms_hierarchical.json"),\n    "China": "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_recipients_of_china_arms_hierarchical.json")\n  };\n  var geoJSONUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/countries-110m.json");\n  var normalizeCountryName = function normalizeCountryName(name) {\n    var mapping = {\n      "United States of America": "United States",\n      "USA": "United States",\n      "Russian Federation": "Russia",\n      "People\'s Republic of China": "China"\n    };\n    return mapping[name] || name;\n  };\n\n  // Load world GeoJSON data\n  useEffect(function () {\n    d3.json(geoJSONUrl).then(function (worldData) {\n      var centroids = {};\n      topojson.feature(worldData, worldData.objects.countries).features.forEach(function (feature) {\n        var countryName = feature.properties.name;\n        centroids[normalizeCountryName(countryName)] = d3.geoCentroid(feature);\n      });\n      setCountryCentroids(centroids);\n      setWorldGeoJSON(worldData);\n    })["catch"](function () {\n      setError("Error loading map data.");\n    });\n  }, []);\n\n  // Load trade data for each country\n  useEffect(function () {\n    Object.keys(urls).forEach(function (country) {\n      d3.json(urls[country]).then(function (data) {\n        if (data && data.recipients) {\n          setTradeData(function (prevData) {\n            return _objectSpread(_objectSpread({}, prevData), {}, _defineProperty({}, country, data.recipients));\n          });\n        } else {\n          setError("Failed to load ".concat(country, " trade data."));\n        }\n      })["catch"](function () {\n        setError("Error loading ".concat(country, " trade data."));\n      });\n    });\n  }, []);\n  useEffect(function () {\n    if (!worldGeoJSON || Object.values(tradeData).every(function (data) {\n      return data.length === 0;\n    })) return;\n    var svg = d3.select(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'width\', \'100%\').style(\'height\', \'auto\');\n    svg.selectAll("*").remove();\n    var projection = d3.geoMercator().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = d3.geoPath().projection(projection);\n    var mapContainer = svg.append("g").attr("class", "map-container");\n    var zoom = d3.zoom().scaleExtent([1, 8]).on("zoom", function (event) {\n      mapContainer.attr("transform", event.transform);\n    });\n    svg.call(zoom);\n\n    // Create tooltip div\n    var tooltip = d3.select("body").append("div").attr("class", "tooltip").style("position", "absolute").style("background", "rgba(0, 0, 0, 0.8)").style("color", "e0e0e0").style("padding", "8px 12px").style("border-radius", "4px").style("pointer-events", "none").style("font-size", "16px").style("display", "none");\n\n    // Draw countries\n    mapContainer.selectAll("path.country").data(topojson.feature(worldGeoJSON, worldGeoJSON.objects.countries).features).enter().append("path").attr("class", "country").attr("d", path).attr("fill", "#ccc").attr("stroke", "#333").attr("stroke-width", 1.5);\n\n    // Draw trade lines and circles for each country\n    var countriesToShow = selectedCountry === "All" ? ["United States", "Russia", "China"] : [selectedCountry];\n    countriesToShow.forEach(function (country) {\n      var validTrades = tradeData[country].map(function (recipient) {\n        var originCoords = countryCentroids[country];\n        var destCountry = normalizeCountryName(recipient.recipient);\n        var destCoords = countryCentroids[destCountry];\n        if (originCoords && destCoords) {\n          var tradeValue = recipient.years[selectedYear] || 0;\n          return {\n            originCountry: country,\n            destCountry: destCountry,\n            originX: projection(originCoords)[0],\n            originY: projection(originCoords)[1],\n            destX: projection(destCoords)[0],\n            destY: projection(destCoords)[1],\n            tradeValue: tradeValue\n          };\n        }\n        return null;\n      }).filter(function (d) {\n        return d && d.tradeValue > 0;\n      });\n      var topRecipients = validTrades.sort(function (a, b) {\n        return b.tradeValue - a.tradeValue;\n      }).slice(0, 5).map(function (d) {\n        return d.destCountry;\n      });\n      var maxTradeValue = d3.max(validTrades, function (d) {\n        return d.tradeValue;\n      }) || 0;\n      var strokeScale = d3.scaleSqrt().domain([0, maxTradeValue]).range([1, 4]);\n\n      // Draw trade lines\n      mapContainer.selectAll("line.trade-line-".concat(country)).data(validTrades).enter().append("line").attr("class", "trade-line-".concat(country)).attr("x1", function (d) {\n        return d.originX;\n      }).attr("y1", function (d) {\n        return d.originY;\n      }).attr("x2", function (d) {\n        return d.destX;\n      }).attr("y2", function (d) {\n        return d.destY;\n      }).attr("stroke", originColors[country]).attr("stroke-width", function (d) {\n        return strokeScale(d.tradeValue);\n      }).on("mouseover", function (event, d) {\n        tooltip.style("display", "block").html("\\n              <strong>Origin:</strong> ".concat(d.originCountry, "<br/>\\n              <strong>Destination:</strong> ").concat(d.destCountry, "<br/>\\n              <strong>Trade Value:</strong> ").concat(d.tradeValue, "B USD\\n            "));\n      }).on("mousemove", function (event) {\n        tooltip.style("left", "".concat(event.pageX + 10, "px")).style("top", "".concat(event.pageY + 10, "px"));\n      }).on("mouseout", function () {\n        tooltip.style("display", "none");\n      });\n\n      // Draw trade circles\n      mapContainer.selectAll("circle.trade-circle-".concat(country)).data(validTrades).enter().append("circle").attr("class", "trade-circle-".concat(country)).attr("cx", function (d) {\n        return d.destX;\n      }).attr("cy", function (d) {\n        return d.destY;\n      }).attr("r", function (d) {\n        return topRecipients.includes(d.destCountry) ? 6 : 3;\n      }).attr("fill", function (d) {\n        return topRecipients.includes(d.destCountry) ? "#8A2BE2" : originColors[country];\n      }).on("mouseover", function (event, d) {\n        tooltip.style("display", "block").html("\\n              <strong>Origin:</strong> ".concat(d.originCountry, "<br/>\\n              <strong>Destination:</strong> ").concat(d.destCountry, "<br/>\\n              <strong>Trade Value:</strong> ").concat(d.tradeValue, "B USD\\n            "));\n      }).on("mousemove", function (event) {\n        tooltip.style("left", "".concat(event.pageX + 10, "px")).style("top", "".concat(event.pageY + 10, "px"));\n      }).on("mouseout", function () {\n        tooltip.style("display", "none");\n      });\n    });\n    return function () {\n      return tooltip.remove();\n    };\n  }, [worldGeoJSON, tradeData, countryCentroids, selectedYear, selectedCountry]);\n\n  // Legend Component\n  var Legend = function Legend() {\n    return /*#__PURE__*/React.createElement("div", {\n      style: {\n        position: \'absolute\',\n        height: \'190px\',\n        width: \'170px\',\n        bottom: \'20px\',\n        left: \'20px\',\n        background: \'rgba(0, 0, 0, 0.9)\',\n        padding: \'10px\',\n        borderRadius: \'8px\',\n        fontSize: \'14px\',\n        color: \'#e0e0e0\'\n      }\n    }, /*#__PURE__*/React.createElement("div", {\n      style: {\n        marginBottom: \'10px\'\n      }\n    }, /*#__PURE__*/React.createElement("strong", null, "Origin Countries")), Object.entries(originColors).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        country = _ref2[0];\n      return country !== "All";\n    }).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        country = _ref4[0],\n        color = _ref4[1];\n      return /*#__PURE__*/React.createElement("div", {\n        key: country,\n        style: {\n          display: \'flex\',\n          alignItems: \'center\',\n          marginBottom: \'10px\'\n        }\n      }, /*#__PURE__*/React.createElement("div", {\n        style: {\n          width: \'12px\',\n          height: \'12px\',\n          backgroundColor: color,\n          marginRight: \'8px\',\n          borderRadius: \'50%\'\n        }\n      }), /*#__PURE__*/React.createElement("span", null, country));\n    }), /*#__PURE__*/React.createElement("div", {\n      style: {\n        marginTop: \'10px\'\n      }\n    }, /*#__PURE__*/React.createElement("strong", null, "Recipient Importance")), /*#__PURE__*/React.createElement("div", {\n      style: {\n        display: \'flex\',\n        alignItems: \'center\',\n        marginTop: \'5px\'\n      }\n    }, /*#__PURE__*/React.createElement("svg", {\n      width: "20",\n      height: "20",\n      style: {\n        marginRight: \'6px\'\n      }\n    }, /*#__PURE__*/React.createElement("circle", {\n      cx: "10",\n      cy: "10",\n      r: "3",\n      fill: "#e0e0e0"\n    })), /*#__PURE__*/React.createElement("span", null, "Normal Recipient")), /*#__PURE__*/React.createElement("div", {\n      style: {\n        display: \'flex\',\n        alignItems: \'center\',\n        marginTop: \'5px\'\n      }\n    }, /*#__PURE__*/React.createElement("svg", {\n      width: "20",\n      height: "20",\n      style: {\n        marginRight: \'6px\'\n      }\n    }, /*#__PURE__*/React.createElement("circle", {\n      cx: "10",\n      cy: "10",\n      r: "6",\n      fill: "#8A2BE2"\n    })), /*#__PURE__*/React.createElement("span", null, "Top Recipient")));\n  };\n  return /*#__PURE__*/React.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\'\n    }\n  }, /*#__PURE__*/React.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Global Arms Proliferation ", selectedYear), error && /*#__PURE__*/React.createElement("div", {\n    style: {\n      color: \'red\',\n      position: \'absolute\',\n      top: \'60px\',\n      left: \'50%\',\n      transform: \'translateX(-50%)\',\n      background: \'rgba(255,255,255,0.8)\',\n      padding: \'5px\',\n      borderRadius: \'4px\'\n    }\n  }, error), /*#__PURE__*/React.createElement("input", {\n    type: "range",\n    min: "1950",\n    max: "2023",\n    value: selectedYear,\n    onChange: function onChange(e) {\n      return setSelectedYear(+e.target.value);\n    },\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/React.createElement("svg", {\n    ref: svgRef,\n    style: {\n      width: \'100%\',\n      height: \'80vh\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }), worldGeoJSON && Object.values(tradeData).some(function (data) {\n    return data.length > 0;\n  }) && /*#__PURE__*/React.createElement(Legend, null), /*#__PURE__*/React.createElement("div", {\n    style: {\n      position: \'absolute\',\n      bottom: \'220px\',\n      left: \'20px\',\n      color: \'black\',\n      display: \'flex\',\n      flexDirection: \'column\'\n    }\n  }, /*#__PURE__*/React.createElement("label", {\n    htmlFor: "country",\n    style: {\n      display: \'block\',\n      marginBottom: \'10px\',\n      color: \'#e0e0e0\',\n      fontSize: \'14px\',\n      fontWeight: \'bold\'\n    }\n  }, "Select Country"), /*#__PURE__*/React.createElement("select", {\n    id: "country",\n    value: selectedCountry,\n    onChange: function onChange(e) {\n      return setSelectedCountry(e.target.value);\n    },\n    style: {\n      fontSize: \'12px\',\n      padding: \'6px 10px\',\n      width: \'170px\',\n      color: \'#e0e0e0\',\n      borderRadius: \'8px\',\n      backgroundColor: \'black\'\n    }\n  }, /*#__PURE__*/React.createElement("option", {\n    value: "All"\n  }, "All"), /*#__PURE__*/React.createElement("option", {\n    value: "United States"\n  }, "United States"), /*#__PURE__*/React.createElement("option", {\n    value: "Russia"\n  }, "Russia"), /*#__PURE__*/React.createElement("option", {\n    value: "China"\n  }, "China"))));\n};\n/* harmony default export */ const _003_MigrationMap = ((/* unused pure expression or super */ null && (MigrationMap)));\n;// ./src/components/graphs/003_ForceDirectedGraph.js\nfunction _003_ForceDirectedGraph_slicedToArray(r, e) { return _003_ForceDirectedGraph_arrayWithHoles(r) || _003_ForceDirectedGraph_iterableToArrayLimit(r, e) || _003_ForceDirectedGraph_unsupportedIterableToArray(r, e) || _003_ForceDirectedGraph_nonIterableRest(); }\nfunction _003_ForceDirectedGraph_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _003_ForceDirectedGraph_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _003_ForceDirectedGraph_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _003_ForceDirectedGraph_arrayLikeToArray(r, a) : void 0; } }\nfunction _003_ForceDirectedGraph_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _003_ForceDirectedGraph_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _003_ForceDirectedGraph_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ForceDirectedGraph = function ForceDirectedGraph() {\n  var svgRef = (0,react.useRef)();\n  var width = 1200;\n  var height = 670;\n\n  // Update the data URL to use `process.env.PUBLIC_URL` for deployment compatibility\n  var dataUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_recipients_of_combined_us_china_russia_arms_hierarchical.json");\n\n  // State for the selected year\n  var _useState = (0,react.useState)(2014),\n    _useState2 = _003_ForceDirectedGraph_slicedToArray(_useState, 2),\n    selectedYear = _useState2[0],\n    setSelectedYear = _useState2[1];\n  (0,react.useEffect)(function () {\n    // Fetch data from the provided URL\n    src/* json */.Pq9(dataUrl).then(function (rawData) {\n      var data = rawData.data; // Access the main data array\n\n      // Clear previous SVG contents\n      var svg = src/* select */.Ltv(svgRef.current);\n      svg.selectAll(\'*\').remove();\n\n      // Process nodes and links based on the dataset structure and selected year\n      var nodesArray = [];\n      var links = [];\n      var nodeMap = new Map(); // For faster lookup and avoiding duplicates\n\n      data.forEach(function (supplierEntry) {\n        var supplier = supplierEntry.supplier;\n        if (!nodeMap.has(supplier)) {\n          nodeMap.set(supplier, {\n            name: supplier,\n            group: \'supplier\'\n          });\n          nodesArray.push({\n            name: supplier,\n            group: \'supplier\'\n          });\n        }\n        supplierEntry.recipients.forEach(function (recipientEntry) {\n          var recipient = recipientEntry.recipient;\n          var tradeValue = recipientEntry.years[selectedYear] || 0;\n\n          // Only add the link if there\'s a trade value for the selected year\n          if (tradeValue > 0) {\n            if (!nodeMap.has(recipient)) {\n              nodeMap.set(recipient, {\n                name: recipient,\n                group: \'recipient\'\n              });\n              nodesArray.push({\n                name: recipient,\n                group: \'recipient\'\n              });\n            }\n            links.push({\n              source: supplier,\n              target: recipient,\n              value: tradeValue\n            });\n          }\n        });\n      });\n\n      // Define color assignments for specific suppliers\n      var colorScale = src/* scaleOrdinal */.UMr().domain([\'United States\', \'Russia\', \'China\', \'India\']).range([\'#4682B4\', \'#DC143C\', \'#FFDB58\', \'#FF671F\']); // Blue for US, Red for Russia, Yellow for China\n\n      var nodeSizeScale = src/* scaleSqrt */.Bv9().domain([0, src/* max */.T9B(links, function (d) {\n        return d.value;\n      })]).range([5, 20]);\n      svg.attr(\'viewBox\', [0, 0, width, height]);\n\n      // Add container group for zooming\n      var container = svg.append(\'g\');\n      var defaultTransform = src/* zoomIdentity */.GSI.translate(width / 8, height / 4) // Pan to adjust initial position\n      .scale(0.75); // Zoom level\n\n      svg.call(src/* zoom */.s_O().scaleExtent([0.5, 5]).on(\'zoom\', function (event) {\n        container.attr(\'transform\', event.transform);\n      }));\n      svg.call(src/* zoom */.s_O().transform, defaultTransform);\n\n      // Set the initial transform on the container\n      container.attr(\'transform\', defaultTransform);\n\n      // Draw links with lower opacity for aesthetic effect\n      var link = container.append(\'g\').attr(\'stroke-opacity\', 0.3).selectAll(\'line\').data(links).join(\'line\').attr(\'stroke\', \'#e0e0e0\').attr(\'stroke-width\', function (d) {\n        return d.value / 100;\n      });\n\n      // Draw nodes with size and color based on group\n      var node = container.append(\'g\').selectAll(\'circle\').data(nodesArray).join(\'circle\').attr(\'r\', function (d) {\n        var _links$find;\n        return nodeSizeScale(((_links$find = links.find(function (link) {\n          return link.target === d.name || link.source === d.name;\n        })) === null || _links$find === void 0 ? void 0 : _links$find.value) || 1);\n      }).attr(\'fill\', function (d) {\n        if (d.group === \'supplier\') return colorScale(d.name) || \'#e0e0e0\';\n        if (d.name === \'India\') return colorScale(d.name) || \'#e0e0e0\';\n        return \'#e0e0e0\'; // Default color for recipients\n      }).call(src/* drag */.$Er().on(\'start\', function (event, d) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }).on(\'drag\', function (event, d) {\n        d.fx = event.x;\n        d.fy = event.y;\n      }).on(\'end\', function (event, d) {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }));\n\n      // Add labels for each node\n      var label = container.append(\'g\').selectAll(\'text\').data(nodesArray).join(\'text\').attr(\'dx\', function (d) {\n        var _links$find2;\n        var nodeValue = ((_links$find2 = links.find(function (link) {\n          return link.target === d.name || link.source === d.name;\n        })) === null || _links$find2 === void 0 ? void 0 : _links$find2.value) || 1;\n        return nodeSizeScale(nodeValue) + 5; // Add 5px padding after the radius\n      }).attr(\'dy\', 4).attr(\'font-size\', \'16px\').attr(\'fill\', \'#e0e0e0\').text(function (d) {\n        return d.name;\n      });\n\n      // Tooltip for node hover details\n      var tooltip = src/* select */.Ltv(\'body\').append(\'div\').style(\'position\', \'absolute\').style(\'background\', \'rgba(0, 0, 0, 0.8)\').style(\'color\', \'#e0e0e0\').style(\'padding\', \'12px\').style(\'border-radius\', \'8px\').style(\'font-size\', \'16px\').style(\'pointer-events\', \'none\').style(\'display\', \'none\');\n      node.on(\'mouseover\', function (event, d) {\n        tooltip.style(\'display\', \'block\').html("\\n            <strong>".concat(d.name, "</strong>\\n          "));\n      }).on(\'mousemove\', function (event) {\n        tooltip.style(\'top\', "".concat(event.pageY + 10, "px")).style(\'left\', "".concat(event.pageX + 10, "px"));\n      }).on(\'mouseout\', function () {\n        return tooltip.style(\'display\', \'none\');\n      });\n\n      // Define simulation and apply forces\n      var simulation = src/* forceSimulation */.tXi(nodesArray).force(\'link\', src/* forceLink */.kJC(links).id(function (d) {\n        return d.name;\n      }).distance(75).strength(0.25)).force(\'charge\', src/* forceManyBody */.xJS().strength(-400)).force(\'center\', src/* forceCenter */.jTM(width / 2, height / 2)).on(\'tick\', function () {\n        link.attr(\'x1\', function (d) {\n          return d.source.x;\n        }).attr(\'y1\', function (d) {\n          return d.source.y;\n        }).attr(\'x2\', function (d) {\n          return d.target.x;\n        }).attr(\'y2\', function (d) {\n          return d.target.y;\n        });\n        node.attr(\'cx\', function (d) {\n          return d.x;\n        }).attr(\'cy\', function (d) {\n          return d.y;\n        });\n        label.attr(\'x\', function (d) {\n          return d.x;\n        }).attr(\'y\', function (d) {\n          return d.y;\n        });\n      });\n\n      // Cleanup on unmount\n      return function () {\n        tooltip.remove();\n      };\n    });\n  }, [selectedYear]);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Global Arms Trade Network ", selectedYear), /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    min: "1950",\n    max: "2023",\n    value: selectedYear,\n    onChange: function onChange(e) {\n      return setSelectedYear(+e.target.value);\n    },\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }));\n};\n/* harmony default export */ const _003_ForceDirectedGraph = (ForceDirectedGraph);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/react/dist/deckgl.js + 128 modules\nvar deckgl = __webpack_require__(393);\n// EXTERNAL MODULE: ./node_modules/@deck.gl/layers/dist/arc-layer/arc-layer.js + 6 modules\nvar arc_layer = __webpack_require__(1681);\n// EXTERNAL MODULE: ./node_modules/react-map-gl/dist/esm/index.js + 21 modules\nvar esm = __webpack_require__(3263);\n// EXTERNAL MODULE: ./node_modules/mapbox-gl/dist/mapbox-gl.css\nvar mapbox_gl = __webpack_require__(4518);\n;// ./src/components/graphs/003_WorldChord.js\nfunction _003_WorldChord_typeof(o) { "@babel/helpers - typeof"; return _003_WorldChord_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _003_WorldChord_typeof(o); }\nfunction _003_WorldChord_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _003_WorldChord_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _003_WorldChord_ownKeys(Object(t), !0).forEach(function (r) { _003_WorldChord_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : _003_WorldChord_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _003_WorldChord_defineProperty(e, r, t) { return (r = _003_WorldChord_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _003_WorldChord_toPropertyKey(t) { var i = _003_WorldChord_toPrimitive(t, "string"); return "symbol" == _003_WorldChord_typeof(i) ? i : i + ""; }\nfunction _003_WorldChord_toPrimitive(t, r) { if ("object" != _003_WorldChord_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _003_WorldChord_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _003_WorldChord_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_003_WorldChord_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _003_WorldChord_slicedToArray(r, e) { return _003_WorldChord_arrayWithHoles(r) || _003_WorldChord_iterableToArrayLimit(r, e) || _003_WorldChord_unsupportedIterableToArray(r, e) || _003_WorldChord_nonIterableRest(); }\nfunction _003_WorldChord_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _003_WorldChord_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _003_WorldChord_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _003_WorldChord_arrayLikeToArray(r, a) : void 0; } }\nfunction _003_WorldChord_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _003_WorldChord_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _003_WorldChord_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\nvar MAPBOX_TOKEN = \'pk.eyJ1Ijoia3dwdGhlZ3JlYXQiLCJhIjoiY20zajljd3Z2MDExZjJycHRvcGE0dm9uYyJ9.9IwsWKd3rM0aVxjXND4LUQ\'; // Replace with your actual Mapbox token\n\n// Function to extract the year from a record dynamically\nfunction extractYearFromRecord(record) {\n  if (record.date) {\n    var match = record.date.match(/\\b(20\\d{2})\\b/); // Match years like 2000-2099\n    return match ? parseInt(match[0], 10) : null;\n  }\n  return null;\n}\nfunction WorldChord() {\n  var _useState = (0,react.useState)([]),\n    _useState2 = _003_WorldChord_slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = _003_WorldChord_slicedToArray(_useState3, 2),\n    filteredData = _useState4[0],\n    setFilteredData = _useState4[1];\n  var _useState5 = (0,react.useState)(2014),\n    _useState6 = _003_WorldChord_slicedToArray(_useState5, 2),\n    year = _useState6[0],\n    setYear = _useState6[1]; // Default year for the slider filter\n  var _useState7 = (0,react.useState)(\'all\'),\n    _useState8 = _003_WorldChord_slicedToArray(_useState7, 2),\n    selectedCountry = _useState8[0],\n    setSelectedCountry = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _003_WorldChord_slicedToArray(_useState9, 2),\n    hoveredInfo = _useState10[0],\n    setHoveredInfo = _useState10[1];\n  var _useState11 = (0,react.useState)({}),\n    _useState12 = _003_WorldChord_slicedToArray(_useState11, 2),\n    countryCoordinates = _useState12[0],\n    setCountryCoordinates = _useState12[1]; // State to store dynamically loaded coordinates\n\n  var countryColors = {\n    "United States": [70, 130, 180],\n    // Steel Blue (rgb format)\n    "Russia": [220, 20, 60],\n    // Crimson (rgb format)\n    "China": [255, 219, 88] // Light Gold (rgb format)\n  };\n\n  // Load country coordinates dynamically\n  (0,react.useEffect)(function () {\n    var fetchCountryCoordinates = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, coordinates;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch("".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/countryCoordinates.json"));\n            case 3:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error(\'Failed to load country coordinates\');\n            case 6:\n              _context.next = 8;\n              return response.json();\n            case 8:\n              coordinates = _context.sent;\n              setCountryCoordinates(coordinates);\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context["catch"](0);\n              console.error(\'Error loading country coordinates:\', _context.t0);\n            case 15:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 12]]);\n      }));\n      return function fetchCountryCoordinates() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchCountryCoordinates();\n  }, []);\n  (0,react.useEffect)(function () {\n    // Fetch data from converted_data.json\n    fetch("".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/converted_data.json")).then(function (response) {\n      return response.json();\n    }).then(function (fetchedData) {\n      var updatedData = fetchedData.map(function (d) {\n        return _003_WorldChord_objectSpread(_003_WorldChord_objectSpread({}, d), {}, {\n          year: d.year || extractYearFromRecord(d) // Add year dynamically if needed\n        });\n      });\n      setData(updatedData);\n      var initialFilteredData = updatedData.filter(function (d) {\n        return d.year === year;\n      });\n      setFilteredData(initialFilteredData);\n    })["catch"](function (error) {\n      return console.error(\'Error loading JSON data:\', error);\n    });\n  }, [year]);\n  (0,react.useEffect)(function () {\n    if (data.length > 0) {\n      var updatedFilteredData = data.filter(function (d) {\n        return d.year === year;\n      });\n      setFilteredData(updatedFilteredData);\n    }\n  }, [year, data]);\n  var filteredByCountry = filteredData.filter(function (d) {\n    if (selectedCountry === \'all\') return true;\n    return d.origin.toLowerCase() === selectedCountry.toLowerCase();\n  });\n  var validFilteredData = filteredByCountry.filter(function (d) {\n    var source = countryCoordinates[d.origin];\n    var target = countryCoordinates[d.destination];\n    if (!["China", "Russia", "United States"].includes(d.origin)) {\n      return false;\n    }\n    return source && target;\n  });\n  var layers = new arc_layer/* default */.A({\n    id: \'arc-layer\',\n    data: validFilteredData,\n    getSourcePosition: function getSourcePosition(d) {\n      return countryCoordinates[d.origin];\n    },\n    getTargetPosition: function getTargetPosition(d) {\n      return countryCoordinates[d.destination];\n    },\n    getSourceColor: function getSourceColor(d) {\n      return countryColors[d.origin] || [255, 255, 255];\n    },\n    getTargetColor: function getTargetColor(d) {\n      return countryColors[d.origin] || [0, 128, 255];\n    },\n    getWidth: function getWidth(d) {\n      return Math.log(d.quantity + 1);\n    },\n    pickable: true,\n    getTooltip: function getTooltip(_ref2) {\n      var object = _ref2.object;\n      return object ? "".concat(object.origin, " to ").concat(object.destination, ": ").concat(object.quantity, " ").concat(object.weapon, " (").concat(object.year, ")") : null;\n    }\n  });\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\',\n      height: \'80vh\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Global Arms Proliferation ", year), /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    min: "1950",\n    max: "2023",\n    value: year,\n    onChange: function onChange(e) {\n      return setYear(+e.target.value);\n    },\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      bottom: 0,\n      width: \'100%\',\n      height: \'calc(100% - 90px)\'\n    }\n  }, /*#__PURE__*/react.createElement(deckgl/* default */.A, {\n    style: {\n      width: \'100%\',\n      height: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    },\n    initialViewState: {\n      latitude: 20,\n      longitude: 0,\n      zoom: 1.5,\n      pitch: 30\n    },\n    controller: true,\n    layers: [layers],\n    onHover: function onHover(info) {\n      if (info.object) {\n        setHoveredInfo(info);\n      } else {\n        setHoveredInfo(null);\n      }\n    }\n  }, /*#__PURE__*/react.createElement(esm/* Map */.T5, {\n    mapboxAccessToken: MAPBOX_TOKEN,\n    mapStyle: "mapbox://styles/mapbox/light-v10",\n    attributionControl: false,\n    interactiveLayerIds: [\'arc-layer\']\n  }), hoveredInfo && hoveredInfo.object && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      left: hoveredInfo.x,\n      top: hoveredInfo.y,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'e0e0e0\',\n      padding: \'8px 12px\',\n      borderRadius: \'8px\',\n      pointerEvents: \'none\',\n      fontSize: \'16px\',\n      whiteSpace: \'nowrap\'\n    }\n  }, "".concat(hoveredInfo.object.origin, " to ").concat(hoveredInfo.object.destination, ": ").concat(hoveredInfo.object.quantity))), /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      height: \'80px\',\n      width: \'120px\',\n      top: \'20px\',\n      left: \'20px\',\n      background: \'rgba(0, 0, 0, 0.9)\',\n      padding: \'10px\',\n      borderRadius: \'8px\',\n      fontSize: \'14px\',\n      color: \'#e0e0e0\'\n    }\n  }, /*#__PURE__*/react.createElement("p", {\n    style: {\n      display: \'block\',\n      marginBottom: \'10px\',\n      color: \'#e0e0e0\',\n      fontSize: \'14px\',\n      fontWeight: \'bold\'\n    }\n  }, "Select Country"), /*#__PURE__*/react.createElement("select", {\n    name: "countrySelector",\n    value: selectedCountry,\n    onChange: function onChange(e) {\n      return setSelectedCountry(e.target.value);\n    },\n    style: {\n      position: \'absolute\',\n      padding: \'6px 10px\',\n      width: \'100px\',\n      color: \'#e0e0e0\',\n      backgroundColor: \'black\',\n      borderRadius: \'8px\',\n      fontSize: \'14px\'\n    }\n  }, /*#__PURE__*/react.createElement("option", {\n    value: "all"\n  }, "All"), /*#__PURE__*/react.createElement("option", {\n    value: "United States"\n  }, "US"), /*#__PURE__*/react.createElement("option", {\n    value: "Russia"\n  }, "Russia"), /*#__PURE__*/react.createElement("option", {\n    value: "China"\n  }, "China")))));\n}\n/* harmony default export */ const _003_WorldChord = (WorldChord);\n;// ./src/components/003_alliance.js\n\n\n\n\nvar alliance = function alliance() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "003"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Strength in Alliance & Partnership"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " uses arms exports strategically to build alliances and shape regional power dynamics, especially against major powers like", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, " Russia"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), ". By equipping allies in key areas\\u2014such as ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Eastern Europe"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "the Middle East"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Asia-Pacific"), "\\u2014the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " bolsters defense, deters aggression, and strengthens long-term partnerships. These alliances, supported by advanced weaponry, create a coordinated front that counters ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China\'s"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia\'s"), " influence."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "In contrast, ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " use arms transfers to establish footholds in their own spheres, particularly in the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Middle East"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Africa"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Southeast Asia"), ". This distribution evidences an effort by the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, " China"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " to expand their spheres of influence or contain each other."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "A quick case study, as shown on the map, highlights a significant increase in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China\'s"), " arms trade with ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Africa"), " prior to the initiation of the Belt and Road Initiative, which officially started in 2013. This emphasizes China\'s broader geopolitical strategy of leveraging arms trade to secure access to resources and establish influence in developing regions."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_003_WorldChord, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "An Alternative Way to Visualize International Relations: Force Directed Graph"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "This Global Arms Trade Network further illustrates a complex geopolitical chessboard where the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China "), "use arms exports to expand influence and secure alliances across strategic regions. Each superpower\\u2019s network centers around key allies:"), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " supports countries in", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C",\n      fontStyle: "italic"\n    }\n  }, " Europe, the Middle East, and Asia-Pacific"), ", reinforcing a defense line against rivals."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " supplies nations in", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C",\n      fontStyle: "italic"\n    }\n  }, " Eastern Europe and Central Asia"), " to counter NATO\'s reach."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " arms countries in", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C",\n      fontStyle: "italic"\n    }\n  }, " Southeast Asia, Africa, and South Asia"), ", expanding its foothold in resource-rich areas."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, "Countries like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF671F"\n    }\n  }, "India"), " illustrate a multilateral approach, balancing relationships with the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), ", and others.")), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Through this network, arms transfers reveal interdependent alliances, bolstered influence, and efforts to contain rivals. The map underscores how arms exports are not just about military strength but also about shaping the strategic relationships that define the global order."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_003_ForceDirectedGraph, null)));\n};\n/* harmony default export */ const _003_alliance = (alliance);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8073\n')},9098:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill-rule=%27evenodd%27 fill=%27%23fff%27%3E%3Cpath d=%27M4 10a6 6 0 1 0 12 0 6 6 0 1 0-12 0m5-3a1 1 0 1 0 2 0 1 1 0 1 0-2 0m0 3a1 1 0 1 1 2 0v3a1 1 0 1 1-2 0%27/%3E%3C/svg%3E"},8548:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill-rule=%27evenodd%27%3E%3Cpath d=%27M4 10a6 6 0 1 0 12 0 6 6 0 1 0-12 0m5-3a1 1 0 1 0 2 0 1 1 0 1 0-2 0m0 3a1 1 0 1 1 2 0v3a1 1 0 1 1-2 0%27/%3E%3C/svg%3E"},6008:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23000%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},1991:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23333%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},2990:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%2333b5e5%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27 display=%27none%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},311:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%2333b5e5%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},5721:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23666%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 fill=%27%23f00%27/%3E%3C/svg%3E"},1340:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23999%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 fill=%27%23f00%27/%3E%3C/svg%3E"},3764:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23aaa%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 fill=%27%23f00%27/%3E%3C/svg%3E"},3200:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23e54e33%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27 display=%27none%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},20:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23e58978%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},5454:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg viewBox=%270 0 20 20%27 xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23fff%27%3E%3Cpath d=%27M10 4C9 4 9 5 9 5v.1A5 5 0 0 0 5.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 0 0 9 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 0 0 3.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0 0 11 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 1 0-7z%27/%3E%3Ccircle id=%27dot%27 cx=%2710%27 cy=%2710%27 r=%272%27/%3E%3Cpath id=%27stroke%27 d=%27M14 5l1 1-9 9-1-1 9-9z%27 display=%27none%27/%3E%3C/svg%3E"},3825:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23000%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M10 13c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h9c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-9z%27/%3E%3C/svg%3E"},5565:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23000%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M10.5 14l4-8 4 8h-8z%27/%3E%3Cpath id=%27south%27 d=%27M10.5 16l4 8 4-8h-8z%27 fill=%27%23ccc%27/%3E%3C/svg%3E"},6686:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23000%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z%27/%3E%3C/svg%3E"},2556:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23000%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1h-5.5zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1v-5.5zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1v5.5zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1h5.5z%27/%3E%3C/svg%3E"},2912:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23000%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3h1zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16h1zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5H13zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1V7.5z%27/%3E%3C/svg%3E"},426:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23333%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M10 13c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h9c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-9z%27/%3E%3C/svg%3E"},3750:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23333%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M10.5 14l4-8 4 8h-8z%27/%3E%3Cpath id=%27south%27 d=%27M10.5 16l4 8 4-8h-8z%27 fill=%27%23ccc%27/%3E%3C/svg%3E"},3873:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23333%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z%27/%3E%3C/svg%3E"},6827:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23333%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3h1zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16h1zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5H13zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1V7.5z%27/%3E%3C/svg%3E"},6839:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23fff%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M10 13c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h9c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-9z%27/%3E%3C/svg%3E"},577:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23fff%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M10.5 14l4-8 4 8h-8z%27/%3E%3Cpath id=%27south%27 d=%27M10.5 16l4 8 4-8h-8z%27 fill=%27%23999%27/%3E%3C/svg%3E"},4972:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23fff%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z%27/%3E%3C/svg%3E"},4262:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23fff%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1h-5.5zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1v-5.5zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1v5.5zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1h5.5z%27/%3E%3C/svg%3E"},690:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27%23fff%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3h1zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16h1zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5H13zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1V7.5z%27/%3E%3C/svg%3E"},7324:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1h-5.5zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1v-5.5zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1v5.5zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1h5.5z%27/%3E%3C/svg%3E"},7138:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 xmlns:xlink=%27http://www.w3.org/1999/xlink%27 fill-rule=%27evenodd%27 viewBox=%270 0 88 23%27%3E%3Cdefs%3E%3Cpath id=%27logo%27 d=%27M11.5 2.25c5.105 0 9.25 4.145 9.25 9.25s-4.145 9.25-9.25 9.25-9.25-4.145-9.25-9.25 4.145-9.25 9.25-9.25zM6.997 15.983c-.051-.338-.828-5.802 2.233-8.873a4.395 4.395 0 013.13-1.28c1.27 0 2.49.51 3.39 1.42.91.9 1.42 2.12 1.42 3.39 0 1.18-.449 2.301-1.28 3.13C12.72 16.93 7 16 7 16l-.003-.017zM15.3 10.5l-2 .8-.8 2-.8-2-2-.8 2-.8.8-2 .8 2 2 .8z%27/%3E%3Cpath id=%27text%27 d=%27M50.63 8c.13 0 .23.1.23.23V9c.7-.76 1.7-1.18 2.73-1.18 2.17 0 3.95 1.85 3.95 4.17s-1.77 4.19-3.94 4.19c-1.04 0-2.03-.43-2.74-1.18v3.77c0 .13-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V8.23c0-.12.1-.23.23-.23h1.4zm-3.86.01c.01 0 .01 0 .01-.01.13 0 .22.1.22.22v7.55c0 .12-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V15c-.7.76-1.69 1.19-2.73 1.19-2.17 0-3.94-1.87-3.94-4.19 0-2.32 1.77-4.19 3.94-4.19 1.03 0 2.02.43 2.73 1.18v-.75c0-.12.1-.23.23-.23h1.4zm26.375-.19a4.24 4.24 0 00-4.16 3.29c-.13.59-.13 1.19 0 1.77a4.233 4.233 0 004.17 3.3c2.35 0 4.26-1.87 4.26-4.19 0-2.32-1.9-4.17-4.27-4.17zM60.63 5c.13 0 .23.1.23.23v3.76c.7-.76 1.7-1.18 2.73-1.18 1.88 0 3.45 1.4 3.84 3.28.13.59.13 1.2 0 1.8-.39 1.88-1.96 3.29-3.84 3.29-1.03 0-2.02-.43-2.73-1.18v.77c0 .12-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V5.23c0-.12.1-.23.23-.23h1.4zm-34 11h-1.4c-.13 0-.23-.11-.23-.23V8.22c.01-.13.1-.22.23-.22h1.4c.13 0 .22.11.23.22v.68c.5-.68 1.3-1.09 2.16-1.1h.03c1.09 0 2.09.6 2.6 1.55.45-.95 1.4-1.55 2.44-1.56 1.62 0 2.93 1.25 2.9 2.78l.03 5.2c0 .13-.1.23-.23.23h-1.41c-.13 0-.23-.11-.23-.23v-4.59c0-.98-.74-1.71-1.62-1.71-.8 0-1.46.7-1.59 1.62l.01 4.68c0 .13-.11.23-.23.23h-1.41c-.13 0-.23-.11-.23-.23v-4.59c0-.98-.74-1.71-1.62-1.71-.85 0-1.54.79-1.6 1.8v4.5c0 .13-.1.23-.23.23zm53.615 0h-1.61c-.04 0-.08-.01-.12-.03-.09-.06-.13-.19-.06-.28l2.43-3.71-2.39-3.65a.213.213 0 01-.03-.12c0-.12.09-.21.21-.21h1.61c.13 0 .24.06.3.17l1.41 2.37 1.4-2.37a.34.34 0 01.3-.17h1.6c.04 0 .08.01.12.03.09.06.13.19.06.28l-2.37 3.65 2.43 3.7c0 .05.01.09.01.13 0 .12-.09.21-.21.21h-1.61c-.13 0-.24-.06-.3-.17l-1.44-2.42-1.44 2.42a.34.34 0 01-.3.17zm-7.12-1.49c-1.33 0-2.42-1.12-2.42-2.51 0-1.39 1.08-2.52 2.42-2.52 1.33 0 2.42 1.12 2.42 2.51 0 1.39-1.08 2.51-2.42 2.52zm-19.865 0c-1.32 0-2.39-1.11-2.42-2.48v-.07c.02-1.38 1.09-2.49 2.4-2.49 1.32 0 2.41 1.12 2.41 2.51 0 1.39-1.07 2.52-2.39 2.53zm-8.11-2.48c-.01 1.37-1.09 2.47-2.41 2.47s-2.42-1.12-2.42-2.51c0-1.39 1.08-2.52 2.4-2.52 1.33 0 2.39 1.11 2.41 2.48l.02.08zm18.12 2.47c-1.32 0-2.39-1.11-2.41-2.48v-.06c.02-1.38 1.09-2.48 2.41-2.48s2.42 1.12 2.42 2.51c0 1.39-1.09 2.51-2.42 2.51z%27/%3E%3C/defs%3E%3Cmask id=%27clip%27%3E%3Crect x=%270%27 y=%270%27 width=%27100%25%27 height=%27100%25%27 fill=%27white%27/%3E%3Cuse xlink:href=%27%23logo%27/%3E%3Cuse xlink:href=%27%23text%27/%3E%3C/mask%3E%3Cg id=%27outline%27 opacity=%270.3%27 stroke=%27%23000%27 stroke-width=%273%27%3E%3Ccircle mask=%27url%28%23clip%29%27 cx=%2711.5%27 cy=%2711.5%27 r=%279.25%27/%3E%3Cuse xlink:href=%27%23text%27 mask=%27url%28%23clip%29%27/%3E%3C/g%3E%3Cg id=%27fill%27 opacity=%270.9%27 fill=%27%23fff%27%3E%3Cuse xlink:href=%27%23logo%27/%3E%3Cuse xlink:href=%27%23text%27/%3E%3C/g%3E%3C/svg%3E"},7256:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 xmlns:xlink=%27http://www.w3.org/1999/xlink%27 fill-rule=%27evenodd%27 viewBox=%270 0 88 23%27%3E%3Cdefs%3E%3Cpath id=%27logo%27 d=%27M11.5 2.25c5.105 0 9.25 4.145 9.25 9.25s-4.145 9.25-9.25 9.25-9.25-4.145-9.25-9.25 4.145-9.25 9.25-9.25zM6.997 15.983c-.051-.338-.828-5.802 2.233-8.873a4.395 4.395 0 013.13-1.28c1.27 0 2.49.51 3.39 1.42.91.9 1.42 2.12 1.42 3.39 0 1.18-.449 2.301-1.28 3.13C12.72 16.93 7 16 7 16l-.003-.017zM15.3 10.5l-2 .8-.8 2-.8-2-2-.8 2-.8.8-2 .8 2 2 .8z%27/%3E%3Cpath id=%27text%27 d=%27M50.63 8c.13 0 .23.1.23.23V9c.7-.76 1.7-1.18 2.73-1.18 2.17 0 3.95 1.85 3.95 4.17s-1.77 4.19-3.94 4.19c-1.04 0-2.03-.43-2.74-1.18v3.77c0 .13-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V8.23c0-.12.1-.23.23-.23h1.4zm-3.86.01c.01 0 .01 0 .01-.01.13 0 .22.1.22.22v7.55c0 .12-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V15c-.7.76-1.69 1.19-2.73 1.19-2.17 0-3.94-1.87-3.94-4.19 0-2.32 1.77-4.19 3.94-4.19 1.03 0 2.02.43 2.73 1.18v-.75c0-.12.1-.23.23-.23h1.4zm26.375-.19a4.24 4.24 0 00-4.16 3.29c-.13.59-.13 1.19 0 1.77a4.233 4.233 0 004.17 3.3c2.35 0 4.26-1.87 4.26-4.19 0-2.32-1.9-4.17-4.27-4.17zM60.63 5c.13 0 .23.1.23.23v3.76c.7-.76 1.7-1.18 2.73-1.18 1.88 0 3.45 1.4 3.84 3.28.13.59.13 1.2 0 1.8-.39 1.88-1.96 3.29-3.84 3.29-1.03 0-2.02-.43-2.73-1.18v.77c0 .12-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V5.23c0-.12.1-.23.23-.23h1.4zm-34 11h-1.4c-.13 0-.23-.11-.23-.23V8.22c.01-.13.1-.22.23-.22h1.4c.13 0 .22.11.23.22v.68c.5-.68 1.3-1.09 2.16-1.1h.03c1.09 0 2.09.6 2.6 1.55.45-.95 1.4-1.55 2.44-1.56 1.62 0 2.93 1.25 2.9 2.78l.03 5.2c0 .13-.1.23-.23.23h-1.41c-.13 0-.23-.11-.23-.23v-4.59c0-.98-.74-1.71-1.62-1.71-.8 0-1.46.7-1.59 1.62l.01 4.68c0 .13-.11.23-.23.23h-1.41c-.13 0-.23-.11-.23-.23v-4.59c0-.98-.74-1.71-1.62-1.71-.85 0-1.54.79-1.6 1.8v4.5c0 .13-.1.23-.23.23zm53.615 0h-1.61c-.04 0-.08-.01-.12-.03-.09-.06-.13-.19-.06-.28l2.43-3.71-2.39-3.65a.213.213 0 01-.03-.12c0-.12.09-.21.21-.21h1.61c.13 0 .24.06.3.17l1.41 2.37 1.4-2.37a.34.34 0 01.3-.17h1.6c.04 0 .08.01.12.03.09.06.13.19.06.28l-2.37 3.65 2.43 3.7c0 .05.01.09.01.13 0 .12-.09.21-.21.21h-1.61c-.13 0-.24-.06-.3-.17l-1.44-2.42-1.44 2.42a.34.34 0 01-.3.17zm-7.12-1.49c-1.33 0-2.42-1.12-2.42-2.51 0-1.39 1.08-2.52 2.42-2.52 1.33 0 2.42 1.12 2.42 2.51 0 1.39-1.08 2.51-2.42 2.52zm-19.865 0c-1.32 0-2.39-1.11-2.42-2.48v-.07c.02-1.38 1.09-2.49 2.4-2.49 1.32 0 2.41 1.12 2.41 2.51 0 1.39-1.07 2.52-2.39 2.53zm-8.11-2.48c-.01 1.37-1.09 2.47-2.41 2.47s-2.42-1.12-2.42-2.51c0-1.39 1.08-2.52 2.4-2.52 1.33 0 2.39 1.11 2.41 2.48l.02.08zm18.12 2.47c-1.32 0-2.39-1.11-2.41-2.48v-.06c.02-1.38 1.09-2.48 2.41-2.48s2.42 1.12 2.42 2.51c0 1.39-1.09 2.51-2.42 2.51z%27/%3E%3C/defs%3E%3Cmask id=%27clip%27%3E%3Crect x=%270%27 y=%270%27 width=%27100%25%27 height=%27100%25%27 fill=%27white%27/%3E%3Cuse xlink:href=%27%23logo%27/%3E%3Cuse xlink:href=%27%23text%27/%3E%3C/mask%3E%3Cg id=%27outline%27 opacity=%271%27 stroke=%27%23000%27 stroke-width=%273%27%3E%3Ccircle mask=%27url%28%23clip%29%27 cx=%2711.5%27 cy=%2711.5%27 r=%279.25%27/%3E%3Cuse xlink:href=%27%23text%27 mask=%27url%28%23clip%29%27/%3E%3C/g%3E%3Cg id=%27fill%27 opacity=%271%27 fill=%27%23fff%27%3E%3Cuse xlink:href=%27%23logo%27/%3E%3Cuse xlink:href=%27%23text%27/%3E%3C/g%3E%3C/svg%3E"},7354:Q=>{Q.exports="data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 xmlns:xlink=%27http://www.w3.org/1999/xlink%27 fill-rule=%27evenodd%27 viewBox=%270 0 88 23%27%3E%3Cdefs%3E%3Cpath id=%27logo%27 d=%27M11.5 2.25c5.105 0 9.25 4.145 9.25 9.25s-4.145 9.25-9.25 9.25-9.25-4.145-9.25-9.25 4.145-9.25 9.25-9.25zM6.997 15.983c-.051-.338-.828-5.802 2.233-8.873a4.395 4.395 0 013.13-1.28c1.27 0 2.49.51 3.39 1.42.91.9 1.42 2.12 1.42 3.39 0 1.18-.449 2.301-1.28 3.13C12.72 16.93 7 16 7 16l-.003-.017zM15.3 10.5l-2 .8-.8 2-.8-2-2-.8 2-.8.8-2 .8 2 2 .8z%27/%3E%3Cpath id=%27text%27 d=%27M50.63 8c.13 0 .23.1.23.23V9c.7-.76 1.7-1.18 2.73-1.18 2.17 0 3.95 1.85 3.95 4.17s-1.77 4.19-3.94 4.19c-1.04 0-2.03-.43-2.74-1.18v3.77c0 .13-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V8.23c0-.12.1-.23.23-.23h1.4zm-3.86.01c.01 0 .01 0 .01-.01.13 0 .22.1.22.22v7.55c0 .12-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V15c-.7.76-1.69 1.19-2.73 1.19-2.17 0-3.94-1.87-3.94-4.19 0-2.32 1.77-4.19 3.94-4.19 1.03 0 2.02.43 2.73 1.18v-.75c0-.12.1-.23.23-.23h1.4zm26.375-.19a4.24 4.24 0 00-4.16 3.29c-.13.59-.13 1.19 0 1.77a4.233 4.233 0 004.17 3.3c2.35 0 4.26-1.87 4.26-4.19 0-2.32-1.9-4.17-4.27-4.17zM60.63 5c.13 0 .23.1.23.23v3.76c.7-.76 1.7-1.18 2.73-1.18 1.88 0 3.45 1.4 3.84 3.28.13.59.13 1.2 0 1.8-.39 1.88-1.96 3.29-3.84 3.29-1.03 0-2.02-.43-2.73-1.18v.77c0 .12-.1.23-.23.23h-1.4c-.13 0-.23-.1-.23-.23V5.23c0-.12.1-.23.23-.23h1.4zm-34 11h-1.4c-.13 0-.23-.11-.23-.23V8.22c.01-.13.1-.22.23-.22h1.4c.13 0 .22.11.23.22v.68c.5-.68 1.3-1.09 2.16-1.1h.03c1.09 0 2.09.6 2.6 1.55.45-.95 1.4-1.55 2.44-1.56 1.62 0 2.93 1.25 2.9 2.78l.03 5.2c0 .13-.1.23-.23.23h-1.41c-.13 0-.23-.11-.23-.23v-4.59c0-.98-.74-1.71-1.62-1.71-.8 0-1.46.7-1.59 1.62l.01 4.68c0 .13-.11.23-.23.23h-1.41c-.13 0-.23-.11-.23-.23v-4.59c0-.98-.74-1.71-1.62-1.71-.85 0-1.54.79-1.6 1.8v4.5c0 .13-.1.23-.23.23zm53.615 0h-1.61c-.04 0-.08-.01-.12-.03-.09-.06-.13-.19-.06-.28l2.43-3.71-2.39-3.65a.213.213 0 01-.03-.12c0-.12.09-.21.21-.21h1.61c.13 0 .24.06.3.17l1.41 2.37 1.4-2.37a.34.34 0 01.3-.17h1.6c.04 0 .08.01.12.03.09.06.13.19.06.28l-2.37 3.65 2.43 3.7c0 .05.01.09.01.13 0 .12-.09.21-.21.21h-1.61c-.13 0-.24-.06-.3-.17l-1.44-2.42-1.44 2.42a.34.34 0 01-.3.17zm-7.12-1.49c-1.33 0-2.42-1.12-2.42-2.51 0-1.39 1.08-2.52 2.42-2.52 1.33 0 2.42 1.12 2.42 2.51 0 1.39-1.08 2.51-2.42 2.52zm-19.865 0c-1.32 0-2.39-1.11-2.42-2.48v-.07c.02-1.38 1.09-2.49 2.4-2.49 1.32 0 2.41 1.12 2.41 2.51 0 1.39-1.07 2.52-2.39 2.53zm-8.11-2.48c-.01 1.37-1.09 2.47-2.41 2.47s-2.42-1.12-2.42-2.51c0-1.39 1.08-2.52 2.4-2.52 1.33 0 2.39 1.11 2.41 2.48l.02.08zm18.12 2.47c-1.32 0-2.39-1.11-2.41-2.48v-.06c.02-1.38 1.09-2.48 2.41-2.48s2.42 1.12 2.42 2.51c0 1.39-1.09 2.51-2.42 2.51z%27/%3E%3C/defs%3E%3Cmask id=%27clip%27%3E%3Crect x=%270%27 y=%270%27 width=%27100%25%27 height=%27100%25%27 fill=%27white%27/%3E%3Cuse xlink:href=%27%23logo%27/%3E%3Cuse xlink:href=%27%23text%27/%3E%3C/mask%3E%3Cg id=%27outline%27 opacity=%271%27 stroke=%27%23fff%27 stroke-width=%273%27 fill=%27%23fff%27%3E%3Ccircle mask=%27url%28%23clip%29%27 cx=%2711.5%27 cy=%2711.5%27 r=%279.25%27/%3E%3Cuse xlink:href=%27%23text%27 mask=%27url%28%23clip%29%27/%3E%3C/g%3E%3Cg id=%27fill%27 opacity=%271%27 fill=%27%23000%27%3E%3Cuse xlink:href=%27%23logo%27/%3E%3Cuse xlink:href=%27%23text%27/%3E%3C/g%3E%3C/svg%3E"}}]);