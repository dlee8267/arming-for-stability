"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[640],{6640:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _001_intro)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 266 modules\nvar src = __webpack_require__(6496);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(1796);\n;// ./src/components/graphs/001_DefenseExpenditureMap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n// Update file paths to use `process.env.PUBLIC_URL` for compatibility\nvar countriesJsonPath = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/public", "/countries-110m.json");\nvar defenseDataPath = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/public", "/data/processed/processed_defense_expenditure_by_country.csv");\nvar DefenseExpenditureMap = function DefenseExpenditureMap() {\n  var svgRef = (0,react.useRef)();\n  var lineChartRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lineTooltip = _useState4[0],\n    setLineTooltip = _useState4[1];\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    countryData = _useState6[0],\n    setCountryData = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    countries = _useState8[0],\n    setCountries = _useState8[1];\n  var _useState9 = (0,react.useState)(1960),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedYear = _useState10[0],\n    setSelectedYear = _useState10[1];\n  var _useState11 = (0,react.useState)(true),\n    _useState12 = _slicedToArray(_useState11, 2),\n    loading = _useState12[0],\n    setLoading = _useState12[1];\n  var _useState13 = (0,react.useState)(undefined),\n    _useState14 = _slicedToArray(_useState13, 2),\n    error = _useState14[0],\n    setError = _useState14[1];\n  var minYear = 1960;\n  var maxYear = 2022;\n  var targetCountries = ["United States", "China", "Russia"];\n  var countryNameMapping = {\n    "Bahamas, The": "Bahamas",\n    "Congo, Dem. Rep.": "Democratic Republic of the Congo",\n    "Congo, Rep.": "Republic of the Congo",\n    "Côte d\'Ivoire": "Ivory Coast",\n    "Egypt, Arab Rep.": "Egypt",\n    "Gambia, The": "Gambia",\n    "Hong Kong SAR, China": "Hong Kong",\n    "Iran, Islamic Rep.": "Iran",\n    "Korea, Dem. People\'s Rep.": "North Korea",\n    "Korea, Rep.": "South Korea",\n    "Kyrgyz Republic": "Kyrgyzstan",\n    "Lao PDR": "Laos",\n    "Micronesia, Fed. Sts.": "Federated States of Micronesia",\n    "Russian Federation": "Russia",\n    "Sint Maarten (Dutch part)": "Sint Maarten",\n    "Slovak Republic": "Slovakia",\n    "Syrian Arab Republic": "Syria",\n    "Venezuela, RB": "Venezuela",\n    "Yemen, Rep.": "Yemen",\n    "United States": "United States of America",\n    "Viet Nam": "Vietnam",\n    "Vietnam": "Vietnam",\n    "Turkiye": "Turkey",\n    "West Bank and Gaza": "Palestine",\n    "Brunei Darussalam": "Brunei",\n    "Bolivia": "Bolivia",\n    "Cape Verde": "Cabo Verde",\n    "Czechia": "Czech Republic",\n    "Faroe Islands": "Faroe Islands",\n    "Faeroe Islands": "Faroe Islands",\n    "Macao SAR, China": "Macau",\n    "North Macedonia": "North Macedonia",\n    "Palestinian Territories": "Palestine",\n    "Timor-Leste": "Timor-Leste",\n    "East Timor": "Timor-Leste",\n    "Myanmar": "Myanmar",\n    "Burma": "Myanmar",\n    "Ivory Coast": "Côte d\'Ivoire",\n    "South Sudan": "South Sudan",\n    "Sao Tome and Principe": "São Tomé and Principe",\n    "Eswatini": "Eswatini",\n    "Taiwan": "Taiwan",\n    "Republic of the Congo": "Republic of the Congo",\n    "Democratic Republic of the Congo": "Democratic Republic of the Congo",\n    "Cabo Verde": "Cabo Verde",\n    "North Korea": "North Korea",\n    "South Korea": "South Korea",\n    "Russia": "Russia",\n    "Laos": "Laos",\n    "Macedonia": "North Macedonia"\n  };\n  var parseValue = function parseValue(value) {\n    if (value === "$-") return 0;\n    return parseFloat(value.replace(/[$,]/g, \'\')) || 0;\n  };\n  (0,react.useEffect)(function () {\n    setLoading(true);\n\n    // Update file paths for compatibility\n    Promise.all([src/* json */.Pq9(countriesJsonPath), src/* csv */.fu7(defenseDataPath, function (d) {\n      var parsedData = {\n        Country: d.Country\n      };\n      for (var year = minYear; year <= maxYear; year++) {\n        parsedData[year] = parseValue(d[year]);\n      }\n      return parsedData;\n    })]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        worldData = _ref2[0],\n        defenseData = _ref2[1];\n      var countriesData = feature/* default */.A(worldData, worldData.objects.countries).features;\n      setCountries(countriesData);\n      var processedData = {};\n      defenseData.forEach(function (row) {\n        var countryName = countryNameMapping[row.Country] || row.Country;\n        processedData[countryName] = row;\n      });\n      setCountryData(processedData);\n      setLoading(false);\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n      setError("Failed to load data.");\n      setLoading(false);\n    });\n  }, []);\n  (0,react.useEffect)(function () {\n    if (loading || error || !countries.length || !Object.keys(countryData).length) return;\n    var width = 800;\n    var height = 400;\n    var svg = src/* select */.Ltv(svgRef.current).attr("viewBox", "0 0 ".concat(width, " ").concat(height)).style("width", "100%").style("height", "auto");\n    var projection = src/* geoMercator */.bAh().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW().projection(projection);\n    var thresholds = [5, 25, 55, 85];\n    var colors = ["#f0d8d8", "#e3a6a6", "#b26464", "#8e2a2a", "#730f0f"];\n    var colorScale = src/* scaleThreshold */.c3b().domain(thresholds).range(colors);\n    svg.selectAll("g.map-group").remove();\n    var g = svg.append("g").attr("class", "map-group");\n    svg.call(src/* zoom */.s_O().scaleExtent([1, 8]).on("zoom", function (event) {\n      g.attr("transform", event.transform);\n    }));\n    g.selectAll("path").data(countries).enter().append("path").attr("d", path).attr("fill", function (d) {\n      var _countryData$country;\n      var country = d.properties.name;\n      var value = (_countryData$country = countryData[country]) === null || _countryData$country === void 0 ? void 0 : _countryData$country[selectedYear];\n      return value > 0 ? colorScale(value) : "#ccc";\n    }).attr("stroke", "#333").on("mouseenter", function (event, d) {\n      var _countryData$country2;\n      var country = d.properties.name;\n      var value = ((_countryData$country2 = countryData[country]) === null || _countryData$country2 === void 0 ? void 0 : _countryData$country2[selectedYear]) || 0;\n      setTooltip({\n        visible: true,\n        x: event.clientX + 10,\n        y: event.clientY + 10,\n        content: "".concat(country, ": $").concat(value.toFixed(2), "B")\n      });\n    }).on("mousemove", function (event) {\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: event.clientX + 10,\n          y: event.clientY + 10\n        });\n      });\n    }).on("mouseleave", function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    });\n    svg.selectAll("g.legend").remove();\n    var legendX = width - 65;\n    var legendY = height - 110;\n    var legendGroup = svg.append("g").attr("class", "legend").attr("transform", "translate(".concat(legendX, ",").concat(legendY, ")"));\n    legendGroup.append("rect").attr("x", -20).attr("y", -40).attr("rx", 5).attr("ry", 5).attr("width", 80).attr("height", thresholds.length * 20 + 60).style("fill", "black").style("opacity", 0.9).lower();\n    legendGroup.append("text").attr("x", -15).attr("y", -20).text("Billion USD").style("font-size", "10px").style("fill", "#e0e0e0");\n    thresholds.slice().reverse().forEach(function (threshold, i) {\n      legendGroup.append("rect").attr("x", -15).attr("y", i * 20 - 10).attr("width", 20).attr("height", 20).style("fill", colors[thresholds.length - 1 - i]);\n      legendGroup.append("text").attr("x", 15).attr("y", i * 20).text(i === 0 ? "> ".concat(threshold) : "".concat(threshold, " - ").concat(thresholds[thresholds.length - i - 1])).style("font-size", "10px").style("fill", "#e0e0e0");\n    });\n    legendGroup.append("rect").attr("x", -15).attr("y", thresholds.length * 20 - 10).attr("width", 20).attr("height", 20).style("fill", colors[0]);\n    legendGroup.append("text").attr("x", 15).attr("y", thresholds.length * 20).text("< ".concat(thresholds[0])).style("font-size", "9px").style("fill", "white");\n  }, [countries, countryData, selectedYear, loading, error]);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: "relative",\n      width: "100%"\n    }\n  });\n};\n/* harmony default export */ const _001_DefenseExpenditureMap = (DefenseExpenditureMap);\n;// ./src/components/graphs/001_animatedExportBarChart.js\n\n\n\n// Use `process.env.PUBLIC_URL` for paths to ensure compatibility with GitHub Pages\nvar iconPath = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/public", "/ar15.svg");\nvar armsExportDataPath = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/public", "/data/processed/us_export.csv");\nvar iconValue = 2500;\nvar GunBarChart = function GunBarChart() {\n  var svgRef = (0,react.useRef)();\n  (0,react.useEffect)(function () {\n    var width = 1000;\n    var height = 410;\n    var margin = {\n      top: 40,\n      right: 20,\n      bottom: 50,\n      left: 40\n    };\n    src/* select */.Ltv(svgRef.current).selectAll("*").remove();\n\n    // Load data from the correct path\n    src/* csv */.fu7(armsExportDataPath, src/* autoType */.cGt).then(function (data) {\n      // Ensure data is sorted by year\n      data.sort(function (a, b) {\n        return a.year - b.year;\n      });\n\n      // X and Y scales\n      var xScale = src/* scaleBand */.WH().domain(data.map(function (d) {\n        return d.year;\n      })).range([margin.left, width - margin.right]).padding(0.2);\n      var yScale = src/* scaleLinear */.m4Y().domain([0, 18000]).nice().range([height - margin.bottom, margin.top]);\n\n      // Create SVG container\n      var svg = src/* select */.Ltv(svgRef.current).attr("width", width).attr("height", height).style("background", "").style("border-radius", "8px");\n\n      // X Axis\n      svg.append("g").attr("transform", "translate(0, ".concat(height - margin.bottom, ")")).call(src/* axisBottom */.l78(xScale).tickValues(data.map(function (d) {\n        return d.year;\n      }).filter(function (year) {\n        return year % 10 === 0;\n      })) // Filter years divisible by 10\n      .tickFormat(src/* format */.GPZ("d")) // Format the year as a number\n      ).style("font-size", "15px").style("fill", "#e0e0e0");\n\n      // Y Axis\n      svg.append("g").attr("transform", "translate(".concat(margin.left, ", 0)")).call(src/* axisLeft */.V4s(yScale).ticks(5).tickFormat(function (d) {\n        return "".concat(d / 1000, "B");\n      })).style("font-size", "15px").style("fill", "#e0e0e0");\n\n      // Bars with gun icons\n      data.forEach(function (d, i) {\n        var barGroup = svg.append("g").attr("transform", "translate(".concat(xScale(d.year), ", ").concat(height - margin.bottom, ")"));\n        var iconsCount = Math.floor(d["export"] / iconValue); // Full icons\n        var partialIconValue = d["export"] % iconValue / iconValue; // Fractional part for chopped gun\n        var iconSpacing = 10; // Space between icons\n        var iconSize = 34.5; // Icon size (width and height)\n\n        // Sequential animation delay for each year\n        var yearDelay = i * 40;\n\n        // Append full icons\n        for (var j = 0; j < iconsCount; j++) {\n          barGroup.append("image").attr("xlink:href", iconPath).attr("width", iconSize).attr("height", iconSize).attr("x", xScale.bandwidth() / 2 - iconSize / 2) // Center icon within the bar\n          .attr("y", 0) // Start icon from the top\n          .style("filter", "invert(100%)").style("opacity", 0).transition().delay(yearDelay + j * 20) // Sequentially drop each icon\n          .duration(50).ease(src/* easeBounce */.r_F).attr("y", -(j * (iconSize + iconSpacing)) - iconSize) // Adjust spacing\n          .style("opacity", 1);\n        }\n\n        // Append chopped icon for partial value\n        if (partialIconValue > 0.3) {\n          var partialClipPathId = "clip-".concat(i);\n\n          // Define a clipping path for the chopped icon, crop from the bottom\n          svg.append("clipPath").attr("id", partialClipPathId).append("rect").attr("width", iconSize).attr("height", iconSize * partialIconValue) // Clip height based on the fraction\n          .attr("x", xScale.bandwidth() / 2 - iconSize / 2).attr("y", -(iconsCount * (iconSize + iconSpacing)) - iconSize * partialIconValue); // Adjust y to crop from the bottom\n\n          // Append the chopped icon with clipping\n          barGroup.append("image").attr("xlink:href", iconPath).attr("width", iconSize).attr("height", iconSize).attr("clip-path", "url(#".concat(partialClipPathId, ")")).attr("x", xScale.bandwidth() / 2 - iconSize / 2).attr("y", -(iconsCount * (iconSize + iconSpacing)) - iconSize) // Adjust position to match clip path\n          .style("filter", "invert(100%)").style("opacity", 0).transition().delay(yearDelay + iconsCount * 20) // Add delay after the full icons\n          .duration(50).ease(src/* easeBounce */.r_F).style("opacity", 1);\n        }\n      });\n\n      // Add legend\n      svg.append("g").attr("transform", "translate(".concat(width - margin.right - 120, ", ").concat(margin.top, ")")) // Position of the legend\n      .call(function (g) {\n        g.append("image").attr("xlink:href", iconPath).attr("width", 34.5).attr("height", 50).attr("x", 0).attr("y", 0).style("filter", "invert(100%)").attr("transform", "rotate(90)"); // Rotate 90 degrees clockwise\n\n        g.append("text").attr("x", 16) // Position text next to the icon\n        .attr("y", 16).attr("dy", "0.35em").style("font-size", "16px").style("fill", "#e0e0e0").text(" = $ 2.5B");\n      });\n    });\n  }, []);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'relative\',\n      alignItems: \'flex-start\',\n      padding: \'40px\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingBottom: \'20px\'\n    }\n  }, "US Arms Exports By Year"), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }));\n};\n/* harmony default export */ const _001_animatedExportBarChart = (GunBarChart);\n;// ./src/components/001_intro.js\n\n\n\nvar intro = function intro() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "001"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Introduction"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\'\n    }\n  }, "United States"), " has strategically leveraged arms exports as a tool to strengthen alliances, deter adversaries, and advance its geopolitical goals. Spanning decades, U.S. arms exports surged during key moments such as the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "Cold War"), ", the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "War on Terror"), ", and recent conflicts like the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "Russia-Ukraine War"), ", shaping global power dynamics. The chart below, illustrating U.S. arms exports in billions, demonstrates how these trades align with major geopolitical events, reflecting their role as an integral part of broader ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "geopolitical strategy"), ". More than economic transactions, arms exports function as extensions of diplomacy within the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "Diplomatic, Informational, Military, and Economic (DIME)"), " framework to promote stability, counter adversaries, and serve national interests."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_001_animatedExportBarChart, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Illustrative Case: The Indo-Pacific as a New Geopolitical Center of Gravity"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "As you slide through the year selector, it becomes clear that ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#FFDB58\'\n    }\n  }, "China "), "has steadily increased its defense budget since the late 1990s and early 2000s, surpassing ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#DC143C\'\n    }\n  }, "Russia "), "and signaling its ambitions for military modernization and expanded influence, particularly in the Indo-Pacific region. In response, Indo-Pacific nations have also significantly increased their defense spending, bolstering military capabilities to address regional security concerns and counterbalance", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#FFDB58\'\n    }\n  }, " China\'s "), " growing presence."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_001_DefenseExpenditureMap, null)));\n};\n/* harmony default export */ const _001_intro = (intro);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUssRUFBRTtJQUFLO0VBQUUsZ0JBQ3JEbEYsbUJBQUEsQ0FBQ1ksMEJBQXFCLE1BQUUsQ0FDckIsQ0FFRSxDQUFDO0FBRWQsQ0FBQztBQUVELGlEQUFlK0ssS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9zcmMvY29tcG9uZW50cy9ncmFwaHMvMDAxX0RlZmVuc2VFeHBlbmRpdHVyZU1hcC5qcz81N2VhIiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9zcmMvY29tcG9uZW50cy9ncmFwaHMvMDAxX2FuaW1hdGVkRXhwb3J0QmFyQ2hhcnQuanM/Yzg4YiIsIndlYnBhY2s6Ly9maW5hbF9wcm9qZWN0Ly4vc3JjL2NvbXBvbmVudHMvMDAxX2ludHJvLmpzPzU0ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCAqIGFzIHRvcG9qc29uIGZyb20gJ3RvcG9qc29uLWNsaWVudCc7XG5cbi8vIFVwZGF0ZSBmaWxlIHBhdGhzIHRvIHVzZSBgcHJvY2Vzcy5lbnYuUFVCTElDX1VSTGAgZm9yIGNvbXBhdGliaWxpdHlcbmNvbnN0IGNvdW50cmllc0pzb25QYXRoID0gYCR7cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0vY291bnRyaWVzLTExMG0uanNvbmA7XG5jb25zdCBkZWZlbnNlRGF0YVBhdGggPSBgJHtwcm9jZXNzLmVudi5QVUJMSUNfVVJMfS9kYXRhL3Byb2Nlc3NlZC9wcm9jZXNzZWRfZGVmZW5zZV9leHBlbmRpdHVyZV9ieV9jb3VudHJ5LmNzdmA7XG5cbmNvbnN0IERlZmVuc2VFeHBlbmRpdHVyZU1hcCA9ICgpID0+IHtcbiAgY29uc3Qgc3ZnUmVmID0gdXNlUmVmKCk7XG4gIGNvbnN0IGxpbmVDaGFydFJlZiA9IHVzZVJlZigpO1xuXG4gIGNvbnN0IFt0b29sdGlwLCBzZXRUb29sdGlwXSA9IHVzZVN0YXRlKHsgdmlzaWJsZTogZmFsc2UsIHg6IDAsIHk6IDAsIGNvbnRlbnQ6IG51bGwgfSk7XG4gIGNvbnN0IFtsaW5lVG9vbHRpcCwgc2V0TGluZVRvb2x0aXBdID0gdXNlU3RhdGUoeyB2aXNpYmxlOiBmYWxzZSwgeDogMCwgeTogMCwgY29udGVudDogbnVsbCB9KTtcbiAgY29uc3QgW2NvdW50cnlEYXRhLCBzZXRDb3VudHJ5RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG4gIGNvbnN0IFtjb3VudHJpZXMsIHNldENvdW50cmllc10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtzZWxlY3RlZFllYXIsIHNldFNlbGVjdGVkWWVhcl0gPSB1c2VTdGF0ZSgxOTYwKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUodW5kZWZpbmVkKTtcblxuICBjb25zdCBtaW5ZZWFyID0gMTk2MDtcbiAgY29uc3QgbWF4WWVhciA9IDIwMjI7XG5cbiAgY29uc3QgdGFyZ2V0Q291bnRyaWVzID0gW1wiVW5pdGVkIFN0YXRlc1wiLCBcIkNoaW5hXCIsIFwiUnVzc2lhXCJdO1xuICBjb25zdCBjb3VudHJ5TmFtZU1hcHBpbmcgPSB7XG4gICAgXCJCYWhhbWFzLCBUaGVcIjogXCJCYWhhbWFzXCIsXG4gICAgXCJDb25nbywgRGVtLiBSZXAuXCI6IFwiRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGUgQ29uZ29cIixcbiAgICBcIkNvbmdvLCBSZXAuXCI6IFwiUmVwdWJsaWMgb2YgdGhlIENvbmdvXCIsXG4gICAgXCJDw7R0ZSBkJ0l2b2lyZVwiOiBcIkl2b3J5IENvYXN0XCIsXG4gICAgXCJFZ3lwdCwgQXJhYiBSZXAuXCI6IFwiRWd5cHRcIixcbiAgICBcIkdhbWJpYSwgVGhlXCI6IFwiR2FtYmlhXCIsXG4gICAgXCJIb25nIEtvbmcgU0FSLCBDaGluYVwiOiBcIkhvbmcgS29uZ1wiLFxuICAgIFwiSXJhbiwgSXNsYW1pYyBSZXAuXCI6IFwiSXJhblwiLFxuICAgIFwiS29yZWEsIERlbS4gUGVvcGxlJ3MgUmVwLlwiOiBcIk5vcnRoIEtvcmVhXCIsXG4gICAgXCJLb3JlYSwgUmVwLlwiOiBcIlNvdXRoIEtvcmVhXCIsXG4gICAgXCJLeXJneXogUmVwdWJsaWNcIjogXCJLeXJneXpzdGFuXCIsXG4gICAgXCJMYW8gUERSXCI6IFwiTGFvc1wiLFxuICAgIFwiTWljcm9uZXNpYSwgRmVkLiBTdHMuXCI6IFwiRmVkZXJhdGVkIFN0YXRlcyBvZiBNaWNyb25lc2lhXCIsXG4gICAgXCJSdXNzaWFuIEZlZGVyYXRpb25cIjogXCJSdXNzaWFcIixcbiAgICBcIlNpbnQgTWFhcnRlbiAoRHV0Y2ggcGFydClcIjogXCJTaW50IE1hYXJ0ZW5cIixcbiAgICBcIlNsb3ZhayBSZXB1YmxpY1wiOiBcIlNsb3Zha2lhXCIsXG4gICAgXCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiOiBcIlN5cmlhXCIsXG4gICAgXCJWZW5lenVlbGEsIFJCXCI6IFwiVmVuZXp1ZWxhXCIsXG4gICAgXCJZZW1lbiwgUmVwLlwiOiBcIlllbWVuXCIsXG4gICAgXCJVbml0ZWQgU3RhdGVzXCI6IFwiVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhXCIsXG4gICAgXCJWaWV0IE5hbVwiOiBcIlZpZXRuYW1cIixcbiAgICBcIlZpZXRuYW1cIjogXCJWaWV0bmFtXCIsXG4gICAgXCJUdXJraXllXCI6IFwiVHVya2V5XCIsXG4gICAgXCJXZXN0IEJhbmsgYW5kIEdhemFcIjogXCJQYWxlc3RpbmVcIixcbiAgICBcIkJydW5laSBEYXJ1c3NhbGFtXCI6IFwiQnJ1bmVpXCIsXG4gICAgXCJCb2xpdmlhXCI6IFwiQm9saXZpYVwiLFxuICAgIFwiQ2FwZSBWZXJkZVwiOiBcIkNhYm8gVmVyZGVcIixcbiAgICBcIkN6ZWNoaWFcIjogXCJDemVjaCBSZXB1YmxpY1wiLFxuICAgIFwiRmFyb2UgSXNsYW5kc1wiOiBcIkZhcm9lIElzbGFuZHNcIixcbiAgICBcIkZhZXJvZSBJc2xhbmRzXCI6IFwiRmFyb2UgSXNsYW5kc1wiLFxuICAgIFwiTWFjYW8gU0FSLCBDaGluYVwiOiBcIk1hY2F1XCIsXG4gICAgXCJOb3J0aCBNYWNlZG9uaWFcIjogXCJOb3J0aCBNYWNlZG9uaWFcIixcbiAgICBcIlBhbGVzdGluaWFuIFRlcnJpdG9yaWVzXCI6IFwiUGFsZXN0aW5lXCIsXG4gICAgXCJUaW1vci1MZXN0ZVwiOiBcIlRpbW9yLUxlc3RlXCIsXG4gICAgXCJFYXN0IFRpbW9yXCI6IFwiVGltb3ItTGVzdGVcIixcbiAgICBcIk15YW5tYXJcIjogXCJNeWFubWFyXCIsXG4gICAgXCJCdXJtYVwiOiBcIk15YW5tYXJcIixcbiAgICBcIkl2b3J5IENvYXN0XCI6IFwiQ8O0dGUgZCdJdm9pcmVcIixcbiAgICBcIlNvdXRoIFN1ZGFuXCI6IFwiU291dGggU3VkYW5cIixcbiAgICBcIlNhbyBUb21lIGFuZCBQcmluY2lwZVwiOiBcIlPDo28gVG9tw6kgYW5kIFByaW5jaXBlXCIsXG4gICAgXCJFc3dhdGluaVwiOiBcIkVzd2F0aW5pXCIsXG4gICAgXCJUYWl3YW5cIjogXCJUYWl3YW5cIixcbiAgICBcIlJlcHVibGljIG9mIHRoZSBDb25nb1wiOiBcIlJlcHVibGljIG9mIHRoZSBDb25nb1wiLFxuICAgIFwiRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGUgQ29uZ29cIjogXCJEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZSBDb25nb1wiLFxuICAgIFwiQ2FibyBWZXJkZVwiOiBcIkNhYm8gVmVyZGVcIixcbiAgICBcIk5vcnRoIEtvcmVhXCI6IFwiTm9ydGggS29yZWFcIixcbiAgICBcIlNvdXRoIEtvcmVhXCI6IFwiU291dGggS29yZWFcIixcbiAgICBcIlJ1c3NpYVwiOiBcIlJ1c3NpYVwiLFxuICAgIFwiTGFvc1wiOiBcIkxhb3NcIixcbiAgICBcIk1hY2Vkb25pYVwiOiBcIk5vcnRoIE1hY2Vkb25pYVwiXG4gIH07XG4gICAgXG4gIGNvbnN0IHBhcnNlVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IFwiJC1cIikgcmV0dXJuIDA7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgvWyQsXS9nLCAnJykpIHx8IDA7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xuXG4gICAgLy8gVXBkYXRlIGZpbGUgcGF0aHMgZm9yIGNvbXBhdGliaWxpdHlcbiAgICBQcm9taXNlLmFsbChbXG4gICAgICBkMy5qc29uKGNvdW50cmllc0pzb25QYXRoKSxcbiAgICAgIGQzLmNzdihkZWZlbnNlRGF0YVBhdGgsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSB7IENvdW50cnk6IGQuQ291bnRyeSB9O1xuICAgICAgICBmb3IgKGxldCB5ZWFyID0gbWluWWVhcjsgeWVhciA8PSBtYXhZZWFyOyB5ZWFyKyspIHtcbiAgICAgICAgICBwYXJzZWREYXRhW3llYXJdID0gcGFyc2VWYWx1ZShkW3llYXJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkRGF0YTtcbiAgICAgIH0pLFxuICAgIF0pXG4gICAgICAudGhlbigoW3dvcmxkRGF0YSwgZGVmZW5zZURhdGFdKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvdW50cmllc0RhdGEgPSB0b3BvanNvbi5mZWF0dXJlKHdvcmxkRGF0YSwgd29ybGREYXRhLm9iamVjdHMuY291bnRyaWVzKS5mZWF0dXJlcztcbiAgICAgICAgc2V0Q291bnRyaWVzKGNvdW50cmllc0RhdGEpO1xuXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSB7fTtcbiAgICAgICAgZGVmZW5zZURhdGEuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgY29uc3QgY291bnRyeU5hbWUgPSBjb3VudHJ5TmFtZU1hcHBpbmdbcm93LkNvdW50cnldIHx8IHJvdy5Db3VudHJ5O1xuICAgICAgICAgIHByb2Nlc3NlZERhdGFbY291bnRyeU5hbWVdID0gcm93O1xuICAgICAgICB9KTtcblxuICAgICAgICBzZXRDb3VudHJ5RGF0YShwcm9jZXNzZWREYXRhKTtcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyBkYXRhOlwiLCBlcnJvcik7XG4gICAgICAgIHNldEVycm9yKFwiRmFpbGVkIHRvIGxvYWQgZGF0YS5cIik7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgfSk7XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChsb2FkaW5nIHx8IGVycm9yIHx8ICFjb3VudHJpZXMubGVuZ3RoIHx8ICFPYmplY3Qua2V5cyhjb3VudHJ5RGF0YSkubGVuZ3RoKSByZXR1cm47XG5cbiAgICBjb25zdCB3aWR0aCA9IDgwMDtcbiAgICBjb25zdCBoZWlnaHQgPSA0MDA7XG4gICAgY29uc3Qgc3ZnID0gZDNcbiAgICAgIC5zZWxlY3Qoc3ZnUmVmLmN1cnJlbnQpXG4gICAgICAuYXR0cihcInZpZXdCb3hcIiwgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxuICAgICAgLnN0eWxlKFwid2lkdGhcIiwgXCIxMDAlXCIpXG4gICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgXCJhdXRvXCIpO1xuXG4gICAgY29uc3QgcHJvamVjdGlvbiA9IGQzXG4gICAgICAuZ2VvTWVyY2F0b3IoKVxuICAgICAgLmNlbnRlcihbMCwgMjBdKVxuICAgICAgLnNjYWxlKDEzMClcbiAgICAgIC50cmFuc2xhdGUoW3dpZHRoIC8gMiwgaGVpZ2h0IC8gMl0pO1xuICAgIGNvbnN0IHBhdGggPSBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTtcblxuICAgIGNvbnN0IHRocmVzaG9sZHMgPSBbNSwgMjUsIDU1LCA4NV07XG4gICAgY29uc3QgY29sb3JzID0gW1wiI2YwZDhkOFwiLCBcIiNlM2E2YTZcIiwgXCIjYjI2NDY0XCIsIFwiIzhlMmEyYVwiLCBcIiM3MzBmMGZcIl07XG4gICAgY29uc3QgY29sb3JTY2FsZSA9IGQzLnNjYWxlVGhyZXNob2xkKCkuZG9tYWluKHRocmVzaG9sZHMpLnJhbmdlKGNvbG9ycyk7XG5cbiAgICBzdmcuc2VsZWN0QWxsKFwiZy5tYXAtZ3JvdXBcIikucmVtb3ZlKCk7XG4gICAgY29uc3QgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcC1ncm91cFwiKTtcblxuICAgIHN2Zy5jYWxsKFxuICAgICAgZDMuem9vbSgpLnNjYWxlRXh0ZW50KFsxLCA4XSkub24oXCJ6b29tXCIsIChldmVudCkgPT4ge1xuICAgICAgICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZXZlbnQudHJhbnNmb3JtKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGcuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgICAgLmRhdGEoY291bnRyaWVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAuYXR0cihcImRcIiwgcGF0aClcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudHJ5ID0gZC5wcm9wZXJ0aWVzLm5hbWU7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY291bnRyeURhdGFbY291bnRyeV0/LltzZWxlY3RlZFllYXJdO1xuICAgICAgICByZXR1cm4gdmFsdWUgPiAwID8gY29sb3JTY2FsZSh2YWx1ZSkgOiBcIiNjY2NcIjtcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMzMzNcIilcbiAgICAgIC5vbihcIm1vdXNlZW50ZXJcIiwgKGV2ZW50LCBkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvdW50cnkgPSBkLnByb3BlcnRpZXMubmFtZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjb3VudHJ5RGF0YVtjb3VudHJ5XT8uW3NlbGVjdGVkWWVhcl0gfHwgMDtcbiAgICAgICAgc2V0VG9vbHRpcCh7XG4gICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICB4OiBldmVudC5jbGllbnRYICsgMTAsXG4gICAgICAgICAgeTogZXZlbnQuY2xpZW50WSArIDEwLFxuICAgICAgICAgIGNvbnRlbnQ6IGAke2NvdW50cnl9OiAkJHt2YWx1ZS50b0ZpeGVkKDIpfUJgLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldFRvb2x0aXAoKHByZXYpID0+ICh7IC4uLnByZXYsIHg6IGV2ZW50LmNsaWVudFggKyAxMCwgeTogZXZlbnQuY2xpZW50WSArIDEwIH0pKTtcbiAgICAgIH0pXG4gICAgICAub24oXCJtb3VzZWxlYXZlXCIsICgpID0+XG4gICAgICAgIHNldFRvb2x0aXAoeyB2aXNpYmxlOiBmYWxzZSwgeDogMCwgeTogMCwgY29udGVudDogbnVsbCB9KVxuICAgICAgKTtcblxuICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxlZ2VuZFwiKS5yZW1vdmUoKTtcbiAgICBjb25zdCBsZWdlbmRYID0gd2lkdGggLSA2NTtcbiAgICBjb25zdCBsZWdlbmRZID0gaGVpZ2h0IC0gMTEwO1xuXG4gICAgY29uc3QgbGVnZW5kR3JvdXAgPSBzdmdcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwibGVnZW5kXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bGVnZW5kWH0sJHtsZWdlbmRZfSlgKTtcblxuICAgIGxlZ2VuZEdyb3VwLmFwcGVuZChcInJlY3RcIilcbiAgICAgIC5hdHRyKFwieFwiLCAtMjApXG4gICAgICAuYXR0cihcInlcIiwgLTQwKVxuICAgICAgLmF0dHIoXCJyeFwiLCA1KVxuICAgICAgLmF0dHIoXCJyeVwiLCA1KVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA4MClcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHRocmVzaG9sZHMubGVuZ3RoICogMjAgKyA2MClcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJibGFja1wiKVxuICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwLjkpXG4gICAgICAubG93ZXIoKTtcblxuICAgIGxlZ2VuZEdyb3VwLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5hdHRyKFwieFwiLCAtMTUpXG4gICAgICAuYXR0cihcInlcIiwgLTIwKVxuICAgICAgLnRleHQoXCJCaWxsaW9uIFVTRFwiKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTBweFwiKVxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiNlMGUwZTBcIik7XG5cbiAgICB0aHJlc2hvbGRzXG4gICAgICAuc2xpY2UoKVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZvckVhY2goKHRocmVzaG9sZCwgaSkgPT4ge1xuICAgICAgICBsZWdlbmRHcm91cC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIC0xNSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgaSAqIDIwIC0gMTApXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAyMClcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAyMClcbiAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGNvbG9yc1t0aHJlc2hvbGRzLmxlbmd0aCAtIDEgLSBpXSk7XG5cbiAgICAgICAgbGVnZW5kR3JvdXAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCAxNSlcbiAgICAgICAgICAuYXR0cihcInlcIiwgaSAqIDIwKVxuICAgICAgICAgIC50ZXh0KFxuICAgICAgICAgICAgaSA9PT0gMFxuICAgICAgICAgICAgICA/IGA+ICR7dGhyZXNob2xkfWBcbiAgICAgICAgICAgICAgOiBgJHt0aHJlc2hvbGR9IC0gJHt0aHJlc2hvbGRzW3RocmVzaG9sZHMubGVuZ3RoIC0gaSAtIDFdfWBcbiAgICAgICAgICApXG4gICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTBweFwiKVxuICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZTBlMGUwXCIpO1xuICAgICAgfSk7XG5cbiAgICBsZWdlbmRHcm91cC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAuYXR0cihcInhcIiwgLTE1KVxuICAgICAgLmF0dHIoXCJ5XCIsIHRocmVzaG9sZHMubGVuZ3RoICogMjAgLSAxMClcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgMjApXG4gICAgICAuYXR0cihcImhlaWdodFwiLCAyMClcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgY29sb3JzWzBdKTtcblxuICAgIGxlZ2VuZEdyb3VwLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5hdHRyKFwieFwiLCAxNSlcbiAgICAgIC5hdHRyKFwieVwiLCB0aHJlc2hvbGRzLmxlbmd0aCAqIDIwKVxuICAgICAgLnRleHQoYDwgJHt0aHJlc2hvbGRzWzBdfWApXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCI5cHhcIilcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJ3aGl0ZVwiKTtcbiAgfSwgW2NvdW50cmllcywgY291bnRyeURhdGEsIHNlbGVjdGVkWWVhciwgbG9hZGluZywgZXJyb3JdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgey8qIC4uLiAodGhlIHJlc3Qgb2YgeW91ciByZW5kZXIgY29kZSByZW1haW5zIHVuY2hhbmdlZCkgKi99XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZlbnNlRXhwZW5kaXR1cmVNYXA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbi8vIFVzZSBgcHJvY2Vzcy5lbnYuUFVCTElDX1VSTGAgZm9yIHBhdGhzIHRvIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggR2l0SHViIFBhZ2VzXG5jb25zdCBpY29uUGF0aCA9IGAke3Byb2Nlc3MuZW52LlBVQkxJQ19VUkx9L2FyMTUuc3ZnYDtcbmNvbnN0IGFybXNFeHBvcnREYXRhUGF0aCA9IGAke3Byb2Nlc3MuZW52LlBVQkxJQ19VUkx9L2RhdGEvcHJvY2Vzc2VkL3VzX2V4cG9ydC5jc3ZgO1xuXG5jb25zdCBpY29uVmFsdWUgPSAyNTAwO1xuXG5jb25zdCBHdW5CYXJDaGFydCA9ICgpID0+IHtcbiAgY29uc3Qgc3ZnUmVmID0gdXNlUmVmKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB3aWR0aCA9IDEwMDA7XG4gICAgY29uc3QgaGVpZ2h0ID0gNDEwO1xuICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiA0MCwgcmlnaHQ6IDIwLCBib3R0b206IDUwLCBsZWZ0OiA0MCB9O1xuXG4gICAgZDMuc2VsZWN0KHN2Z1JlZi5jdXJyZW50KS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuXG4gICAgLy8gTG9hZCBkYXRhIGZyb20gdGhlIGNvcnJlY3QgcGF0aFxuICAgIGQzLmNzdihhcm1zRXhwb3J0RGF0YVBhdGgsIGQzLmF1dG9UeXBlKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAvLyBFbnN1cmUgZGF0YSBpcyBzb3J0ZWQgYnkgeWVhclxuICAgICAgZGF0YS5zb3J0KChhLCBiKSA9PiBhLnllYXIgLSBiLnllYXIpO1xuXG4gICAgICAvLyBYIGFuZCBZIHNjYWxlc1xuICAgICAgY29uc3QgeFNjYWxlID0gZDMuc2NhbGVCYW5kKClcbiAgICAgICAgLmRvbWFpbihkYXRhLm1hcCgoZCkgPT4gZC55ZWFyKSlcbiAgICAgICAgLnJhbmdlKFttYXJnaW4ubGVmdCwgd2lkdGggLSBtYXJnaW4ucmlnaHRdKVxuICAgICAgICAucGFkZGluZygwLjIpO1xuXG4gICAgICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5kb21haW4oWzAsIDE4MDAwXSlcbiAgICAgICAgLm5pY2UoKVxuICAgICAgICAucmFuZ2UoW2hlaWdodCAtIG1hcmdpbi5ib3R0b20sIG1hcmdpbi50b3BdKTtcblxuICAgICAgLy8gQ3JlYXRlIFNWRyBjb250YWluZXJcbiAgICAgIGNvbnN0IHN2ZyA9IGQzLnNlbGVjdChzdmdSZWYuY3VycmVudClcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIFwiXCIpXG4gICAgICAgIC5zdHlsZShcImJvcmRlci1yYWRpdXNcIiwgXCI4cHhcIik7XG5cbiAgICAgIC8vIFggQXhpc1xuICAgICAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCAtIG1hcmdpbi5ib3R0b219KWApXG4gICAgICAgIC5jYWxsKFxuICAgICAgICAgIGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICAgICAgICAgICAgLnRpY2tWYWx1ZXMoZGF0YS5tYXAoKGQpID0+IGQueWVhcikuZmlsdGVyKCh5ZWFyKSA9PiB5ZWFyICUgMTAgPT09IDApKSAvLyBGaWx0ZXIgeWVhcnMgZGl2aXNpYmxlIGJ5IDEwXG4gICAgICAgICAgICAudGlja0Zvcm1hdChkMy5mb3JtYXQoXCJkXCIpKSAvLyBGb3JtYXQgdGhlIHllYXIgYXMgYSBudW1iZXJcbiAgICAgICAgKVxuICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxNXB4XCIpXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZTBlMGUwXCIpO1xuXG4gICAgICAvLyBZIEF4aXNcbiAgICAgIHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sIDApYClcbiAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeVNjYWxlKS50aWNrcyg1KS50aWNrRm9ybWF0KChkKSA9PiBgJHtkIC8gMTAwMH1CYCkpXG4gICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjE1cHhcIilcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiNlMGUwZTBcIik7XG5cbiAgICAgIC8vIEJhcnMgd2l0aCBndW4gaWNvbnNcbiAgICAgIGRhdGEuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBiYXJHcm91cCA9IHN2Z1xuICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3hTY2FsZShkLnllYXIpfSwgJHtoZWlnaHQgLSBtYXJnaW4uYm90dG9tfSlgKTtcblxuICAgICAgICBjb25zdCBpY29uc0NvdW50ID0gTWF0aC5mbG9vcihkLmV4cG9ydCAvIGljb25WYWx1ZSk7IC8vIEZ1bGwgaWNvbnNcbiAgICAgICAgY29uc3QgcGFydGlhbEljb25WYWx1ZSA9IChkLmV4cG9ydCAlIGljb25WYWx1ZSkgLyBpY29uVmFsdWU7IC8vIEZyYWN0aW9uYWwgcGFydCBmb3IgY2hvcHBlZCBndW5cbiAgICAgICAgY29uc3QgaWNvblNwYWNpbmcgPSAxMDsgLy8gU3BhY2UgYmV0d2VlbiBpY29uc1xuICAgICAgICBjb25zdCBpY29uU2l6ZSA9IDM0LjU7IC8vIEljb24gc2l6ZSAod2lkdGggYW5kIGhlaWdodClcblxuICAgICAgICAvLyBTZXF1ZW50aWFsIGFuaW1hdGlvbiBkZWxheSBmb3IgZWFjaCB5ZWFyXG4gICAgICAgIGNvbnN0IHllYXJEZWxheSA9IGkgKiA0MDtcblxuICAgICAgICAvLyBBcHBlbmQgZnVsbCBpY29uc1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGljb25zQ291bnQ7IGorKykge1xuICAgICAgICAgIGJhckdyb3VwXG4gICAgICAgICAgICAuYXBwZW5kKFwiaW1hZ2VcIilcbiAgICAgICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLCBpY29uUGF0aClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgaWNvblNpemUpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBpY29uU2l6ZSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCB4U2NhbGUuYmFuZHdpZHRoKCkgLyAyIC0gaWNvblNpemUgLyAyKSAvLyBDZW50ZXIgaWNvbiB3aXRoaW4gdGhlIGJhclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApIC8vIFN0YXJ0IGljb24gZnJvbSB0aGUgdG9wXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWx0ZXJcIiwgXCJpbnZlcnQoMTAwJSlcIilcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgIC5kZWxheSh5ZWFyRGVsYXkgKyBqICogMjApIC8vIFNlcXVlbnRpYWxseSBkcm9wIGVhY2ggaWNvblxuICAgICAgICAgICAgLmR1cmF0aW9uKDUwKVxuICAgICAgICAgICAgLmVhc2UoZDMuZWFzZUJvdW5jZSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAtKGogKiAoaWNvblNpemUgKyBpY29uU3BhY2luZykpIC0gaWNvblNpemUpIC8vIEFkanVzdCBzcGFjaW5nXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIGNob3BwZWQgaWNvbiBmb3IgcGFydGlhbCB2YWx1ZVxuICAgICAgICBpZiAocGFydGlhbEljb25WYWx1ZSA+IDAuMykge1xuICAgICAgICAgIGNvbnN0IHBhcnRpYWxDbGlwUGF0aElkID0gYGNsaXAtJHtpfWA7XG5cbiAgICAgICAgICAvLyBEZWZpbmUgYSBjbGlwcGluZyBwYXRoIGZvciB0aGUgY2hvcHBlZCBpY29uLCBjcm9wIGZyb20gdGhlIGJvdHRvbVxuICAgICAgICAgIHN2Z1xuICAgICAgICAgICAgLmFwcGVuZChcImNsaXBQYXRoXCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIHBhcnRpYWxDbGlwUGF0aElkKVxuICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgaWNvblNpemUpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBpY29uU2l6ZSAqIHBhcnRpYWxJY29uVmFsdWUpIC8vIENsaXAgaGVpZ2h0IGJhc2VkIG9uIHRoZSBmcmFjdGlvblxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHhTY2FsZS5iYW5kd2lkdGgoKSAvIDIgLSBpY29uU2l6ZSAvIDIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgLShpY29uc0NvdW50ICogKGljb25TaXplICsgaWNvblNwYWNpbmcpKSAtIGljb25TaXplICogcGFydGlhbEljb25WYWx1ZSk7IC8vIEFkanVzdCB5IHRvIGNyb3AgZnJvbSB0aGUgYm90dG9tXG5cbiAgICAgICAgICAvLyBBcHBlbmQgdGhlIGNob3BwZWQgaWNvbiB3aXRoIGNsaXBwaW5nXG4gICAgICAgICAgYmFyR3JvdXBcbiAgICAgICAgICAgIC5hcHBlbmQoXCJpbWFnZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4bGluazpocmVmXCIsIGljb25QYXRoKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBpY29uU2l6ZSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGljb25TaXplKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGlwLXBhdGhcIiwgYHVybCgjJHtwYXJ0aWFsQ2xpcFBhdGhJZH0pYClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCB4U2NhbGUuYmFuZHdpZHRoKCkgLyAyIC0gaWNvblNpemUgLyAyKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIC0oaWNvbnNDb3VudCAqIChpY29uU2l6ZSArIGljb25TcGFjaW5nKSkgLSBpY29uU2l6ZSkgLy8gQWRqdXN0IHBvc2l0aW9uIHRvIG1hdGNoIGNsaXAgcGF0aFxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsdGVyXCIsIFwiaW52ZXJ0KDEwMCUpXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAuZGVsYXkoeWVhckRlbGF5ICsgaWNvbnNDb3VudCAqIDIwKSAvLyBBZGQgZGVsYXkgYWZ0ZXIgdGhlIGZ1bGwgaWNvbnNcbiAgICAgICAgICAgIC5kdXJhdGlvbig1MClcbiAgICAgICAgICAgIC5lYXNlKGQzLmVhc2VCb3VuY2UpXG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gQWRkIGxlZ2VuZFxuICAgICAgc3ZnXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt3aWR0aCAtIG1hcmdpbi5yaWdodCAtIDEyMH0sICR7bWFyZ2luLnRvcH0pYCkgLy8gUG9zaXRpb24gb2YgdGhlIGxlZ2VuZFxuICAgICAgICAuY2FsbCgoZykgPT4ge1xuICAgICAgICAgIGcuYXBwZW5kKFwiaW1hZ2VcIilcbiAgICAgICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLCBpY29uUGF0aClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgMzQuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDUwKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbHRlclwiLCBcImludmVydCgxMDAlKVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoOTApXCIpOyAvLyBSb3RhdGUgOTAgZGVncmVlcyBjbG9ja3dpc2VcblxuICAgICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDE2KSAvLyBQb3NpdGlvbiB0ZXh0IG5leHQgdG8gdGhlIGljb25cbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCAxNilcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIwLjM1ZW1cIilcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjE2cHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZTBlMGUwXCIpXG4gICAgICAgICAgICAudGV4dChcIiA9ICQgMi41QlwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ3JlbGF0aXZlJywgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLCBwYWRkaW5nOiAnNDBweCcgfX0+XG4gICAgICA8aDNcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGZvbnRTaXplOiAnMjRweCcsXG4gICAgICAgICAgY29sb3I6ICcjZTc0YzNjJyxcbiAgICAgICAgICBwYWRkaW5nQm90dG9tOiAnMjBweCcsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIFVTIEFybXMgRXhwb3J0cyBCeSBZZWFyXG4gICAgICA8L2gzPlxuICAgICAgPHN2ZyByZWY9e3N2Z1JlZn0gc3R5bGU9e3sgYm9yZGVyOiAnM3B4IHNvbGlkICNlNzRjM2MnLCBib3JkZXJSYWRpdXM6ICc4cHgnIH19Pjwvc3ZnPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR3VuQmFyQ2hhcnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRGVmZW5zZUV4cGVuZGl0dXJlTWFwIGZyb20gJy4vZ3JhcGhzLzAwMV9EZWZlbnNlRXhwZW5kaXR1cmVNYXAnO1xuaW1wb3J0IEd1bkJhckNoYXJ0IGZyb20gJy4vZ3JhcGhzLzAwMV9hbmltYXRlZEV4cG9ydEJhckNoYXJ0JztcblxuY29uc3QgaW50cm8gPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gaWQ9XCIwMDFcIj5cbiAgICAgIDxwIGNsYXNzTmFtZT1cImN1c3RvbS10aXRsZVwiIHN0eWxlPXt7Y3NzVGV4dDogJ21hcmdpbi10b3A6IDAnfX0+XG4gICAgICAgICAgSW50cm9kdWN0aW9uXG4gICAgICA8L3A+XG5cbiAgICAgIDxwIGNsYXNzTmFtZT1cImN1c3RvbS1wYXJhZ3JhcGhcIj5cbiAgICAgICAgICBUaGUgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjNDY4MkI0JyB9fT5Vbml0ZWQgU3RhdGVzPC9zcGFuPiBoYXMgc3RyYXRlZ2ljYWxseSBsZXZlcmFnZWQgYXJtcyBleHBvcnRzIGFzIGEgdG9vbCB0byBzdHJlbmd0aGVuIGFsbGlhbmNlcywgZGV0ZXIgYWR2ZXJzYXJpZXMsIGFuZCBhZHZhbmNlIGl0cyBnZW9wb2xpdGljYWwgZ29hbHMuIFxuICAgICAgICAgIFNwYW5uaW5nIGRlY2FkZXMsIFUuUy4gYXJtcyBleHBvcnRzIHN1cmdlZCBkdXJpbmcga2V5IG1vbWVudHMgc3VjaCBhcyB0aGUgPGVtIHN0eWxlPXt7IGNvbG9yOiAnb3JhbmdlJyB9fT5Db2xkIFdhcjwvZW0+LCB0aGUgPGVtIHN0eWxlPXt7IGNvbG9yOiAnb3JhbmdlJyB9fT5XYXIgb24gVGVycm9yPC9lbT4sIGFuZCByZWNlbnQgY29uZmxpY3RzIGxpa2UgdGhlIDxlbSBzdHlsZT17eyBjb2xvcjogJ29yYW5nZScgfX0+UnVzc2lhLVVrcmFpbmUgV2FyPC9lbT4sIHNoYXBpbmcgZ2xvYmFsIHBvd2VyIGR5bmFtaWNzLiBcbiAgICAgICAgICBUaGUgY2hhcnQgYmVsb3csIGlsbHVzdHJhdGluZyBVLlMuIGFybXMgZXhwb3J0cyBpbiBiaWxsaW9ucywgZGVtb25zdHJhdGVzIGhvdyB0aGVzZSB0cmFkZXMgYWxpZ24gd2l0aCBtYWpvciBnZW9wb2xpdGljYWwgZXZlbnRzLCByZWZsZWN0aW5nIHRoZWlyIHJvbGUgYXMgYW4gaW50ZWdyYWwgcGFydCBvZiBicm9hZGVyIDxlbSBzdHlsZT17eyBjb2xvcjogJ29yYW5nZScgfX0+Z2VvcG9saXRpY2FsIHN0cmF0ZWd5PC9lbT4uIFxuICAgICAgICAgIE1vcmUgdGhhbiBlY29ub21pYyB0cmFuc2FjdGlvbnMsIGFybXMgZXhwb3J0cyBmdW5jdGlvbiBhcyBleHRlbnNpb25zIG9mIGRpcGxvbWFjeSB3aXRoaW4gdGhlIDxlbSBzdHlsZT17eyBjb2xvcjogJ29yYW5nZScgfX0+RGlwbG9tYXRpYywgSW5mb3JtYXRpb25hbCwgTWlsaXRhcnksIGFuZCBFY29ub21pYyAoRElNRSk8L2VtPiBmcmFtZXdvcmsgdG8gcHJvbW90ZSBzdGFiaWxpdHksIGNvdW50ZXIgYWR2ZXJzYXJpZXMsIGFuZCBzZXJ2ZSBuYXRpb25hbCBpbnRlcmVzdHMuXG4gICAgICA8L3A+XG5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaGFydC1jb250YWluZXJcIiBzdHlsZT17e3dpZHRoOiAnODAlJ319PlxuICAgICAgICA8R3VuQmFyQ2hhcnQgLz5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8cCBjbGFzc05hbWU9XCJjdXN0b20tdGl0bGVcIj5cbiAgICAgICAgICBJbGx1c3RyYXRpdmUgQ2FzZTogVGhlIEluZG8tUGFjaWZpYyBhcyBhIE5ldyBHZW9wb2xpdGljYWwgQ2VudGVyIG9mIEdyYXZpdHlcbiAgICAgIDwvcD5cbiAgICAgIFxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXBhcmFncmFwaFwiPlxuICAgICAgICAgIEFzIHlvdSBzbGlkZSB0aHJvdWdoIHRoZSB5ZWFyIHNlbGVjdG9yLCBpdCBiZWNvbWVzIGNsZWFyIHRoYXQgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRkZEQjU4JyB9fT5DaGluYSA8L3NwYW4+IFxuICAgICAgICAgIGhhcyBzdGVhZGlseSBpbmNyZWFzZWQgaXRzIGRlZmVuc2UgYnVkZ2V0IHNpbmNlIHRoZSBsYXRlIDE5OTBzIGFuZCBlYXJseSAyMDAwcywgc3VycGFzc2luZyA8c3BhbiBzdHlsZT17eyBjb2xvcjogJyNEQzE0M0MnIH19PlJ1c3NpYSA8L3NwYW4+IFxuICAgICAgICAgIGFuZCBzaWduYWxpbmcgaXRzIGFtYml0aW9ucyBmb3IgbWlsaXRhcnkgbW9kZXJuaXphdGlvbiBhbmQgZXhwYW5kZWQgaW5mbHVlbmNlLCBwYXJ0aWN1bGFybHkgaW4gdGhlIEluZG8tUGFjaWZpYyByZWdpb24uIFxuICAgICAgICAgIEluIHJlc3BvbnNlLCBJbmRvLVBhY2lmaWMgbmF0aW9ucyBoYXZlIGFsc28gc2lnbmlmaWNhbnRseSBpbmNyZWFzZWQgdGhlaXIgZGVmZW5zZSBzcGVuZGluZywgYm9sc3RlcmluZyBtaWxpdGFyeSBjYXBhYmlsaXRpZXMgdG8gYWRkcmVzcyByZWdpb25hbCBzZWN1cml0eSBjb25jZXJucyBhbmQgY291bnRlcmJhbGFuY2UgXG4gICAgICAgICAgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRkZEQjU4JyB9fT4gQ2hpbmEncyA8L3NwYW4+IGdyb3dpbmcgcHJlc2VuY2UuXG4gICAgICA8L3A+IFxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoYXJ0LWNvbnRhaW5lclwiIHN0eWxlPXt7d2lkdGg6ICc4MCUnfX0+XG4gICAgICAgIDxEZWZlbnNlRXhwZW5kaXR1cmVNYXAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW50cm87XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImQzIiwidG9wb2pzb24iLCJjb3VudHJpZXNKc29uUGF0aCIsImNvbmNhdCIsInByb2Nlc3MiLCJlbnYiLCJQVUJMSUNfVVJMIiwiZGVmZW5zZURhdGFQYXRoIiwiRGVmZW5zZUV4cGVuZGl0dXJlTWFwIiwic3ZnUmVmIiwibGluZUNoYXJ0UmVmIiwiX3VzZVN0YXRlIiwidmlzaWJsZSIsIngiLCJ5IiwiY29udGVudCIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsInRvb2x0aXAiLCJzZXRUb29sdGlwIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJsaW5lVG9vbHRpcCIsInNldExpbmVUb29sdGlwIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJjb3VudHJ5RGF0YSIsInNldENvdW50cnlEYXRhIiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJjb3VudHJpZXMiLCJzZXRDb3VudHJpZXMiLCJfdXNlU3RhdGU5IiwiX3VzZVN0YXRlMTAiLCJzZWxlY3RlZFllYXIiLCJzZXRTZWxlY3RlZFllYXIiLCJfdXNlU3RhdGUxMSIsIl91c2VTdGF0ZTEyIiwibG9hZGluZyIsInNldExvYWRpbmciLCJfdXNlU3RhdGUxMyIsInVuZGVmaW5lZCIsIl91c2VTdGF0ZTE0IiwiZXJyb3IiLCJzZXRFcnJvciIsIm1pblllYXIiLCJtYXhZZWFyIiwidGFyZ2V0Q291bnRyaWVzIiwiY291bnRyeU5hbWVNYXBwaW5nIiwicGFyc2VWYWx1ZSIsInZhbHVlIiwicGFyc2VGbG9hdCIsInJlcGxhY2UiLCJQcm9taXNlIiwiYWxsIiwianNvbiIsImNzdiIsImQiLCJwYXJzZWREYXRhIiwiQ291bnRyeSIsInllYXIiLCJ0aGVuIiwiX3JlZiIsIl9yZWYyIiwid29ybGREYXRhIiwiZGVmZW5zZURhdGEiLCJjb3VudHJpZXNEYXRhIiwiZmVhdHVyZSIsIm9iamVjdHMiLCJmZWF0dXJlcyIsInByb2Nlc3NlZERhdGEiLCJmb3JFYWNoIiwicm93IiwiY291bnRyeU5hbWUiLCJjb25zb2xlIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsIndpZHRoIiwiaGVpZ2h0Iiwic3ZnIiwic2VsZWN0IiwiY3VycmVudCIsImF0dHIiLCJzdHlsZSIsInByb2plY3Rpb24iLCJnZW9NZXJjYXRvciIsImNlbnRlciIsInNjYWxlIiwidHJhbnNsYXRlIiwicGF0aCIsImdlb1BhdGgiLCJ0aHJlc2hvbGRzIiwiY29sb3JzIiwiY29sb3JTY2FsZSIsInNjYWxlVGhyZXNob2xkIiwiZG9tYWluIiwicmFuZ2UiLCJzZWxlY3RBbGwiLCJyZW1vdmUiLCJnIiwiYXBwZW5kIiwiY2FsbCIsInpvb20iLCJzY2FsZUV4dGVudCIsIm9uIiwiZXZlbnQiLCJ0cmFuc2Zvcm0iLCJkYXRhIiwiZW50ZXIiLCJfY291bnRyeURhdGEkY291bnRyeSIsImNvdW50cnkiLCJwcm9wZXJ0aWVzIiwibmFtZSIsIl9jb3VudHJ5RGF0YSRjb3VudHJ5MiIsImNsaWVudFgiLCJjbGllbnRZIiwidG9GaXhlZCIsInByZXYiLCJfb2JqZWN0U3ByZWFkIiwibGVnZW5kWCIsImxlZ2VuZFkiLCJsZWdlbmRHcm91cCIsImxvd2VyIiwidGV4dCIsInNsaWNlIiwicmV2ZXJzZSIsInRocmVzaG9sZCIsImkiLCJjcmVhdGVFbGVtZW50IiwicG9zaXRpb24iLCJpY29uUGF0aCIsImFybXNFeHBvcnREYXRhUGF0aCIsImljb25WYWx1ZSIsIkd1bkJhckNoYXJ0IiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiYXV0b1R5cGUiLCJzb3J0IiwiYSIsImIiLCJ4U2NhbGUiLCJzY2FsZUJhbmQiLCJtYXAiLCJwYWRkaW5nIiwieVNjYWxlIiwic2NhbGVMaW5lYXIiLCJuaWNlIiwiYXhpc0JvdHRvbSIsInRpY2tWYWx1ZXMiLCJmaWx0ZXIiLCJ0aWNrRm9ybWF0IiwiZm9ybWF0IiwiYXhpc0xlZnQiLCJ0aWNrcyIsImJhckdyb3VwIiwiaWNvbnNDb3VudCIsIk1hdGgiLCJmbG9vciIsInBhcnRpYWxJY29uVmFsdWUiLCJpY29uU3BhY2luZyIsImljb25TaXplIiwieWVhckRlbGF5IiwiaiIsImJhbmR3aWR0aCIsInRyYW5zaXRpb24iLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzZSIsImVhc2VCb3VuY2UiLCJwYXJ0aWFsQ2xpcFBhdGhJZCIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwidGV4dEFsaWduIiwiZm9udFNpemUiLCJjb2xvciIsInBhZGRpbmdCb3R0b20iLCJyZWYiLCJib3JkZXIiLCJib3JkZXJSYWRpdXMiLCJpbnRybyIsImlkIiwiY2xhc3NOYW1lIiwiY3NzVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6640\n')},1796:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ feature)\n});\n\n// UNUSED EXPORTS: object\n\n;// ./node_modules/topojson-client/src/reverse.js\n/* harmony default export */ function reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\n;// ./node_modules/topojson-client/src/identity.js\n/* harmony default export */ function identity(x) {\n  return x;\n}\n\n;// ./node_modules/topojson-client/src/transform.js\n\n\n/* harmony default export */ function transform(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n\n;// ./node_modules/topojson-client/src/feature.js\n\n\n\n/* harmony default export */ function feature(topology, o) {\n  if (typeof o === "string") o = topology.objects[o];\n  return o.type === "GeometryCollection"\n      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature_feature(topology, o); })}\n      : feature_feature(topology, o);\n}\n\nfunction feature_feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}\n      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}\n      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};\n      case "Point": coordinates = point(o.coordinates); break;\n      case "MultiPoint": coordinates = o.coordinates.map(point); break;\n      case "LineString": coordinates = line(o.arcs); break;\n      case "MultiLineString": coordinates = o.arcs.map(line); break;\n      case "Polygon": coordinates = polygon(o.arcs); break;\n      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2QkFBZSxpQkFBUztBQUN4QjtBQUNBO0FBQ0E7OztBQ0hBLDZCQUFlLGtCQUFTO0FBQ3hCO0FBQ0E7OztBQ0ZxQzs7QUFFckMsNkJBQWUsbUJBQVM7QUFDeEIsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQm1DO0FBQ0k7O0FBRXZDLDZCQUFlLGlCQUFTO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLG9FQUFvRSxPQUFPLGVBQU8sZ0JBQWdCO0FBQzNHLFFBQVEsZUFBTztBQUNmOztBQUVBLFNBQVMsZUFBTztBQUNoQjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7O0FBRU87QUFDUCx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDLG1EQUFtRDtBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdEQUF3RDtBQUN4RCxpRUFBaUU7QUFDakUscURBQXFEO0FBQ3JELDhEQUE4RDtBQUM5RCxxREFBcUQ7QUFDckQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9yZXZlcnNlLmpzPzYwYTciLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzPzM5OTUiLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcz83ZmQ0Iiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9mZWF0dXJlLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1796\n')}}]);