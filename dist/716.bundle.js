"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[716],{5716:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _002_competition)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 272 modules\nvar src = __webpack_require__(1445);\n// EXTERNAL MODULE: ./node_modules/react-range-slider-input/dist/index.js\nvar dist = __webpack_require__(2136);\n// EXTERNAL MODULE: ./node_modules/react-range-slider-input/dist/style.css\nvar style = __webpack_require__(4579);\n;// ./src/components/graphs/002_ImportExportLinechart.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\nvar ImportExportLinechart = function ImportExportLinechart() {\n  var svgRef = (0,react.useRef)();\n  var width = 800;\n  var height = 400;\n  var margin = {\n    top: 60,\n    right: 100,\n    bottom: 30,\n    left: 60\n  };\n  var _useState = (0,react.useState)([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = (0,react.useState)([\'India\', \'China\']),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedCountries = _useState4[0],\n    setSelectedCountries = _useState4[1];\n  var _useState5 = (0,react.useState)([1950, 2023]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    yearRange = _useState6[0],\n    setYearRange = _useState6[1];\n  var _useState7 = (0,react.useState)(\'export\'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    tradeType = _useState8[0],\n    setTradeType = _useState8[1];\n  var _useState9 = (0,react.useState)(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n\n  // Set URLs for arms trade data\n  var armsSuppliersDataUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_arms_suppliers.csv");\n  var armsRecipientsDataUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_arms_recipients.csv");\n  (0,react.useEffect)(function () {\n    var dataUrl = tradeType === \'import\' ? armsRecipientsDataUrl : armsSuppliersDataUrl;\n    var countryKey = tradeType === \'import\' ? \'Recipient\' : \'supplier\';\n    setLoading(true);\n    src/* csv */.fu7(dataUrl).then(function (rawData) {\n      var yearColumns = Object.keys(rawData[0]).filter(function (col) {\n        return !isNaN(col);\n      });\n      var countryTotals = rawData.map(function (row) {\n        return {\n          country: row[countryKey],\n          total: yearColumns.reduce(function (sum, year) {\n            return sum + (+row[year] || 0);\n          }, 0)\n        };\n      });\n      var top10Countries = countryTotals.sort(function (a, b) {\n        return b.total - a.total;\n      }).slice(0, 10).map(function (d) {\n        return d.country;\n      });\n      var processedData = rawData.filter(function (row) {\n        return top10Countries.includes(row[countryKey]);\n      }).map(function (row) {\n        return {\n          country: row[countryKey],\n          values: yearColumns.map(function (year) {\n            return {\n              year: +year,\n              value: (+row[year] || 0) / 1000\n            };\n          })\n        };\n      });\n      setData(processedData);\n\n      // Set selectedCountries based on tradeType\n      if (tradeType === \'export\') {\n        setSelectedCountries([\'United States\', \'China\', \'Russia\'].filter(function (c) {\n          return top10Countries.includes(c);\n        }));\n      } else if (tradeType === \'import\') {\n        setSelectedCountries([\'China\', \'India\'].filter(function (c) {\n          return top10Countries.includes(c);\n        }));\n      }\n      setLoading(false);\n    })["catch"](function (error) {\n      console.error("Error loading or processing data:", error);\n      setLoading(false);\n    });\n  }, [tradeType]);\n  (0,react.useEffect)(function () {\n    if (data.length === 0) return;\n    var svg = src/* select */.Ltv(svgRef.current).attr("viewBox", "0 0 ".concat(width, " ").concat(height)).style("border-radius", "8px");\n    svg.selectAll(\'*\').remove();\n\n    // Title\n    svg.append("text").attr("x", width / 2).attr("y", 20).attr("text-anchor", "middle").style("font-size", "20px").style("font-weight", "bold").style("fill", "#e0e0e0").text("Arms ".concat(tradeType === \'import\' ? \'Imports\' : \'Exports\', " by Country"));\n\n    // Y-axis Label\n    svg.append("text").attr("transform", "rotate(-90)").attr("x", -height / 2).attr("y", 0).attr("dy", "1em").style("text-anchor", "middle").style("font-size", "16px").style("fill", "#e0e0e0").style("font-weight", "bold").text("Value (Billion USD)");\n\n    // Tooltip and vertical line\n    var tooltip = src/* select */.Ltv("body").append("div").attr("class", "tooltip").style("position", "absolute").style("padding", "12px").style("background", "rgba(0, 0, 0, 0.8)").style("color", "#e0e0e0").style("border-radius", "8px").style("font-size", "16px").style("display", "none");\n    var verticalLine = svg.append("line").attr("y1", margin.top).attr("y2", height - margin.bottom).attr("stroke", "#aaa").attr("stroke-width", 1).attr("stroke-dasharray", "4 4").style("display", "none");\n\n    // Filter data based on selected countries and year range\n    var filteredData = data.filter(function (d) {\n      return selectedCountries.includes(d.country);\n    }).map(function (d) {\n      return _objectSpread(_objectSpread({}, d), {}, {\n        values: d.values.filter(function (v) {\n          return v.year >= yearRange[0] && v.year <= yearRange[1];\n        })\n      });\n    });\n\n    // Define scales\n    var xScale = src/* scaleLinear */.m4Y().domain(yearRange).range([margin.left, width - margin.right - 20]);\n    var yMax = src/* max */.T9B(filteredData, function (d) {\n      return src/* max */.T9B(d.values, function (v) {\n        return v.value;\n      });\n    }) || 0;\n    var yScale = src/* scaleLinear */.m4Y().domain([0, yMax]).range([height - margin.bottom, margin.top]);\n    var color = src/* scaleOrdinal */.UMr(src/* schemeCategory10 */.t55).domain(selectedCountries);\n    var line = src/* line */.n8j().x(function (d) {\n      return xScale(d.year);\n    }).y(function (d) {\n      return yScale(d.value);\n    });\n\n    // X and Y Axes\n    svg.append("g").attr("transform", "translate(0, ".concat(height - margin.bottom, ")")).call(src/* axisBottom */.l78(xScale).tickFormat(src/* format */.GPZ("d"))).style("font-size", "15px").style("fill", "#e0e0e0");\n    svg.append("g").attr("transform", "translate(".concat(margin.left, ", 0)")).call(src/* axisLeft */.V4s(yScale).tickFormat(function (d) {\n      return "".concat(d, "B");\n    })).style("font-size", "15px").style("fill", "#e0e0e0");\n\n    // Draw lines\n    svg.selectAll(".line").data(filteredData).join("path").attr("class", "line").attr("fill", "none").attr("stroke", function (d) {\n      if (d.country === \'United States\') return \'#4682B4\'; // Color for United States\n      if (d.country === \'China\') return \'#FFDB58\'; // Color for China\n      if (d.country === \'Russia\') return \'#DC143C\'; // Color for Russia\n      return color(d.country); // Default color scale for other countries\n    }).attr("stroke-width", 3.25).attr("d", function (d) {\n      return line(d.values);\n    });\n\n    // Draw dots\n    svg.selectAll(".dot").data(filteredData.flatMap(function (d) {\n      return d.values.map(function (v) {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          country: d.country\n        });\n      });\n    })).join("circle").attr("class", "dot").attr("cx", function (d) {\n      return xScale(d.year);\n    }).attr("cy", function (d) {\n      return yScale(d.value);\n    }).attr("r", 5.5).attr("fill", function (d) {\n      if (d.country === \'United States\') return \'#4682B4\'; // Color for United States\n      if (d.country === \'China\') return \'#FFDB58\'; // Color for China\n      if (d.country === \'Russia\') return \'#DC143C\'; // Color for Russia\n      return color(d.country); // Default color scale for other countries\n    }).on("mouseover", function (event, d) {\n      verticalLine.style("display", "block");\n      tooltip.style("display", "block");\n    }).on("mousemove", function (event) {\n      var mouseX = event.pageX - svg.node().getBoundingClientRect().left;\n      verticalLine.attr("x1", mouseX).attr("x2", mouseX);\n      var closestYear = Math.round(xScale.invert(mouseX));\n      var tooltipData = filteredData.map(function (countryData) {\n        // Find the closest data point in time for each country\n        var closestPoint = countryData.values.reduce(function (prev, curr) {\n          return Math.abs(curr.year - closestYear) < Math.abs(prev.year - closestYear) ? curr : prev;\n        });\n        return "<strong>".concat(countryData.country, "</strong><br/>$").concat(closestPoint.value.toFixed(2), "B");\n      }).join("<br/><br/>");\n\n      // Combine the year with each country’s data\n      var finalTooltipData = "<strong>".concat(closestYear, "</strong><br/><br/>").concat(tooltipData);\n      tooltip.html(finalTooltipData).style("left", "".concat(event.pageX + 10, "px")).style("top", "".concat(event.pageY - 20, "px"));\n    }).on("mouseout", function () {\n      verticalLine.style("display", "none");\n      tooltip.style("display", "none");\n    });\n\n    // Country labels\n    svg.selectAll(".country-label").data(filteredData).join("text").attr("class", "country-label").attr("x", width - margin.right - 15) // Position to the right of the line\n    .attr("y", function (d) {\n      return yScale(d.values[d.values.length - 1].value);\n    }).attr("dy", "0.35em").attr("text-anchor", "start").text(function (d) {\n      return d.country;\n    }).style("fill", function (d) {\n      if (d.country === \'United States\') return \'#4682B4\'; // Color for United States\n      if (d.country === \'China\') return \'#FFDB58\'; // Color for China\n      if (d.country === \'Russia\') return \'#DC143C\'; // Color for Russia\n      return color(d.country); // Default color scale for other countries\n    }).style("font-size", "16px");\n\n    // Cleanup on unmount\n    return function () {\n      tooltip.remove();\n      verticalLine.remove();\n    };\n  }, [data, selectedCountries, yearRange, tradeType]);\n  var handleCountryToggle = function handleCountryToggle(country) {\n    setSelectedCountries(function (prev) {\n      return prev.includes(country) ? prev.filter(function (c) {\n        return c !== country;\n      }) : [].concat(_toConsumableArray(prev), [country]);\n    });\n  };\n  var handleTradeTypeChange = function handleTradeTypeChange(event) {\n    var newTradeType = event.target.value;\n    setTradeType(newTradeType);\n    if (newTradeType === \'export\') {\n      setSelectedCountries([\'United States\', \'China\', \'Russia\']);\n    } else if (newTradeType === \'import\') {\n      setSelectedCountries([\'China\', \'India\']);\n    }\n  };\n  var resetSelections = function resetSelections() {\n    setTradeType(\'export\');\n    setYearRange([1950, 2023]);\n    setSelectedCountries([\'United States\', \'China\', \'Russia\']);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'flex\',\n      alignItems: \'flex-start\',\n      padding: \'20px\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    style: {\n      flex: \'1\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    width: width,\n    height: height\n  })), /*#__PURE__*/react.createElement("div", {\n    style: {\n      marginLeft: \'20px\',\n      width: \'250px\',\n      display: \'flex\',\n      flexDirection: \'column\',\n      color: \'#e6e6e6\'\n    }\n  }, /*#__PURE__*/react.createElement("p", {\n    style: {\n      fontWeight: \'bold\',\n      fontSize: \'16px\'\n    }\n  }, "Trade Type"), /*#__PURE__*/react.createElement("select", {\n    name: "typeSelector",\n    value: tradeType,\n    onChange: handleTradeTypeChange,\n    style: {\n      backgroundColor: \'#444444\',\n      color: \'#e0e0e0\',\n      margin: \'10px 0\',\n      padding: \'5px\',\n      border: \'2px solid #e0e0e0\',\n      borderRadius: \'4px\'\n    }\n  }, /*#__PURE__*/react.createElement("option", {\n    value: "import"\n  }, "Imports"), /*#__PURE__*/react.createElement("option", {\n    value: "export"\n  }, "Exports")), /*#__PURE__*/react.createElement("button", {\n    onClick: resetSelections,\n    style: {\n      backgroundColor: \'#e74c3c\',\n      color: \'#e0e0e0\',\n      padding: \'8px 12px\',\n      border: \'none\',\n      borderRadius: \'4px\',\n      cursor: \'pointer\',\n      fontSize: \'14px\',\n      fontWeight: \'bold\',\n      marginTop: \'10px\'\n    }\n  }, "Reset Selections"), /*#__PURE__*/react.createElement("div", {\n    style: {\n      marginTop: \'20px\'\n    }\n  }, /*#__PURE__*/react.createElement(dist/* default */.A, {\n    min: 1950,\n    max: 2023,\n    defaultValue: yearRange,\n    value: yearRange,\n    onInput: function onInput(values) {\n      return setYearRange(values);\n    },\n    className: "custom-range-slider",\n    style: {\n      width: \'100%\',\n      margin: \'10px 0\'\n    }\n  }), /*#__PURE__*/react.createElement("style", null, "\\n              .custom-range-slider .range-slider__track,\\n              .custom-range-slider .range-slider__thumb,\\n              .custom-range-slider .range-slider__range {\\n                background-color: #e74c3c; /* Sets the color to red */\\n              }\\n              \\n              /* Thumb specific style */\\n              .custom-range-slider .range-slider__thumb {\\n                border-color: #e74c3c;\\n              }\\n              \\n              /* Track specific style */\\n              .custom-range-slider .range-slider__track {\\n                background-color: #e74c3c;\\n              }\\n            "), /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'flex\',\n      justifyContent: \'space-between\',\n      color: \'#e74c3c\',\n      fontSize: \'14px\',\n      marginTop: \'10px\'\n    }\n  }, /*#__PURE__*/react.createElement("span", null, yearRange[0]), /*#__PURE__*/react.createElement("span", null, yearRange[1]))), /*#__PURE__*/react.createElement("p", {\n    style: {\n      fontWeight: \'bold\',\n      fontSize: \'16px\',\n      marginTop: \'20px\',\n      color: \'#e0e0e0\'\n    }\n  }, "Select Countries"), /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'grid\',\n      gridTemplateColumns: \'repeat(2, auto)\',\n      gap: \'10px\',\n      marginTop: \'10px\'\n    }\n  }, data.map(function (d) {\n    return /*#__PURE__*/react.createElement("div", {\n      key: d.country,\n      style: {\n        display: \'flex\',\n        alignItems: \'center\',\n        color: \'#e0e0e0\'\n      }\n    }, /*#__PURE__*/react.createElement("input", {\n      type: "checkbox",\n      name: "countryCheckbox",\n      value: d.country,\n      checked: selectedCountries.includes(d.country),\n      onChange: function onChange() {\n        return handleCountryToggle(d.country);\n      },\n      style: {\n        marginRight: \'5px\'\n      }\n    }), /*#__PURE__*/react.createElement("p", null, d.country));\n  }))));\n};\n/* harmony default export */ const _002_ImportExportLinechart = (ImportExportLinechart);\n;// ./src/components/002_competition.js\n\n\nvar competition = function competition() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "002"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Competition in Strategic Regions"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The global arms trade has shifted from a US-Soviet rivalry to a multipolar competition, with ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " joining the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " as key players. Each nation\\u2019s influence is shaped by historical events, alliances, and economic factors, impacting global security dynamics.", /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "Cold War Era (1947-1991)"), " The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Soviet Union"), " dominated arms exports, each supporting allies to extend ideological influence."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "Post-Cold War Shift (1991-2000)"), " With the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Soviet Union\\u2019s"), " collapse, the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " emerged as the top arms exporter, backed by a strong economy and stable alliances."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "Russia\\u2019s Resurgence (Early 2000s)"), " Under Putin, ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " rebuilt its defense industry, regaining clients with affordable options like the S-400."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "China\\u2019s Rise (2000s-Present)"), " ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " entered the market, offering affordable alternatives to Western and Russian arms, appealing to regions like Africa and Southeast Asia. The Belt and Road initiative and a non-interference policy further bolstered ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China\\u2019s"), " appeal."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "China Surpasses Russia (2022)"), " In 2022, ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " became the second-largest arms exporter as ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " faced challenges due to the Ukraine conflict and Western sanctions."), /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_002_ImportExportLinechart, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Global Implications"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The arms trade now includes three key exporters with distinct strategies:"), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " leads in high-tech systems for wealthy allies."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " faces limitations due to sanctions and internal demands."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " offers affordable, flexible options to budget-conscious nations. Its rapid rise signals ambitions to reshape global power dynamics economically and militarily, adding complexity to global security."), /*#__PURE__*/react.createElement("br", null)));\n};\n/* harmony default export */ const _002_competition = (competition);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LG1CQUFBLFdBQUssQ0FBQyxlQUN4SEEsbUJBQUEsMEJBQUlBLG1CQUFBO0lBQU0rRSxLQUFLLEVBQUU7TUFBRWlCLEtBQUssRUFBRTtJQUFVO0VBQUUsR0FBQyxPQUFXLENBQUMsME1BQTBNLENBQUMsZUFBQWhHLG1CQUFBLFdBQUssQ0FDalEsQ0FDRyxDQUFDO0FBRWQsQ0FBQztBQUVELHVEQUFlb0ssV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9zcmMvY29tcG9uZW50cy9ncmFwaHMvMDAyX0ltcG9ydEV4cG9ydExpbmVjaGFydC5qcz9kZjk1Iiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9zcmMvY29tcG9uZW50cy8wMDJfY29tcGV0aXRpb24uanM/MTkwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IFJhbmdlU2xpZGVyIGZyb20gJ3JlYWN0LXJhbmdlLXNsaWRlci1pbnB1dCc7XG5pbXBvcnQgJ3JlYWN0LXJhbmdlLXNsaWRlci1pbnB1dC9kaXN0L3N0eWxlLmNzcyc7XG5cblxuY29uc3QgSW1wb3J0RXhwb3J0TGluZWNoYXJ0ID0gKCkgPT4ge1xuICBjb25zdCBzdmdSZWYgPSB1c2VSZWYoKTtcbiAgY29uc3Qgd2lkdGggPSA4MDA7XG4gIGNvbnN0IGhlaWdodCA9IDQwMDtcbiAgY29uc3QgbWFyZ2luID0geyB0b3A6IDYwLCByaWdodDogMTAwLCBib3R0b206IDMwLCBsZWZ0OiA2MCB9O1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtzZWxlY3RlZENvdW50cmllcywgc2V0U2VsZWN0ZWRDb3VudHJpZXNdID0gdXNlU3RhdGUoWydJbmRpYScsICdDaGluYSddKTtcbiAgY29uc3QgW3llYXJSYW5nZSwgc2V0WWVhclJhbmdlXSA9IHVzZVN0YXRlKFsxOTUwLCAyMDIzXSk7XG4gIGNvbnN0IFt0cmFkZVR5cGUsIHNldFRyYWRlVHlwZV0gPSB1c2VTdGF0ZSgnZXhwb3J0Jyk7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIC8vIFNldCBVUkxzIGZvciBhcm1zIHRyYWRlIGRhdGFcbiAgY29uc3QgYXJtc1N1cHBsaWVyc0RhdGFVcmwgPSBgJHtwcm9jZXNzLmVudi5QVUJMSUNfVVJMfS9kYXRhL3Byb2Nlc3NlZC9wcm9jZXNzZWRfYXJtc19zdXBwbGllcnMuY3N2YDtcbiAgY29uc3QgYXJtc1JlY2lwaWVudHNEYXRhVXJsID0gYCR7cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0vZGF0YS9wcm9jZXNzZWQvcHJvY2Vzc2VkX2FybXNfcmVjaXBpZW50cy5jc3ZgO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZGF0YVVybCA9IHRyYWRlVHlwZSA9PT0gJ2ltcG9ydCcgPyBhcm1zUmVjaXBpZW50c0RhdGFVcmwgOiBhcm1zU3VwcGxpZXJzRGF0YVVybDtcbiAgICBjb25zdCBjb3VudHJ5S2V5ID0gdHJhZGVUeXBlID09PSAnaW1wb3J0JyA/ICdSZWNpcGllbnQnIDogJ3N1cHBsaWVyJztcblxuICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgZDMuY3N2KGRhdGFVcmwpLnRoZW4ocmF3RGF0YSA9PiB7XG4gICAgICBjb25zdCB5ZWFyQ29sdW1ucyA9IE9iamVjdC5rZXlzKHJhd0RhdGFbMF0pLmZpbHRlcihjb2wgPT4gIWlzTmFOKGNvbCkpO1xuICAgICAgY29uc3QgY291bnRyeVRvdGFscyA9IHJhd0RhdGEubWFwKHJvdyA9PiAoe1xuICAgICAgICBjb3VudHJ5OiByb3dbY291bnRyeUtleV0sXG4gICAgICAgIHRvdGFsOiB5ZWFyQ29sdW1ucy5yZWR1Y2UoKHN1bSwgeWVhcikgPT4gc3VtICsgKCtyb3dbeWVhcl0gfHwgMCksIDApXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHRvcDEwQ291bnRyaWVzID0gY291bnRyeVRvdGFsc1xuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi50b3RhbCAtIGEudG90YWwpXG4gICAgICAgIC5zbGljZSgwLCAxMClcbiAgICAgICAgLm1hcChkID0+IGQuY291bnRyeSk7XG5cbiAgICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSByYXdEYXRhXG4gICAgICAgIC5maWx0ZXIocm93ID0+IHRvcDEwQ291bnRyaWVzLmluY2x1ZGVzKHJvd1tjb3VudHJ5S2V5XSkpXG4gICAgICAgIC5tYXAocm93ID0+ICh7XG4gICAgICAgICAgY291bnRyeTogcm93W2NvdW50cnlLZXldLFxuICAgICAgICAgIHZhbHVlczogeWVhckNvbHVtbnMubWFwKHllYXIgPT4gKHsgeWVhcjogK3llYXIsIHZhbHVlOiAoK3Jvd1t5ZWFyXSB8fCAwKSAvIDEwMDAgfSkpXG4gICAgICAgIH0pKTtcblxuICAgICAgc2V0RGF0YShwcm9jZXNzZWREYXRhKTtcblxuICAgICAgLy8gU2V0IHNlbGVjdGVkQ291bnRyaWVzIGJhc2VkIG9uIHRyYWRlVHlwZVxuICAgICAgaWYgKHRyYWRlVHlwZSA9PT0gJ2V4cG9ydCcpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRDb3VudHJpZXMoWydVbml0ZWQgU3RhdGVzJywgJ0NoaW5hJywgJ1J1c3NpYSddLmZpbHRlcihjID0+IHRvcDEwQ291bnRyaWVzLmluY2x1ZGVzKGMpKSk7XG4gICAgICB9IGVsc2UgaWYgKHRyYWRlVHlwZSA9PT0gJ2ltcG9ydCcpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRDb3VudHJpZXMoWydDaGluYScsICdJbmRpYSddLmZpbHRlcihjID0+IHRvcDEwQ291bnRyaWVzLmluY2x1ZGVzKGMpKSk7XG4gICAgICB9XG5cbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIG9yIHByb2Nlc3NpbmcgZGF0YTpcIiwgZXJyb3IpO1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfSk7XG4gIH0sIFt0cmFkZVR5cGVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHN2Z1JlZi5jdXJyZW50KVxuICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIGAwIDAgJHt3aWR0aH0gJHtoZWlnaHR9YClcblxuICAgICAgLnN0eWxlKFwiYm9yZGVyLXJhZGl1c1wiLCBcIjhweFwiKTtcblxuICAgIHN2Zy5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcblxuICAgIC8vIFRpdGxlXG4gICAgc3ZnLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5hdHRyKFwieFwiLCB3aWR0aCAvIDIpXG4gICAgICAuYXR0cihcInlcIiwgMjApXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIyMHB4XCIpXG4gICAgICAuc3R5bGUoXCJmb250LXdlaWdodFwiLCBcImJvbGRcIilcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZTBlMGUwXCIpXG4gICAgICAudGV4dChgQXJtcyAke3RyYWRlVHlwZSA9PT0gJ2ltcG9ydCcgPyAnSW1wb3J0cycgOiAnRXhwb3J0cyd9IGJ5IENvdW50cnlgKTtcblxuICAgIC8vIFktYXhpcyBMYWJlbFxuICAgIHN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXG4gICAgICAuYXR0cihcInhcIiwgLWhlaWdodCAvIDIpXG4gICAgICAuYXR0cihcInlcIiwgMClcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIxZW1cIilcbiAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxNnB4XCIpXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiI2UwZTBlMFwiKVxuICAgICAgLnN0eWxlKFwiZm9udC13ZWlnaHRcIiwgXCJib2xkXCIpXG4gICAgICAudGV4dChgVmFsdWUgKEJpbGxpb24gVVNEKWApO1xuXG4gICAgLy8gVG9vbHRpcCBhbmQgdmVydGljYWwgbGluZVxuICAgIGNvbnN0IHRvb2x0aXAgPSBkMy5zZWxlY3QoXCJib2R5XCIpLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRvb2x0aXBcIilcbiAgICAgIC5zdHlsZShcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIilcbiAgICAgIC5zdHlsZShcInBhZGRpbmdcIiwgXCIxMnB4XCIpXG4gICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIFwicmdiYSgwLCAwLCAwLCAwLjgpXCIpXG4gICAgICAuc3R5bGUoXCJjb2xvclwiLCBcIiNlMGUwZTBcIilcbiAgICAgIC5zdHlsZShcImJvcmRlci1yYWRpdXNcIiwgXCI4cHhcIilcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjE2cHhcIilcbiAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuXG4gICAgY29uc3QgdmVydGljYWxMaW5lID0gc3ZnLmFwcGVuZChcImxpbmVcIilcbiAgICAgIC5hdHRyKFwieTFcIiwgbWFyZ2luLnRvcClcbiAgICAgIC5hdHRyKFwieTJcIiwgaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSlcbiAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2FhYVwiKVxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMSlcbiAgICAgIC5hdHRyKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjQgNFwiKVxuICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG5cbiAgICAvLyBGaWx0ZXIgZGF0YSBiYXNlZCBvbiBzZWxlY3RlZCBjb3VudHJpZXMgYW5kIHllYXIgcmFuZ2VcbiAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSBkYXRhXG4gICAgICAuZmlsdGVyKGQgPT4gc2VsZWN0ZWRDb3VudHJpZXMuaW5jbHVkZXMoZC5jb3VudHJ5KSlcbiAgICAgIC5tYXAoZCA9PiAoe1xuICAgICAgICAuLi5kLFxuICAgICAgICB2YWx1ZXM6IGQudmFsdWVzLmZpbHRlcih2ID0+IHYueWVhciA+PSB5ZWFyUmFuZ2VbMF0gJiYgdi55ZWFyIDw9IHllYXJSYW5nZVsxXSlcbiAgICAgIH0pKTtcblxuICAgIC8vIERlZmluZSBzY2FsZXNcbiAgICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKHllYXJSYW5nZSlcbiAgICAgIC5yYW5nZShbbWFyZ2luLmxlZnQsIHdpZHRoIC0gbWFyZ2luLnJpZ2h0IC0gMjBdKTtcblxuICAgIGNvbnN0IHlNYXggPSBkMy5tYXgoZmlsdGVyZWREYXRhLCBkID0+IGQzLm1heChkLnZhbHVlcywgdiA9PiB2LnZhbHVlKSkgfHwgMDtcbiAgICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFswLCB5TWF4XSlcbiAgICAgIC5yYW5nZShbaGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSwgbWFyZ2luLnRvcF0pO1xuXG4gICAgY29uc3QgY29sb3IgPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCkuZG9tYWluKHNlbGVjdGVkQ291bnRyaWVzKTtcblxuICAgIGNvbnN0IGxpbmUgPSBkMy5saW5lKClcbiAgICAgIC54KGQgPT4geFNjYWxlKGQueWVhcikpXG4gICAgICAueShkID0+IHlTY2FsZShkLnZhbHVlKSk7XG5cbiAgICAvLyBYIGFuZCBZIEF4ZXNcbiAgICBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCAtIG1hcmdpbi5ib3R0b219KWApXG4gICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja0Zvcm1hdChkMy5mb3JtYXQoXCJkXCIpKSlcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjE1cHhcIilcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjZTBlMGUwXCIpO1xuXG4gICAgc3ZnLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sIDApYClcbiAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHlTY2FsZSkudGlja0Zvcm1hdChkID0+IGAke2R9QmApKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTVweFwiKVxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiNlMGUwZTBcIik7XG5cbiAgICAvLyBEcmF3IGxpbmVzXG4gICAgc3ZnLnNlbGVjdEFsbChcIi5saW5lXCIpXG4gICAgICAuZGF0YShmaWx0ZXJlZERhdGEpXG4gICAgICAuam9pbihcInBhdGhcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lXCIpXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAuYXR0cihcInN0cm9rZVwiLCBkID0+IHtcbiAgICAgICAgaWYgKGQuY291bnRyeSA9PT0gJ1VuaXRlZCBTdGF0ZXMnKSByZXR1cm4gJyM0NjgyQjQnOyAvLyBDb2xvciBmb3IgVW5pdGVkIFN0YXRlc1xuICAgICAgICBpZiAoZC5jb3VudHJ5ID09PSAnQ2hpbmEnKSByZXR1cm4gJyNGRkRCNTgnOyAgICAgICAgICAvLyBDb2xvciBmb3IgQ2hpbmFcbiAgICAgICAgaWYgKGQuY291bnRyeSA9PT0gJ1J1c3NpYScpIHJldHVybiAnI0RDMTQzQyc7ICAgICAgICAgLy8gQ29sb3IgZm9yIFJ1c3NpYVxuICAgICAgICByZXR1cm4gY29sb3IoZC5jb3VudHJ5KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IGNvbG9yIHNjYWxlIGZvciBvdGhlciBjb3VudHJpZXNcbiAgICAgIH0pXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAzLjI1KVxuICAgICAgLmF0dHIoXCJkXCIsIGQgPT4gbGluZShkLnZhbHVlcykpO1xuXG4gICAgLy8gRHJhdyBkb3RzXG4gICAgc3ZnLnNlbGVjdEFsbChcIi5kb3RcIilcbiAgICAgIC5kYXRhKGZpbHRlcmVkRGF0YS5mbGF0TWFwKGQgPT4gZC52YWx1ZXMubWFwKHYgPT4gKHsgLi4udiwgY291bnRyeTogZC5jb3VudHJ5IH0pKSkpXG4gICAgICAuam9pbihcImNpcmNsZVwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvdFwiKVxuICAgICAgLmF0dHIoXCJjeFwiLCBkID0+IHhTY2FsZShkLnllYXIpKVxuICAgICAgLmF0dHIoXCJjeVwiLCBkID0+IHlTY2FsZShkLnZhbHVlKSlcbiAgICAgIC5hdHRyKFwiclwiLCA1LjUpXG4gICAgICAuYXR0cihcImZpbGxcIiwgZCA9PiB7XG4gICAgICAgIGlmIChkLmNvdW50cnkgPT09ICdVbml0ZWQgU3RhdGVzJykgcmV0dXJuICcjNDY4MkI0JzsgLy8gQ29sb3IgZm9yIFVuaXRlZCBTdGF0ZXNcbiAgICAgICAgaWYgKGQuY291bnRyeSA9PT0gJ0NoaW5hJykgcmV0dXJuICcjRkZEQjU4JzsgICAgICAgICAgLy8gQ29sb3IgZm9yIENoaW5hXG4gICAgICAgIGlmIChkLmNvdW50cnkgPT09ICdSdXNzaWEnKSByZXR1cm4gJyNEQzE0M0MnOyAgICAgICAgIC8vIENvbG9yIGZvciBSdXNzaWFcbiAgICAgICAgcmV0dXJuIGNvbG9yKGQuY291bnRyeSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBjb2xvciBzY2FsZSBmb3Igb3RoZXIgY291bnRyaWVzXG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChldmVudCwgZCkgPT4ge1xuICAgICAgICB2ZXJ0aWNhbExpbmUuc3R5bGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBtb3VzZVggPSBldmVudC5wYWdlWCAtIHN2Zy5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgICAgdmVydGljYWxMaW5lLmF0dHIoXCJ4MVwiLCBtb3VzZVgpLmF0dHIoXCJ4MlwiLCBtb3VzZVgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY2xvc2VzdFllYXIgPSBNYXRoLnJvdW5kKHhTY2FsZS5pbnZlcnQobW91c2VYKSk7XG5cbiAgICAgICAgY29uc3QgdG9vbHRpcERhdGEgPSBmaWx0ZXJlZERhdGFcbiAgICAgICAgICAubWFwKGNvdW50cnlEYXRhID0+IHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgZGF0YSBwb2ludCBpbiB0aW1lIGZvciBlYWNoIGNvdW50cnlcbiAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RQb2ludCA9IGNvdW50cnlEYXRhLnZhbHVlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+XG4gICAgICAgICAgICAgIE1hdGguYWJzKGN1cnIueWVhciAtIGNsb3Nlc3RZZWFyKSA8IE1hdGguYWJzKHByZXYueWVhciAtIGNsb3Nlc3RZZWFyKSA/IGN1cnIgOiBwcmV2XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGA8c3Ryb25nPiR7Y291bnRyeURhdGEuY291bnRyeX08L3N0cm9uZz48YnIvPiQke2Nsb3Nlc3RQb2ludC52YWx1ZS50b0ZpeGVkKDIpfUJgO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmpvaW4oXCI8YnIvPjxici8+XCIpO1xuXG4gICAgICAgIC8vIENvbWJpbmUgdGhlIHllYXIgd2l0aCBlYWNoIGNvdW50cnnigJlzIGRhdGFcbiAgICAgICAgY29uc3QgZmluYWxUb29sdGlwRGF0YSA9IGA8c3Ryb25nPiR7Y2xvc2VzdFllYXJ9PC9zdHJvbmc+PGJyLz48YnIvPiR7dG9vbHRpcERhdGF9YDtcblxuICAgICAgICB0b29sdGlwXG4gICAgICAgICAgLmh0bWwoZmluYWxUb29sdGlwRGF0YSlcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGAke2V2ZW50LnBhZ2VYICsgMTB9cHhgKVxuICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBgJHtldmVudC5wYWdlWSAtIDIwfXB4YCk7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdXRcIiwgKCkgPT4ge1xuICAgICAgICB2ZXJ0aWNhbExpbmUuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgdG9vbHRpcC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgfSk7XG5cbiAgICAvLyBDb3VudHJ5IGxhYmVsc1xuICAgIHN2Zy5zZWxlY3RBbGwoXCIuY291bnRyeS1sYWJlbFwiKVxuICAgICAgLmRhdGEoZmlsdGVyZWREYXRhKVxuICAgICAgLmpvaW4oXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwiY291bnRyeS1sYWJlbFwiKVxuICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC0gbWFyZ2luLnJpZ2h0IC0gMTUpIC8vIFBvc2l0aW9uIHRvIHRoZSByaWdodCBvZiB0aGUgbGluZVxuICAgICAgLmF0dHIoXCJ5XCIsIGQgPT4geVNjYWxlKGQudmFsdWVzW2QudmFsdWVzLmxlbmd0aCAtIDFdLnZhbHVlKSlcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIwLjM1ZW1cIilcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxuICAgICAgLnRleHQoZCA9PiBkLmNvdW50cnkpXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIGQgPT4ge1xuICAgICAgICBpZiAoZC5jb3VudHJ5ID09PSAnVW5pdGVkIFN0YXRlcycpIHJldHVybiAnIzQ2ODJCNCc7IC8vIENvbG9yIGZvciBVbml0ZWQgU3RhdGVzXG4gICAgICAgIGlmIChkLmNvdW50cnkgPT09ICdDaGluYScpIHJldHVybiAnI0ZGREI1OCc7ICAgICAgICAgIC8vIENvbG9yIGZvciBDaGluYVxuICAgICAgICBpZiAoZC5jb3VudHJ5ID09PSAnUnVzc2lhJykgcmV0dXJuICcjREMxNDNDJzsgICAgICAgICAvLyBDb2xvciBmb3IgUnVzc2lhXG4gICAgICAgIHJldHVybiBjb2xvcihkLmNvdW50cnkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgY29sb3Igc2NhbGUgZm9yIG90aGVyIGNvdW50cmllc1xuICAgICAgfSlcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjE2cHhcIik7XG5cbiAgICAvLyBDbGVhbnVwIG9uIHVubW91bnRcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdG9vbHRpcC5yZW1vdmUoKTtcbiAgICAgIHZlcnRpY2FsTGluZS5yZW1vdmUoKTtcbiAgICB9O1xuICB9LCBbZGF0YSwgc2VsZWN0ZWRDb3VudHJpZXMsIHllYXJSYW5nZSwgdHJhZGVUeXBlXSk7XG5cbiAgY29uc3QgaGFuZGxlQ291bnRyeVRvZ2dsZSA9IChjb3VudHJ5KSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRDb3VudHJpZXMocHJldiA9PlxuICAgICAgcHJldi5pbmNsdWRlcyhjb3VudHJ5KSA/IHByZXYuZmlsdGVyKGMgPT4gYyAhPT0gY291bnRyeSkgOiBbLi4ucHJldiwgY291bnRyeV1cbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVRyYWRlVHlwZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IG5ld1RyYWRlVHlwZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICBzZXRUcmFkZVR5cGUobmV3VHJhZGVUeXBlKTtcbiAgICBpZiAobmV3VHJhZGVUeXBlID09PSAnZXhwb3J0Jykge1xuICAgICAgc2V0U2VsZWN0ZWRDb3VudHJpZXMoWydVbml0ZWQgU3RhdGVzJywgJ0NoaW5hJywgJ1J1c3NpYSddKTtcbiAgICB9IGVsc2UgaWYgKG5ld1RyYWRlVHlwZSA9PT0gJ2ltcG9ydCcpIHtcbiAgICAgIHNldFNlbGVjdGVkQ291bnRyaWVzKFsnQ2hpbmEnLCAnSW5kaWEnXSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlc2V0U2VsZWN0aW9ucyA9ICgpID0+IHtcbiAgICBzZXRUcmFkZVR5cGUoJ2V4cG9ydCcpO1xuICAgIHNldFllYXJSYW5nZShbMTk1MCwgMjAyM10pO1xuICAgIHNldFNlbGVjdGVkQ291bnRyaWVzKFsnVW5pdGVkIFN0YXRlcycsICdDaGluYScsICdSdXNzaWEnXSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsIHBhZGRpbmc6ICcyMHB4JywgYm9yZGVyOiAnM3B4IHNvbGlkICNlNzRjM2MnLCBib3JkZXJSYWRpdXM6ICc4cHgnIH19PlxuICAgICAgPGRpdiBzdHlsZT17eyBmbGV4OiAnMScgfX0+XG4gICAgICAgIDxzdmcgcmVmPXtzdmdSZWZ9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9Pjwvc3ZnPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luTGVmdDogJzIwcHgnLCB3aWR0aDogJzI1MHB4JywgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJywgY29sb3I6ICcjZTZlNmU2JyB9fT5cbiAgICAgICAgPHAgc3R5bGU9e3sgZm9udFdlaWdodDogJ2JvbGQnLCBmb250U2l6ZTogJzE2cHgnIH19PlRyYWRlIFR5cGU8L3A+XG4gICAgICAgIDxzZWxlY3QgbmFtZT1cInR5cGVTZWxlY3RvclwiIHZhbHVlPXt0cmFkZVR5cGV9IG9uQ2hhbmdlPXtoYW5kbGVUcmFkZVR5cGVDaGFuZ2V9IHN0eWxlPXt7YmFja2dyb3VuZENvbG9yOicjNDQ0NDQ0JywgY29sb3I6ICcjZTBlMGUwJywgbWFyZ2luOiAnMTBweCAwJywgcGFkZGluZzogJzVweCcsIGJvcmRlcjogJzJweCBzb2xpZCAjZTBlMGUwJywgYm9yZGVyUmFkaXVzOiAnNHB4JyB9fT5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiaW1wb3J0XCI+SW1wb3J0czwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJleHBvcnRcIj5FeHBvcnRzPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuXG4gICAgICAgIDxidXR0b24gb25DbGljaz17cmVzZXRTZWxlY3Rpb25zfVxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZTc0YzNjJyxcbiAgICAgICAgICAgIGNvbG9yOiAnI2UwZTBlMCcsXG4gICAgICAgICAgICBwYWRkaW5nOiAnOHB4IDEycHgnLFxuICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMTBweCdcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgUmVzZXQgU2VsZWN0aW9uc1xuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzIwcHgnIH19PlxuICAgICAgICAgIDxSYW5nZVNsaWRlclxuICAgICAgICAgICAgbWluPXsxOTUwfVxuICAgICAgICAgICAgbWF4PXsyMDIzfVxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXt5ZWFyUmFuZ2V9XG4gICAgICAgICAgICB2YWx1ZT17eWVhclJhbmdlfSBcbiAgICAgICAgICAgIG9uSW5wdXQ9eyh2YWx1ZXMpID0+IHNldFllYXJSYW5nZSh2YWx1ZXMpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY3VzdG9tLXJhbmdlLXNsaWRlclwiXG4gICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBtYXJnaW46ICcxMHB4IDAnLH19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICB7YFxuICAgICAgICAgICAgICAuY3VzdG9tLXJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX190cmFjayxcbiAgICAgICAgICAgICAgLmN1c3RvbS1yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fdGh1bWIsXG4gICAgICAgICAgICAgIC5jdXN0b20tcmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3JhbmdlIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTc0YzNjOyAvKiBTZXRzIHRoZSBjb2xvciB0byByZWQgKi9cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLyogVGh1bWIgc3BlY2lmaWMgc3R5bGUgKi9cbiAgICAgICAgICAgICAgLmN1c3RvbS1yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fdGh1bWIge1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2U3NGMzYztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLyogVHJhY2sgc3BlY2lmaWMgc3R5bGUgKi9cbiAgICAgICAgICAgICAgLmN1c3RvbS1yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fdHJhY2sge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlNzRjM2M7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9XG4gICAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJywgY29sb3I6ICcjZTc0YzNjJywgZm9udFNpemU6ICcxNHB4JywgbWFyZ2luVG9wOiAnMTBweCcgfX0+XG4gICAgICAgICAgICA8c3Bhbj57eWVhclJhbmdlWzBdfTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPnt5ZWFyUmFuZ2VbMV19PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8cCBzdHlsZT17eyBmb250V2VpZ2h0OiAnYm9sZCcsIGZvbnRTaXplOiAnMTZweCcsIG1hcmdpblRvcDogJzIwcHgnLCBjb2xvcjogJyNlMGUwZTAnIH19PlNlbGVjdCBDb3VudHJpZXM8L3A+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2dyaWQnLCBncmlkVGVtcGxhdGVDb2x1bW5zOiAncmVwZWF0KDIsIGF1dG8pJywgZ2FwOiAnMTBweCcsIG1hcmdpblRvcDogJzEwcHgnIH19PlxuICAgICAgICAgIHtkYXRhLm1hcChkID0+IChcbiAgICAgICAgICAgIDxkaXYga2V5PXtkLmNvdW50cnl9IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicsIGNvbG9yOiAnI2UwZTBlMCcgfX0+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImNvdW50cnlDaGVja2JveFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e2QuY291bnRyeX1cbiAgICAgICAgICAgICAgICBjaGVja2VkPXtzZWxlY3RlZENvdW50cmllcy5pbmNsdWRlcyhkLmNvdW50cnkpfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiBoYW5kbGVDb3VudHJ5VG9nZ2xlKGQuY291bnRyeSl9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luUmlnaHQ6ICc1cHgnIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxwPntkLmNvdW50cnl9PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbXBvcnRFeHBvcnRMaW5lY2hhcnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1wb3J0RXhwb3J0TGluZWNoYXJ0IGZyb20gJy4vZ3JhcGhzLzAwMl9JbXBvcnRFeHBvcnRMaW5lY2hhcnQnO1xuXG5jb25zdCBjb21wZXRpdGlvbiA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBpZD1cIjAwMlwiPlxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXRpdGxlXCIgc3R5bGU9e3tjc3NUZXh0OiAnbWFyZ2luLXRvcDogMCd9fT5cbiAgICAgICAgQ29tcGV0aXRpb24gaW4gU3RyYXRlZ2ljIFJlZ2lvbnNcbiAgICAgIDwvcD5cblxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXBhcmFncmFwaFwiPlxuICAgICAgICAgIFRoZSBnbG9iYWwgYXJtcyB0cmFkZSBoYXMgc2hpZnRlZCBmcm9tIGEgVVMtU292aWV0IHJpdmFscnkgdG8gYSBtdWx0aXBvbGFyIGNvbXBldGl0aW9uLCBcbiAgICAgICAgICB3aXRoIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNGRkRCNThcIiB9fT5DaGluYTwvc3Bhbj4gam9pbmluZyB0aGUgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiIzQ2ODJCNFwiIH19PlVTPC9zcGFuPiBhbmQgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0RDMTQzQ1wiIH19PlJ1c3NpYTwvc3Bhbj4gYXMga2V5IHBsYXllcnMuIFxuICAgICAgICAgIEVhY2ggbmF0aW9u4oCZcyBpbmZsdWVuY2UgaXMgc2hhcGVkIGJ5IGhpc3RvcmljYWwgZXZlbnRzLCBhbGxpYW5jZXMsIGFuZCBlY29ub21pYyBmYWN0b3JzLCBpbXBhY3RpbmcgZ2xvYmFsIHNlY3VyaXR5IGR5bmFtaWNzLjxici8+XG4gICAgICA8L3A+XG5cbiAgICAgIDx1bD5cbiAgICAgICAgPGxpPjxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNlNzRjM2NcIiB9fT5Db2xkIFdhciBFcmEgKDE5NDctMTk5MSk8L3NwYW4+IFRoZSA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjNDY4MkI0XCIgfX0+VVM8L3NwYW4+IGFuZCA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjREMxNDNDXCIgfX0+U292aWV0IFVuaW9uPC9zcGFuPiBkb21pbmF0ZWQgYXJtcyBleHBvcnRzLCBlYWNoIHN1cHBvcnRpbmcgYWxsaWVzIHRvIGV4dGVuZCBpZGVvbG9naWNhbCBpbmZsdWVuY2UuPC9saT48YnIgLz5cbiAgICAgICAgPGxpPjxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNlNzRjM2NcIiB9fT5Qb3N0LUNvbGQgV2FyIFNoaWZ0ICgxOTkxLTIwMDApPC9zcGFuPiBXaXRoIHRoZSA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjREMxNDNDXCIgfX0+U292aWV0IFVuaW9u4oCZczwvc3Bhbj4gY29sbGFwc2UsIHRoZSA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjNDY4MkI0XCIgfX0+VVM8L3NwYW4+IGVtZXJnZWQgYXMgdGhlIHRvcCBhcm1zIGV4cG9ydGVyLCBiYWNrZWQgYnkgYSBzdHJvbmcgZWNvbm9teSBhbmQgc3RhYmxlIGFsbGlhbmNlcy48L2xpPjxiciAvPlxuICAgICAgICA8bGk+PHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI2U3NGMzY1wiIH19PlJ1c3NpYeKAmXMgUmVzdXJnZW5jZSAoRWFybHkgMjAwMHMpPC9zcGFuPiBVbmRlciBQdXRpbiwgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0RDMTQzQ1wiIH19PlJ1c3NpYTwvc3Bhbj4gcmVidWlsdCBpdHMgZGVmZW5zZSBpbmR1c3RyeSwgcmVnYWluaW5nIGNsaWVudHMgd2l0aCBhZmZvcmRhYmxlIG9wdGlvbnMgbGlrZSB0aGUgUy00MDAuPC9saT48YnIgLz5cbiAgICAgICAgPGxpPjxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNlNzRjM2NcIiB9fT5DaGluYeKAmXMgUmlzZSAoMjAwMHMtUHJlc2VudCk8L3NwYW4+IDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNGRkRCNThcIiB9fT5DaGluYTwvc3Bhbj4gZW50ZXJlZCB0aGUgbWFya2V0LCBvZmZlcmluZyBhZmZvcmRhYmxlIGFsdGVybmF0aXZlcyB0byBXZXN0ZXJuIGFuZCBSdXNzaWFuIGFybXMsIGFwcGVhbGluZyB0byByZWdpb25zIGxpa2UgQWZyaWNhIGFuZCBTb3V0aGVhc3QgQXNpYS4gVGhlIEJlbHQgYW5kIFJvYWQgaW5pdGlhdGl2ZSBhbmQgYSBub24taW50ZXJmZXJlbmNlIHBvbGljeSBmdXJ0aGVyIGJvbHN0ZXJlZCA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjRkZEQjU4XCIgfX0+Q2hpbmHigJlzPC9zcGFuPiBhcHBlYWwuPC9saT48YnIgLz5cbiAgICAgICAgPGxpPjxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNlNzRjM2NcIiB9fT5DaGluYSBTdXJwYXNzZXMgUnVzc2lhICgyMDIyKTwvc3Bhbj4gSW4gMjAyMiwgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0ZGREI1OFwiIH19PkNoaW5hPC9zcGFuPiBiZWNhbWUgdGhlIHNlY29uZC1sYXJnZXN0IGFybXMgZXhwb3J0ZXIgYXMgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0RDMTQzQ1wiIH19PlJ1c3NpYTwvc3Bhbj4gZmFjZWQgY2hhbGxlbmdlcyBkdWUgdG8gdGhlIFVrcmFpbmUgY29uZmxpY3QgYW5kIFdlc3Rlcm4gc2FuY3Rpb25zLjwvbGk+PGJyIC8+XG4gICAgICA8L3VsPiBcblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaGFydC1jb250YWluZXJcIiBzdHlsZT17e3dpZHRoOiAnODAlJ319PlxuICAgICAgICA8SW1wb3J0RXhwb3J0TGluZWNoYXJ0IC8+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXRpdGxlXCI+XG4gICAgICAgIEdsb2JhbCBJbXBsaWNhdGlvbnNcbiAgICAgIDwvcD5cblxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXBhcmFncmFwaFwiPlxuICAgICAgICBUaGUgYXJtcyB0cmFkZSBub3cgaW5jbHVkZXMgdGhyZWUga2V5IGV4cG9ydGVycyB3aXRoIGRpc3RpbmN0IHN0cmF0ZWdpZXM6XG4gICAgICA8L3A+XG5cbiAgICAgIDx1bD5cbiAgICAgICAgPGxpPlRoZSA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjNDY4MkI0XCIgfX0+VVM8L3NwYW4+IGxlYWRzIGluIGhpZ2gtdGVjaCBzeXN0ZW1zIGZvciB3ZWFsdGh5IGFsbGllcy48L2xpPjxiciAvPlxuICAgICAgICA8bGk+PHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0RDMTQzQ1wiIH19PlJ1c3NpYTwvc3Bhbj4gZmFjZXMgbGltaXRhdGlvbnMgZHVlIHRvIHNhbmN0aW9ucyBhbmQgaW50ZXJuYWwgZGVtYW5kcy48L2xpPjxiciAvPlxuICAgICAgICA8bGk+PHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0ZGREI1OFwiIH19PkNoaW5hPC9zcGFuPiBvZmZlcnMgYWZmb3JkYWJsZSwgZmxleGlibGUgb3B0aW9ucyB0byBidWRnZXQtY29uc2Npb3VzIG5hdGlvbnMuIEl0cyByYXBpZCByaXNlIHNpZ25hbHMgYW1iaXRpb25zIHRvIHJlc2hhcGUgZ2xvYmFsIHBvd2VyIGR5bmFtaWNzIGVjb25vbWljYWxseSBhbmQgbWlsaXRhcmlseSwgYWRkaW5nIGNvbXBsZXhpdHkgdG8gZ2xvYmFsIHNlY3VyaXR5LjwvbGk+PGJyIC8+XG4gICAgICA8L3VsPlxuICAgIDwvc2VjdGlvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBldGl0aW9uO1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlUmVmIiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJkMyIsIlJhbmdlU2xpZGVyIiwiSW1wb3J0RXhwb3J0TGluZWNoYXJ0Iiwic3ZnUmVmIiwid2lkdGgiLCJoZWlnaHQiLCJtYXJnaW4iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJfdXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkiLCJkYXRhIiwic2V0RGF0YSIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0Iiwic2VsZWN0ZWRDb3VudHJpZXMiLCJzZXRTZWxlY3RlZENvdW50cmllcyIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwieWVhclJhbmdlIiwic2V0WWVhclJhbmdlIiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJ0cmFkZVR5cGUiLCJzZXRUcmFkZVR5cGUiLCJfdXNlU3RhdGU5IiwiX3VzZVN0YXRlMTAiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImFybXNTdXBwbGllcnNEYXRhVXJsIiwiY29uY2F0IiwicHJvY2VzcyIsImVudiIsIlBVQkxJQ19VUkwiLCJhcm1zUmVjaXBpZW50c0RhdGFVcmwiLCJkYXRhVXJsIiwiY291bnRyeUtleSIsImNzdiIsInRoZW4iLCJyYXdEYXRhIiwieWVhckNvbHVtbnMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwiY29sIiwiaXNOYU4iLCJjb3VudHJ5VG90YWxzIiwibWFwIiwicm93IiwiY291bnRyeSIsInRvdGFsIiwicmVkdWNlIiwic3VtIiwieWVhciIsInRvcDEwQ291bnRyaWVzIiwic29ydCIsImEiLCJiIiwic2xpY2UiLCJkIiwicHJvY2Vzc2VkRGF0YSIsImluY2x1ZGVzIiwidmFsdWVzIiwidmFsdWUiLCJjIiwiZXJyb3IiLCJjb25zb2xlIiwibGVuZ3RoIiwic3ZnIiwic2VsZWN0IiwiY3VycmVudCIsImF0dHIiLCJzdHlsZSIsInNlbGVjdEFsbCIsInJlbW92ZSIsImFwcGVuZCIsInRleHQiLCJ0b29sdGlwIiwidmVydGljYWxMaW5lIiwiZmlsdGVyZWREYXRhIiwiX29iamVjdFNwcmVhZCIsInYiLCJ4U2NhbGUiLCJzY2FsZUxpbmVhciIsImRvbWFpbiIsInJhbmdlIiwieU1heCIsIm1heCIsInlTY2FsZSIsImNvbG9yIiwic2NhbGVPcmRpbmFsIiwic2NoZW1lQ2F0ZWdvcnkxMCIsImxpbmUiLCJ4IiwieSIsImNhbGwiLCJheGlzQm90dG9tIiwidGlja0Zvcm1hdCIsImZvcm1hdCIsImF4aXNMZWZ0Iiwiam9pbiIsImZsYXRNYXAiLCJvbiIsImV2ZW50IiwibW91c2VYIiwicGFnZVgiLCJub2RlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xvc2VzdFllYXIiLCJNYXRoIiwicm91bmQiLCJpbnZlcnQiLCJ0b29sdGlwRGF0YSIsImNvdW50cnlEYXRhIiwiY2xvc2VzdFBvaW50IiwicHJldiIsImN1cnIiLCJhYnMiLCJ0b0ZpeGVkIiwiZmluYWxUb29sdGlwRGF0YSIsImh0bWwiLCJwYWdlWSIsImhhbmRsZUNvdW50cnlUb2dnbGUiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJoYW5kbGVUcmFkZVR5cGVDaGFuZ2UiLCJuZXdUcmFkZVR5cGUiLCJ0YXJnZXQiLCJyZXNldFNlbGVjdGlvbnMiLCJjcmVhdGVFbGVtZW50IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJwYWRkaW5nIiwiYm9yZGVyIiwiYm9yZGVyUmFkaXVzIiwiZmxleCIsInJlZiIsIm1hcmdpbkxlZnQiLCJmbGV4RGlyZWN0aW9uIiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwibmFtZSIsIm9uQ2hhbmdlIiwiYmFja2dyb3VuZENvbG9yIiwib25DbGljayIsImN1cnNvciIsIm1hcmdpblRvcCIsIm1pbiIsImRlZmF1bHRWYWx1ZSIsIm9uSW5wdXQiLCJjbGFzc05hbWUiLCJqdXN0aWZ5Q29udGVudCIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJnYXAiLCJrZXkiLCJ0eXBlIiwiY2hlY2tlZCIsIm1hcmdpblJpZ2h0IiwiY29tcGV0aXRpb24iLCJpZCIsImNzc1RleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5716\n')}}]);