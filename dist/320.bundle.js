"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[320],{3320:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _005_emergingThreats)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 272 modules\nvar src = __webpack_require__(1445);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(1796);\n;// ./src/components/graphs/005_WeaponTypeChoroplethMap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar ChoroplethMap = function ChoroplethMap() {\n  var svgRef = (0,react.useRef)();\n  var pieChartRef = (0,react.useRef)();\n\n  // State Variables\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    modalData = _useState4[0],\n    setModalData = _useState4[1]; // For storing data to display in the modal\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    countryData = _useState6[0],\n    setCountryData = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    countries = _useState8[0],\n    setCountries = _useState8[1]; // Store GeoJSON features\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedYear = _useState10[0],\n    setSelectedYear = _useState10[1]; // Initialize to null\n  var _useState11 = (0,react.useState)(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    selectedWeaponType = _useState12[0],\n    setSelectedWeaponType = _useState12[1]; // Initialize to null\n  var _useState13 = (0,react.useState)([]),\n    _useState14 = _slicedToArray(_useState13, 2),\n    weaponTypes = _useState14[0],\n    setWeaponTypes = _useState14[1];\n  var _useState15 = (0,react.useState)({}),\n    _useState16 = _slicedToArray(_useState15, 2),\n    maxQuantities = _useState16[0],\n    setMaxQuantities = _useState16[1];\n  var _useState17 = (0,react.useState)(true),\n    _useState18 = _slicedToArray(_useState17, 2),\n    loading = _useState18[0],\n    setLoading = _useState18[1];\n  var _useState19 = (0,react.useState)(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    error = _useState20[0],\n    setError = _useState20[1];\n  var _useState21 = (0,react.useState)(1950),\n    _useState22 = _slicedToArray(_useState21, 2),\n    minYear = _useState22[0],\n    setMinYear = _useState22[1]; // Fixed minimum year\n  var _useState23 = (0,react.useState)(2023),\n    _useState24 = _slicedToArray(_useState23, 2),\n    maxYear = _useState24[0],\n    setMaxYear = _useState24[1]; // Fixed maximum year\n  var _useState25 = (0,react.useState)(0),\n    _useState26 = _slicedToArray(_useState25, 2),\n    totalArmsTrade = _useState26[0],\n    setTotalArmsTrade = _useState26[1];\n\n  // Data URL\n  var dataUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_arms_transfer_by_weapon_types.csv");\n  var pieChartUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_regional_transfers.csv");\n\n  /**\n   * Country Name Mapping\n   * Map dataset country names to GeoJSON country names if they differ.\n   */\n  var countryNameMapping = {\n    "Cote d\'Ivoire": "Ivory Coast",\n    "Congo": "Republic of the Congo" // Adjust based on GeoJSON data\n    // Add more mappings as necessary\n  };\n\n  /**\n   * Data Loading Effect\n   * Fetches and processes the world map and arms transfer data once when the component mounts.\n   */\n  (0,react.useEffect)(function () {\n    setLoading(true);\n    Promise.all([src/* json */.Pq9("".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/countries-110m.json")), src/* csv */.fu7(dataUrl, function (d) {\n      var year = +d[\'year\'];\n      var quantity = +d[\'quantity\'];\n      // Validate year range\n      if (isNaN(year) || isNaN(quantity) || year < minYear || year > maxYear) {\n        return null; // Skip invalid or out-of-range rows\n      }\n      return {\n        recipients: d[\'recipients\'],\n        suppliers: d[\'suppliers\'],\n        year: Math.round(year),\n        // Ensure year is an integer\n        quantity: quantity,\n        weaponDescription: d[\'weapon description\'],\n        status: d[\'status\']\n      };\n    })]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        worldDataRaw = _ref2[0],\n        armsDataRaw = _ref2[1];\n      // Filter out null entries\n      armsDataRaw = armsDataRaw.filter(function (row) {\n        return row !== null;\n      });\n\n      // Convert TopoJSON to GeoJSON Features\n      var countriesData = feature/* default */.A(worldDataRaw, worldDataRaw.objects.countries).features;\n      setCountries(countriesData); // Store countries data in state\n\n      // Process arms transfer data\n      var processedData = {};\n      var uniqueWeaponTypes = new Set();\n      var tempMaxQuantities = {};\n      armsDataRaw.forEach(function (row) {\n        var country = row.recipients;\n        country = countryNameMapping[country] || country; // Apply mapping\n\n        var year = row.year;\n        var weaponType = row.weaponDescription ? row.weaponDescription.trim() : ""; // Trim whitespace\n        var quantity = row.quantity;\n        var suppliers = row.suppliers;\n        var status = row.status;\n\n        // Only add non-empty weapon types\n        if (weaponType !== "") {\n          uniqueWeaponTypes.add(weaponType);\n        }\n        if (!processedData[country]) {\n          processedData[country] = {};\n        }\n        if (!processedData[country][year]) {\n          processedData[country][year] = {};\n        }\n\n        // Assuming one entry per country-year-weaponType\n        processedData[country][year][weaponType] = {\n          quantity: quantity,\n          suppliers: suppliers,\n          status: status\n        };\n\n        // Update max quantities for scales\n        if (!tempMaxQuantities[weaponType]) {\n          tempMaxQuantities[weaponType] = {};\n        }\n        if (!tempMaxQuantities[weaponType][year] || quantity > tempMaxQuantities[weaponType][year]) {\n          tempMaxQuantities[weaponType][year] = quantity;\n        }\n      });\n\n      // Construct weaponTypesArray with "All" and filter out any empty entries\n      var weaponTypesArray = ["All"].concat(_toConsumableArray(Array.from(uniqueWeaponTypes).filter(function (wt) {\n        return wt !== "" && wt !== undefined;\n      }).sort()));\n      setWeaponTypes(weaponTypesArray);\n      setCountryData(processedData);\n      setMaxQuantities(tempMaxQuantities);\n      setLoading(false);\n\n      // Set default selectedYear and selectedWeaponType based on available data\n      var availableYears = Array.from(new Set(armsDataRaw.map(function (d) {\n        return d.year;\n      }))).sort(function (a, b) {\n        return a - b;\n      });\n      if (availableYears.length > 0) {\n        setSelectedYear(2019);\n      }\n      if (weaponTypesArray.includes(\'All\')) {\n        setSelectedWeaponType(\'All\');\n      } else if (weaponTypesArray.length > 0) {\n        setSelectedWeaponType(weaponTypesArray[0]);\n      }\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n      setError("Failed to load data. Please try again later.");\n      setLoading(false);\n    });\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  /**\n   * Rendering Effect\n   * Draws the map whenever selectedYear, selectedWeaponType, or countryData changes.\n   */\n  (0,react.useEffect)(function () {\n    if (countries.length === 0 || Object.keys(countryData).length === 0 || selectedYear === null || isNaN(selectedYear) || !selectedWeaponType) return;\n    drawMap(countries, countryData, selectedYear, selectedWeaponType);\n  }, [selectedYear, selectedWeaponType, countryData, countries]);\n  (0,react.useEffect)(function () {\n    var width = 200; // Adjust as needed\n    var height = 200; // Match the container\'s height\n    var radius = Math.min(width, height) * 0.3;\n    var svg = src/* select */.Ltv(pieChartRef.current).attr(\'width\', width).attr(\'height\', height);\n    svg.selectAll(\'*\').remove();\n    src/* csv */.fu7(pieChartUrl).then(function (data) {\n      data.forEach(function (d) {\n        for (var year = 1950; year <= 2023; year++) {\n          d[year] = +d[year] / 1000 || 0;\n        }\n      });\n      var customOrder = ["Asia and Oceania", "Europe", "Middle East", "Americas", "Africa"]; // Define the custom order\n\n      var filteredData = data.filter(function (d) {\n        return d[\'Imports by Regions\'] !== \'World total\' && d[\'Imports by Regions\'] !== \'International organizations\';\n      });\n      var regionArmsData = Array.from(src/* group */.Os0(filteredData, function (d) {\n        return d[\'Imports by Regions\'];\n      }), function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          region = _ref4[0],\n          values = _ref4[1];\n        return {\n          region: region,\n          armsTrade: values[0][selectedYear] || 0\n        };\n      }).sort(function (a, b) {\n        // Sort based on the custom order\n        return customOrder.indexOf(a.region) - customOrder.indexOf(b.region);\n      });\n      var totalArmsTrade = src/* sum */.czq(regionArmsData, function (d) {\n        return d.armsTrade;\n      });\n      setTotalArmsTrade(totalArmsTrade);\n      if (totalArmsTrade === 0) {\n        svg.append(\'text\').attr(\'x\', width / 2).attr(\'y\', height / 2).attr(\'text-anchor\', \'middle\').text(\'No data available for this year\');\n        return;\n      }\n      var colorMap = {\n        "Asia and Oceania": "#F44336",\n        // Soft red/orange\n        "Europe": "#0D47A1",\n        // Bright red\n        "Middle East": "#388E3C",\n        // Dark red\n        "Americas": "#FF9800",\n        // Vibrant red\n        "Africa": "#6D4C41" // Darker red\n      };\n\n      // Custom color scale using the dictionary\n      var colorScale = src/* scaleOrdinal */.UMr().domain(regionArmsData.map(function (d) {\n        return d.region;\n      })).range(regionArmsData.map(function (d) {\n        return colorMap[d.region];\n      }));\n      var pie = src/* pie */.rLf().sort(null) // Do not automatically sort the data\n      .startAngle(0) // Start angle at 0 (APEC starts from 0 degrees)\n      .endAngle(2 * Math.PI).value(function (d) {\n        return d.armsTrade;\n      });\n      var arc = src/* arc */.JLW().outerRadius(radius - 10).innerRadius(0);\n      var labelArc = src/* arc */.JLW().outerRadius(radius + 20).innerRadius(radius + 20);\n      svg.append(\'g\').attr(\'transform\', "translate(".concat(width * 0.6, ", ").concat(height / 2, ")")).selectAll(\'path\').data(pie(regionArmsData)).enter().append(\'path\').attr(\'d\', arc).attr(\'fill\', function (d) {\n        return colorScale(d.data.region);\n      }).attr(\'stroke\', \'#e0e0e0\').attr(\'stroke-width\', \'1.5px\').attr(\'opacity\', 0.8).on(\'mouseenter\', function (event, d) {\n        var regionPercentage = (d.data.armsTrade / totalArmsTrade * 100).toFixed(2);\n        var container = svgRef.current.getBoundingClientRect();\n        var offsetX = event.clientX - container.left;\n        var offsetY = event.clientY - container.top;\n        setTooltip({\n          visible: true,\n          x: offsetX + 10,\n          y: offsetY - 10,\n          content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, d.data.region, ":"), " $", d.data.armsTrade.toLocaleString(), "B (", regionPercentage, "%)")\n        });\n      }).on(\'mousemove\', function (event) {\n        var container = svgRef.current.getBoundingClientRect();\n        var offsetX = event.clientX - container.left;\n        var offsetY = event.clientY - container.top;\n        setTooltip(function (prev) {\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            x: offsetX + 10,\n            y: offsetY - 10\n          });\n        });\n      }).on(\'mouseleave\', function (event) {\n        setTooltip({\n          visible: false,\n          x: 0,\n          y: 0,\n          content: \'\'\n        });\n        src/* select */.Ltv(event.currentTarget).transition().duration(200).attr(\'d\', arc).attr(\'opacity\', 0.85);\n      });\n      svg.append(\'g\').attr(\'transform\', "translate(".concat(width * 0.6, ", ").concat(height / 2, ")")).selectAll(\'text\').data(pie(regionArmsData)).enter().append(\'text\').attr(\'transform\', function (d) {\n        var _labelArc$centroid = labelArc.centroid(d),\n          _labelArc$centroid2 = _slicedToArray(_labelArc$centroid, 2),\n          x = _labelArc$centroid2[0],\n          y = _labelArc$centroid2[1];\n        var angle = (d.startAngle + d.endAngle) / 2; // Calculate the angle of the arc midpoint\n        var rotation = angle * 180 / Math.PI - 90; // Rotate to make text vertical\n        var arcLength = d.endAngle - d.startAngle;\n        var arcLengthDeg = arcLength * 180 / Math.PI;\n        // Flip text if it\'s between 180 and 360 degrees\n        if (arcLengthDeg < 30) {\n          // Flip text if it\'s between 180 and 360 degrees\n          if (rotation > 90) {\n            rotation -= 180;\n          }\n        } else {\n          rotation = 0; // No rotation if the arc is wide enough\n        }\n        return "translate(".concat(x, ", ").concat(y, ") rotate(").concat(rotation, ")");\n      }) // Position labels and rotate them to be vertical to the arc\n      .style(\'text-anchor\', \'middle\').style(\'font-size\', \'14px\') // Increase font size\n      .style(\'font-weight\', \'bold\') // Optional: make the text bold\n      .style(\'fill\', \'#e0e0e0\') // Set text color\n      .style(\'pointer-events\', \'none\').text(function (d) {\n        // Set custom labels for specific regions\n        if (d.data.region === \'Asia and Oceania\') {\n          return \'APAC\';\n        } else if (d.data.region === \'Middle East\') {\n          return \'ME\';\n        } else if (d.data.region === \'Americas\') {\n          return \'AMS\';\n        } else {\n          return d.data.region; // Default label\n        }\n      });\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n    });\n  }, [dataUrl, selectedYear]);\n  /**\n   * Function to Draw the Map\n   */\n  var drawMap = function drawMap(countries, armsData, year, weaponType) {\n    var width = 800;\n    var height = 400;\n\n    // Define Projection and Path\n    var projection = src/* geoMercator */.bAh().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW().projection(projection);\n\n    // Define Color and Size Scales\n    var maxQuantity;\n    var colorScale;\n    var sizeScale;\n    if (weaponType === "All") {\n      // Calculate the sum of quantities across all weapon types for each country\n      maxQuantity = src/* max */.T9B(countries, function (d) {\n        var _armsData$country;\n        var country = d.properties.name;\n        var yearData = (_armsData$country = armsData[country]) === null || _armsData$country === void 0 ? void 0 : _armsData$country[year];\n        if (yearData) {\n          return Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0);\n        }\n        return 0;\n      }) || 0;\n      colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([Math.log(1), Math.log(maxQuantity)]); // Using Math.log to handle logarithmic scaling\n\n      sizeScale = src/* scaleSqrt */.Bv9().domain([0, maxQuantity]).range([0, 50]); // Adjust circle size range as necessary\n    } else {\n      // Specific weapon type\n      maxQuantity = src/* max */.T9B(countries, function (d) {\n        var _armsData$d$propertie;\n        return ((_armsData$d$propertie = armsData[d.properties.name]) === null || _armsData$d$propertie === void 0 || (_armsData$d$propertie = _armsData$d$propertie[year]) === null || _armsData$d$propertie === void 0 || (_armsData$d$propertie = _armsData$d$propertie[weaponType]) === null || _armsData$d$propertie === void 0 ? void 0 : _armsData$d$propertie.quantity) || 0;\n      }) || 0;\n      colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([Math.log(1), Math.log(maxQuantity)]); // Using Math.log to handle logarithmic scaling\n\n      sizeScale = src/* scaleSqrt */.Bv9().domain([0, maxQuantity]).range([0, 50]); // Adjust circle size range as necessary\n    }\n\n    // Select and Setup SVG\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).attr(\'preserveAspectRatio\', \'xMidYMid meet\').style(\'width\', \'100%\').style(\'height\', \'auto\').style(\'background-color\', \'\').call(src/* zoom */.s_O() // Implement Zooming and Panning\n    .scaleExtent([1, 8]) // Zoom scale limits\n    .on(\'zoom\', function (event) {\n      g.attr(\'transform\', event.transform);\n    }));\n\n    // Create a group for map elements\n    var g = svg.select(\'g.map-group\');\n    if (g.empty()) {\n      g = svg.append(\'g\').attr(\'class\', \'map-group\');\n    }\n\n    // Clear previous drawings within the group\n    g.selectAll(\'*\').remove();\n\n    // Function to Handle Tooltip Content\n    var handleTooltipContent = function handleTooltipContent(country, year, weaponType, data) {\n      if (weaponType === "All") {\n        var totalQuantity = Object.values(data).reduce(function (acc, curr) {\n          return acc + curr.quantity;\n        }, 0);\n        return /*#__PURE__*/react.createElement("div", {\n          style: {\n            lineHeight: \'1.6\',\n            fontSize: \'16px\'\n          }\n        }, /*#__PURE__*/react.createElement("strong", null, country), /*#__PURE__*/react.createElement("br", null), "Total Quantity: ", totalQuantity, " units", /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("span", {\n          style: {\n            fontWeight: \'bold\',\n            color: \'#e74c3c\'\n          }\n        }, "Click for Details"));\n      } else {\n        // Handle other weapon types if necessary\n        return /*#__PURE__*/react.createElement("div", {\n          style: {\n            lineHeight: \'1.6\',\n            fontSize: \'16px\'\n          }\n        }, /*#__PURE__*/react.createElement("strong", null, country), /*#__PURE__*/react.createElement("br", null), "Weapon: ", weaponType, /*#__PURE__*/react.createElement("br", null), "Quantity: ", data.quantity, " units", /*#__PURE__*/react.createElement("br", null), "Status: ", data.status, /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("span", {\n          style: {\n            fontWeight: \'bold\',\n            color: \'#e74c3c\'\n          }\n        }, "Click for Details"));\n      }\n    };\n    var logColorScale = function logColorScale(value) {\n      return colorScale(Math.log(value));\n    };\n\n    // Draw Country Paths with Color Based on Quantity\n    g.selectAll(\'path\').data(countries).enter().append(\'path\').attr(\'d\', path).attr(\'fill\', function (d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country2;\n        var yearData = (_armsData$country2 = armsData[country]) === null || _armsData$country2 === void 0 ? void 0 : _armsData$country2[year];\n        if (yearData) {\n          var totalQuantity = Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0);\n          return totalQuantity > 0 ? logColorScale(totalQuantity) : \'#ccc\';\n        }\n        return \'#ccc\';\n      } else {\n        var _armsData$country3;\n        var quantity = ((_armsData$country3 = armsData[country]) === null || _armsData$country3 === void 0 || (_armsData$country3 = _armsData$country3[year]) === null || _armsData$country3 === void 0 || (_armsData$country3 = _armsData$country3[weaponType]) === null || _armsData$country3 === void 0 ? void 0 : _armsData$country3.quantity) || 0;\n        return quantity > 0 ? logColorScale(quantity) : \'#ccc\';\n      }\n    }).attr(\'stroke\', \'#333\').on(\'mouseenter\', function (event, d) {\n      var country = d.properties.name;\n      var content = null;\n      if (weaponType === "All") {\n        var _armsData$country4;\n        var yearData = (_armsData$country4 = armsData[country]) === null || _armsData$country4 === void 0 ? void 0 : _armsData$country4[year];\n        if (!yearData) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, yearData);\n      } else {\n        var _armsData$country5;\n        var data = (_armsData$country5 = armsData[country]) === null || _armsData$country5 === void 0 || (_armsData$country5 = _armsData$country5[year]) === null || _armsData$country5 === void 0 ? void 0 : _armsData$country5[weaponType];\n        if (!data) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, data);\n      }\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip({\n        visible: true,\n        x: offsetX + 10,\n        y: offsetY - 10,\n        content: content\n      });\n    }).on(\'mousemove\', function (event) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: offsetX + 10,\n          y: offsetY - 10\n        });\n      });\n    }).on(\'mouseleave\', function () {\n      setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country6;\n        var yearData = (_armsData$country6 = armsData[country]) === null || _armsData$country6 === void 0 ? void 0 : _armsData$country6[year];\n        if (!yearData) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          data: yearData\n        });\n      } else {\n        var _armsData$country7;\n        var data = (_armsData$country7 = armsData[country]) === null || _armsData$country7 === void 0 || (_armsData$country7 = _armsData$country7[year]) === null || _armsData$country7 === void 0 ? void 0 : _armsData$country7[weaponType];\n        if (!data) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          weaponType: weaponType,\n          data: data\n        });\n      }\n    });\n\n    // Draw Circles Over Each Country Based on Quantity\n    g.selectAll(\'circle\').data(countries).enter().append(\'circle\').attr(\'cx\', function (d) {\n      return projection(src/* geoCentroid */.Ewd(d))[0];\n    }).attr(\'cy\', function (d) {\n      return projection(src/* geoCentroid */.Ewd(d))[1];\n    }).attr(\'r\', function (d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country8;\n        var yearData = (_armsData$country8 = armsData[country]) === null || _armsData$country8 === void 0 ? void 0 : _armsData$country8[year];\n        if (yearData) {\n          return sizeScale(Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0));\n        }\n        return 0;\n      } else {\n        var _armsData$country9;\n        var quantity = ((_armsData$country9 = armsData[country]) === null || _armsData$country9 === void 0 || (_armsData$country9 = _armsData$country9[year]) === null || _armsData$country9 === void 0 || (_armsData$country9 = _armsData$country9[weaponType]) === null || _armsData$country9 === void 0 ? void 0 : _armsData$country9.quantity) || 0;\n        return quantity > 0 ? sizeScale(quantity) : 0;\n      }\n    }).attr(\'fill\', \'rgba(255, 69, 0, 0.5)\') // Semi-transparent orange color for the circles\n    .attr(\'stroke\', \'orange\').attr(\'stroke-width\', 0.5).on(\'mouseenter\', function (event, d) {\n      var country = d.properties.name;\n      var content = null;\n      if (weaponType === "All") {\n        var _armsData$country10;\n        var yearData = (_armsData$country10 = armsData[country]) === null || _armsData$country10 === void 0 ? void 0 : _armsData$country10[year];\n        if (!yearData) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, yearData);\n      } else {\n        var _armsData$country11;\n        var data = (_armsData$country11 = armsData[country]) === null || _armsData$country11 === void 0 || (_armsData$country11 = _armsData$country11[year]) === null || _armsData$country11 === void 0 ? void 0 : _armsData$country11[weaponType];\n        if (!data) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, data);\n      }\n\n      // Use d3.pointer to get mouse position relative to the SVG\n\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip({\n        visible: true,\n        x: offsetX + 10,\n        y: offsetY - 10,\n        content: content\n      });\n    }).on(\'mousemove\', function (event) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: offsetX + 10,\n          y: offsetY - 10\n        });\n      });\n    }).on(\'mouseleave\', function () {\n      setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country12;\n        var yearData = (_armsData$country12 = armsData[country]) === null || _armsData$country12 === void 0 ? void 0 : _armsData$country12[year];\n        if (!yearData) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          data: yearData\n        });\n      } else {\n        var _armsData$country13;\n        var data = (_armsData$country13 = armsData[country]) === null || _armsData$country13 === void 0 || (_armsData$country13 = _armsData$country13[year]) === null || _armsData$country13 === void 0 ? void 0 : _armsData$country13[weaponType];\n        if (!data) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          weaponType: weaponType,\n          data: data\n        });\n      }\n    });\n  };\n\n  /**\n   * Function to Close Modal\n   */\n  var closeModal = function closeModal() {\n    setModalData(null);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\',\n      height: \'auto\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Arms Imports by Weapon Type ", selectedYear), loading && /*#__PURE__*/react.createElement("div", {\n    className: "loading"\n  }, "Loading data..."), error && /*#__PURE__*/react.createElement("div", {\n    className: "error",\n    style: {\n      color: \'red\'\n    }\n  }, error), !loading && !error && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "yearSlider",\n    min: minYear // Fixed earliest year\n    ,\n    max: maxYear // Fixed latest year\n    ,\n    step: 1 // Ensure only whole numbers\n    ,\n    value: selectedYear // Use selectedYear directly\n    ,\n    onChange: function onChange(e) {\n      return setSelectedYear(parseInt(e.target.value, 10));\n    } // Ensure integer\n    ,\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    },\n    disabled: !selectedWeaponType // Disable until weapon type is selected\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: \'100%\',\n      height: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      height: \'80px\',\n      width: \'200px\',\n      top: \'100px\',\n      left: \'20px\',\n      background: \'rgba(0, 0, 0, 0.9)\',\n      padding: \'10px\',\n      borderRadius: \'8px\',\n      fontSize: \'16px\',\n      color: \'#e0e0e0\',\n      display: \'flex\',\n      flexDirection: \'column\'\n    }\n  }, /*#__PURE__*/react.createElement("label", {\n    htmlFor: "weaponTypeSelect",\n    style: {\n      display: \'block\',\n      marginBottom: \'10px\'\n    }\n  }, "Select Weapon Type"), /*#__PURE__*/react.createElement("select", {\n    id: "weaponTypeSelect",\n    onChange: function onChange(e) {\n      return setSelectedWeaponType(e.target.value);\n    },\n    value: selectedWeaponType,\n    "aria-label": "Select Weapon Type",\n    style: {\n      padding: \'6px 10px\',\n      width: \'180px\',\n      color: \'#e0e0e0\',\n      backgroundColor: \'black\',\n      borderRadius: \'8px\',\n      fontSize: \'16px\'\n    }\n  }, weaponTypes.map(function (type) {\n    return /*#__PURE__*/react.createElement("option", {\n      key: type,\n      value: type\n    }, type);\n  })))), /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      // Change to absolute to position it within the map container\n      bottom: \'10px\',\n      // Adjust as needed to create space from the bottom border\n      left: \'10px\',\n      backgroundColor: \'\',\n      width: \'225px\',\n      height: \'200px\',\n      overflow: \'hidden\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: pieChartRef,\n    style: {\n      width: \'100%\',\n      height: \'100%\'\n    }\n  })), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      boxShadow: \'0 4px 12px rgba(0, 0, 0, 0.3)\',\n      fontSize: \'16px\',\n      pointerEvents: \'none\',\n      transition: \'opacity 0.3s ease\',\n      opacity: tooltip.visible ? 1 : 0,\n      zIndex: 10,\n      whiteSpace: \'nowrap\',\n      width: \'auto\',\n      height: \'auto\'\n    }\n  }, tooltip.content), modalData && /*#__PURE__*/react.createElement("div", {\n    className: "modal",\n    style: {\n      position: \'fixed\',\n      top: 0,\n      left: 0,\n      width: \'100vw\',\n      height: \'100vh\',\n      backgroundColor: \'rgba(0,0,0,0.5)\',\n      display: \'flex\',\n      alignItems: \'center\',\n      justifyContent: \'center\',\n      zIndex: 1000\n    },\n    onClick: closeModal\n  }, /*#__PURE__*/react.createElement("div", {\n    style: {\n      backgroundColor: \'#fff\',\n      padding: \'20px\',\n      borderRadius: \'8px\',\n      maxWidth: \'600px\',\n      width: \'90%\',\n      maxHeight: \'80%\',\n      overflowY: \'auto\',\n      position: \'relative\'\n    },\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    } // Prevent click from closing modal when clicking inside\n  }, /*#__PURE__*/react.createElement("button", {\n    onClick: closeModal,\n    style: {\n      position: \'absolute\',\n      top: \'10px\',\n      right: \'10px\',\n      background: \'none\',\n      border: \'none\',\n      fontSize: \'18px\',\n      cursor: \'pointer\',\n      color: \'black\' // Ensure close button text is black\n    },\n    "aria-label": "Close modal"\n  }, "\\xD7"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Country:"), " ", modalData.country), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Year:"), " ", modalData.year), selectedWeaponType === "All" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("table", {\n    style: {\n      width: \'100%\',\n      borderCollapse: \'collapse\',\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("thead", null, /*#__PURE__*/react.createElement("tr", null, /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Weapon Type"), /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Supplier"), /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Quantity"), /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Status"))), /*#__PURE__*/react.createElement("tbody", null, Object.entries(modalData.data).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      wt = _ref6[0],\n      data = _ref6[1];\n    return /*#__PURE__*/react.createElement("tr", {\n      key: wt\n    }, /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, wt), /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, data.suppliers), /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, data.quantity), /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, data.status));\n  })))) : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Weapon Type:"), " ", modalData.weaponType), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Supplier:"), " ", modalData.data.suppliers), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Quantity:"), " ", modalData.data.quantity, " units"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Status:"), " ", modalData.data.status))))), error && !loading && /*#__PURE__*/react.createElement("div", {\n    style: {\n      textAlign: \'center\',\n      marginTop: \'50px\',\n      color: \'red\'\n    }\n  }, /*#__PURE__*/react.createElement("p", null, error)));\n};\n/* harmony default export */ const _005_WeaponTypeChoroplethMap = (ChoroplethMap);\n;// ./src/components/graphs/005_WeaponTypeZCP.js\nfunction _005_WeaponTypeZCP_typeof(o) { "@babel/helpers - typeof"; return _005_WeaponTypeZCP_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _005_WeaponTypeZCP_typeof(o); }\nfunction _005_WeaponTypeZCP_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _005_WeaponTypeZCP_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _005_WeaponTypeZCP_ownKeys(Object(t), !0).forEach(function (r) { _005_WeaponTypeZCP_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : _005_WeaponTypeZCP_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _005_WeaponTypeZCP_defineProperty(e, r, t) { return (r = _005_WeaponTypeZCP_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _005_WeaponTypeZCP_toPropertyKey(t) { var i = _005_WeaponTypeZCP_toPrimitive(t, "string"); return "symbol" == _005_WeaponTypeZCP_typeof(i) ? i : i + ""; }\nfunction _005_WeaponTypeZCP_toPrimitive(t, r) { if ("object" != _005_WeaponTypeZCP_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _005_WeaponTypeZCP_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _005_WeaponTypeZCP_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_005_WeaponTypeZCP_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _005_WeaponTypeZCP_slicedToArray(r, e) { return _005_WeaponTypeZCP_arrayWithHoles(r) || _005_WeaponTypeZCP_iterableToArrayLimit(r, e) || _005_WeaponTypeZCP_unsupportedIterableToArray(r, e) || _005_WeaponTypeZCP_nonIterableRest(); }\nfunction _005_WeaponTypeZCP_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _005_WeaponTypeZCP_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _005_WeaponTypeZCP_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _005_WeaponTypeZCP_arrayLikeToArray(r, a) : void 0; } }\nfunction _005_WeaponTypeZCP_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _005_WeaponTypeZCP_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _005_WeaponTypeZCP_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ZoomableCirclePacking = function ZoomableCirclePacking() {\n  var svgRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _005_WeaponTypeZCP_slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = _005_WeaponTypeZCP_slicedToArray(_useState3, 2),\n    data = _useState4[0],\n    setData = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = _005_WeaponTypeZCP_slicedToArray(_useState5, 2),\n    selectedYearIndex = _useState6[0],\n    setSelectedYearIndex = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _005_WeaponTypeZCP_slicedToArray(_useState7, 2),\n    availableYears = _useState8[0],\n    setAvailableYears = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _005_WeaponTypeZCP_slicedToArray(_useState9, 2),\n    error = _useState10[0],\n    setError = _useState10[1];\n  var width = 1000;\n  var height = 600;\n  (0,react.useEffect)(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, jsonData, years, defaultYearIndex;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch("".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_weapon_transfer_by_category.json"));\n            case 3:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error("HTTP error! Status: ".concat(response.status));\n            case 6:\n              _context.next = 8;\n              return response.json();\n            case 8:\n              jsonData = _context.sent;\n              setData(jsonData);\n\n              // Extract unique years and set availableYears state\n              years = Array.from(new Set(Object.values(jsonData.Exports).flatMap(function (countryData) {\n                return countryData.flatMap(function (category) {\n                  return Object.keys(category).filter(function (key) {\n                    return !isNaN(key);\n                  });\n                });\n              }))).sort(function (a, b) {\n                return a - b;\n              });\n              setAvailableYears(years); // Ensure available years are set for the slider\n              setSelectedYearIndex(0); // Reset selectedYearIndex to 0\n\n              // Set default year to the latest year\n              defaultYearIndex = years.length - 1; // Assuming the latest year\n              setSelectedYearIndex(defaultYearIndex);\n              _context.next = 21;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context["catch"](0);\n              console.error(\'Error fetching data:\', _context.t0);\n              setError(\'Failed to load data. Please try again later.\');\n            case 21:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 17]]);\n      }));\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, []);\n\n  // Color scale for countries\n  var countryColorScale = (0,react.useMemo)(function () {\n    return data ? src/* scaleOrdinal */.UMr().domain([\'United States\', \'Russia\', \'China\']).range([\'#4682B4\', \'#DC143C\', \'#FFDB58\']).unknown(\'#CCCCCC\') // Fallback color for other countries\n    : null;\n  }, [data]);\n\n  // Separate color scale for weapon categories\n  var categoryColorScale = (0,react.useMemo)(function () {\n    var allCategories = data ? Object.values(data.Exports).flatMap(function (countryData) {\n      return countryData.map(function (category) {\n        return category[\'Unnamed: 1\'];\n      });\n    }) : [];\n    return src/* scaleOrdinal */.UMr(src/* schemePaired */.vU7).domain(allCategories);\n  }, [data]);\n  (0,react.useEffect)(function () {\n    if (!data || availableYears.length === 0 || !countryColorScale || !categoryColorScale) return;\n    var selectedYear = availableYears[selectedYearIndex];\n    var yearData = {\n      name: \'Weapon Transfers by Country\',\n      children: Object.entries(data.Exports).map(function (_ref2) {\n        var _ref3 = _005_WeaponTypeZCP_slicedToArray(_ref2, 2),\n          country = _ref3[0],\n          categories = _ref3[1];\n        return {\n          name: country,\n          children: categories.map(function (category) {\n            return {\n              name: category[\'Unnamed: 1\'],\n              value: category[selectedYear] || 0\n            };\n          }).filter(function (category) {\n            return category.value > 0;\n          })\n        };\n      }).filter(function (country) {\n        return country.children.length > 0;\n      })\n    };\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'background\', \'transparent\').style(\'cursor\', \'pointer\');\n    svg.selectAll(\'*\').remove();\n    var root = src/* hierarchy */.Sk5(yearData).sum(function (d) {\n      return d.value || 0;\n    }).sort(function (a, b) {\n      return b.value - a.value;\n    });\n    var pack = src/* pack */.qqI().size([width - 10, height - 10]).padding(10);\n    pack(root);\n    var focus = root;\n    var view;\n    var zoomTo = function zoomTo(v) {\n      var k = width / v[2];\n      view = v;\n      node.attr(\'transform\', function (d) {\n        return "translate(".concat((d.x - v[0]) * k + width / 2, ", ").concat((d.y - v[1]) * k + height / 2, ")");\n      });\n      node.select(\'circle\').attr(\'r\', function (d) {\n        return d.r * k;\n      });\n      node.selectAll(\'text\').attr(\'fontSize\', function (d) {\n        return Math.max(10, d.r * k / 4);\n      });\n    };\n    var zoom = function zoom(event, d) {\n      if (!d) return;\n      focus = d;\n      var transition = svg.transition().duration(750).tween(\'zoom\', function () {\n        var i = src/* interpolateZoom */.p7(view, [focus.x, focus.y, focus.r * 2.75]);\n        return function (t) {\n          return zoomTo(i(t));\n        };\n      });\n    };\n    var node = svg.append(\'g\').attr("transform", "translate(0, -20)").selectAll(\'g\').data(root.descendants()).join(\'g\').attr(\'transform\', function (d) {\n      return "translate(".concat(d.x, ",").concat(d.y, ")");\n    });\n    node.append(\'circle\').attr(\'fill\', function (d) {\n      if (d.depth === 1) return countryColorScale(d.data.name);\n      if (d.depth === 2) return categoryColorScale(d.data.name);\n      return \'#ccc\';\n    }).attr(\'fill-opacity\', function (d) {\n      return d.depth === 1 || d.depth === 2 ? 1 : 0.0;\n    }).attr(\'stroke\', \'none\').attr(\'stroke-width\', function (d) {\n      return d.depth === 1 || d.depth === 2 ? 2 : 0.2;\n    }).attr(\'r\', function (d) {\n      return d.r;\n    }).style(\'transition\', \'all 0.2s ease\').on(\'mouseover\', function (event, d) {\n      if (!d || !d.data || d.depth === 0) return; // Ignore background hover\n\n      var country = d.depth === 1 ? d.data.name : d.parent && d.parent.data ? d.parent.data.name : \'N/A\';\n      var weaponType = d.depth === 2 ? d.data.name : \'N/A\'; // Show weapon type only when depth = 2\n      var quantity = d.value ? d.value.toLocaleString() : \'N/A\';\n      setTooltip({\n        visible: true,\n        x: event.clientX + 10,\n        y: event.clientY - 10,\n        content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, country), d.depth === 2 && /*#__PURE__*/react.createElement("br", null), "  ", d.depth === 2 && "Type: ".concat(weaponType), /*#__PURE__*/react.createElement("br", null), "Quantity: ", quantity)\n      });\n    }).on(\'mousemove\', function (event) {\n      setTooltip(function (prev) {\n        return _005_WeaponTypeZCP_objectSpread(_005_WeaponTypeZCP_objectSpread({}, prev), {}, {\n          x: event.clientX + 10,\n          y: event.clientY - 10\n        });\n      });\n    }).on(\'mouseout\', function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      if (focus !== d) {\n        zoom(event, d);\n        event.stopPropagation();\n      }\n    });\n    node.append(\'g\') // Create a group to hold both rect and text\n    .each(function (d) {\n      var g = src/* select */.Ltv(this);\n\n      // Only proceed if the text is not empty\n      var textContent = d.depth === 2 ? d.data.name : \'\';\n      if (textContent) {\n        // Check if textContent is non-empty\n        // Add the text first so we can get its size\n        var textElement = g.append(\'text\').attr(\'textAnchor\', \'middle\').attr(\'dy\', \'.3em\').style(\'pointer-events\', \'none\').style(\'fill\', \'#e0e0e0\') // Change the text fill to e0e0e0\n        .style(\'font-weight\', \'bold\').style(\'font-size\', function (d) {\n          return "".concat(Math.max(12, d.r / 4), "px");\n        }).text(textContent);\n\n        // Get the bounding box of the text to calculate the required rect size\n        var bbox = textElement.node().getBBox();\n\n        // Add a background rectangle with rounded corners\n        g.insert(\'rect\', \'text\') // Insert the rect below the text\n        .attr(\'x\', bbox.x - 5) // Add some padding around the text\n        .attr(\'y\', bbox.y - 5).attr(\'width\', bbox.width + 10) // Add padding to the width and height\n        .attr(\'height\', bbox.height + 10).attr(\'rx\', 5) // Rounded corners\n        .attr(\'ry\', 5).style(\'fill\', \'rgba(0, 0, 0, 0.7)\') // Opaque black background\n        .style(\'stroke\', \'none\') // No border\n        .style(\'pointer-events\', \'none\'); // Prevent the rect from interacting with mouse events\n      }\n    });\n    zoomTo([root.x, root.y, root.r * 2.75]);\n    svg.on(\'click\', function () {\n      return zoom(null, root);\n    });\n    return function () {};\n  }, [data, selectedYearIndex, availableYears, countryColorScale, categoryColorScale]);\n  var handleSliderChange = function handleSliderChange(e) {\n    setSelectedYearIndex(Number(e.target.value));\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\',\n      height: \'auto\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Weapon Transfers by Category ", availableYears[selectedYearIndex]), error && /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'#e74c3c\',\n      textAlign: \'center\'\n    }\n  }, error), !error && !data && /*#__PURE__*/react.createElement("p", {\n    style: {\n      textAlign: \'center\',\n      color: \'#e0e0e0\'\n    }\n  }, "Loading..."), !error && data && availableYears.length > 0 && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "year-slider",\n    min: "0",\n    max: availableYears.length - 1,\n    value: selectedYearIndex,\n    onChange: handleSliderChange,\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef\n  }), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'fixed\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      pointerEvents: \'none\',\n      transform: \'translate(-50%, -100%)\',\n      whiteSpace: \'nowrap\',\n      lineHeight: \'1.6\',\n      fontSize: \'16px\',\n      zIndex: 1000\n    }\n  }, tooltip.content))));\n};\n/* harmony default export */ const _005_WeaponTypeZCP = (ZoomableCirclePacking);\n;// ./src/components/005_emergingThreats.js\n\n\n\nvar emergingThreats = function emergingThreats() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "005"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Preparing Allies for Emerging Threats"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\',\n      fontWeight: \'bold\'\n    }\n  }, "The United States"), " strengthens regional defense by empowering allies, reducing the need for an extensive US military presence. Equipped with advanced weaponry from the US, allies like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Taiwan"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Japan"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "South Korea"), ", and the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Philippines"), " bolster their capabilities to counter regional threats independently. This ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\',\n      fontWeight: \'bold\'\n    }\n  }, "Building Partner Capacity"), " strategy has become even more significant amid rising South China Sea tensions, where US support to countries like the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Philippines"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Malaysia"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Brunei"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Indonesia"), " is crucial in deterring China\'s territorial ambitions."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Exploring the Arms Trade Dynamic"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "To explore this dynamic, use the Choropleth Map and Pie Chart to examine key years when South China Sea tensions escalated. By selecting years like ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\',\n      fontWeight: \'bold\'\n    }\n  }, "2010-2020"), ", you can observe a noticeable rise in US arms imports by Asian allies and an increase in total arms trade in the Asia-Oceania region. This interactive view reveals the correlation between heightened regional disputes and the strategic arms support provided by the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\',\n      fontWeight: \'bold\'\n    }\n  }, "US")), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_005_WeaponTypeChoroplethMap, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Breakdown of Weapon Transfers by Category"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Missiles, aircraft, and other advanced weaponry dominate US exports, reflecting regional priorities and threats. This breakdown shows how arms transfers align with geopolitical objectives."), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " supports countries in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Europe, the Middle East, and Asia-Pacific"), ", reinforcing a defense line against rivals."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia "), " supplies nations in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Eastern Europe and Central Asia"), " to counter NATO\'s reach."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " arms countries in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Southeast Asia, Africa, and South Asia"), ", expanding its foothold in resource-rich areas."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, "Countries like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "India"), " illustrate a multilateral approach, balancing relationships with the US, Russia, and others."), /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Through this network, arms transfers reveal interdependent alliances, bolstered influence, and efforts to contain rivals."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_005_WeaponTypeZCP, null)));\n};\n/* harmony default export */ const _005_emergingThreats = (emergingThreats);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3320\n')},1796:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ feature)\n});\n\n// UNUSED EXPORTS: object\n\n;// ./node_modules/topojson-client/src/reverse.js\n/* harmony default export */ function reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\n;// ./node_modules/topojson-client/src/identity.js\n/* harmony default export */ function identity(x) {\n  return x;\n}\n\n;// ./node_modules/topojson-client/src/transform.js\n\n\n/* harmony default export */ function transform(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n\n;// ./node_modules/topojson-client/src/feature.js\n\n\n\n/* harmony default export */ function feature(topology, o) {\n  if (typeof o === "string") o = topology.objects[o];\n  return o.type === "GeometryCollection"\n      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature_feature(topology, o); })}\n      : feature_feature(topology, o);\n}\n\nfunction feature_feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}\n      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}\n      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};\n      case "Point": coordinates = point(o.coordinates); break;\n      case "MultiPoint": coordinates = o.coordinates.map(point); break;\n      case "LineString": coordinates = line(o.arcs); break;\n      case "MultiLineString": coordinates = o.arcs.map(line); break;\n      case "Polygon": coordinates = polygon(o.arcs); break;\n      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2QkFBZSxpQkFBUztBQUN4QjtBQUNBO0FBQ0E7OztBQ0hBLDZCQUFlLGtCQUFTO0FBQ3hCO0FBQ0E7OztBQ0ZxQzs7QUFFckMsNkJBQWUsbUJBQVM7QUFDeEIsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQm1DO0FBQ0k7O0FBRXZDLDZCQUFlLGlCQUFTO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLG9FQUFvRSxPQUFPLGVBQU8sZ0JBQWdCO0FBQzNHLFFBQVEsZUFBTztBQUNmOztBQUVBLFNBQVMsZUFBTztBQUNoQjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7O0FBRU87QUFDUCx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDLG1EQUFtRDtBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdEQUF3RDtBQUN4RCxpRUFBaUU7QUFDakUscURBQXFEO0FBQ3JELDhEQUE4RDtBQUM5RCxxREFBcUQ7QUFDckQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9yZXZlcnNlLmpzPzYwYTciLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzPzM5OTUiLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcz83ZmQ0Iiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9mZWF0dXJlLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1796\n')}}]);