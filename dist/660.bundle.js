"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[660],{4660:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _006_manufacturers)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 272 modules\nvar src = __webpack_require__(1445);\n;// ./src/components/graphs/006_ManufacturerTreemap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ManufacturerTreeMap = function ManufacturerTreeMap() {\n  var svgRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: \'\'\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    legendData = _useState4[0],\n    setLegendData = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    totalRevenue = _useState6[0],\n    setTotalRevenue = _useState6[1];\n  var _useState7 = (0,react.useState)(2022),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedYear = _useState8[0],\n    setSelectedYear = _useState8[1];\n  var dataUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_top_100_arms_companies_consolidated.csv");\n  var width = 950;\n  var height = 750;\n  var colorMap = {\n    "United States": "#4682B4",\n    "Russia": "#DC143C",\n    "China": "#FFDB58",\n    "United Kingdom": "lightblue",\n    "Italy": "#008C45",\n    "France": "#B57EDC",\n    "Trans-European": "#EDC9AF",\n    "Japan": "pink"\n  };\n  var defaultColor = "#CCCCCC";\n  (0,react.useEffect)(function () {\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'width\', width).attr(\'height\', height).style(\'position\', \'relative\');\n    svg.selectAll(\'*\').remove();\n    svg.append(\'text\').attr(\'x\', width / 2).attr(\'y\', 20).attr(\'text-anchor\', \'middle\').attr(\'font-size\', \'20px\').attr(\'font-weight\', \'bold\').attr(\'fill\', \'#0db4de\').text("");\n    var tooltip = src/* select */.Ltv("body").append("div").attr("class", "tooltip").style("position", "absolute").style("background", "rgba(0, 0, 0, 0.8)").style("color", "e0e0e0").style("padding", "12px").style("border-radius", "8px").style("pointer-events", "none").style("font-size", "16px").style("display", "none");\n    src/* csv */.fu7(dataUrl).then(function (data) {\n      var revenueColumn = "Arms Revenue ".concat(selectedYear);\n      if (!data.columns.includes(revenueColumn)) {\n        svg.append(\'text\').attr(\'x\', width / 2).attr(\'y\', height / 2).attr(\'text-anchor\', \'middle\').text("No data available for the year ".concat(selectedYear));\n        return;\n      }\n      var dataWithRevenue = data.map(function (d) {\n        return _objectSpread(_objectSpread({}, d), {}, {\n          totalRevenue: +d[revenueColumn] || 0\n        });\n      }).filter(function (d) {\n        return d.totalRevenue > 0;\n      });\n      var top20Data = dataWithRevenue.sort(function (a, b) {\n        return b.totalRevenue - a.totalRevenue;\n      }).slice(0, 20);\n      var totalRev = src/* sum */.czq(top20Data, function (d) {\n        return d.totalRevenue;\n      });\n      setTotalRevenue(totalRev);\n      var groupedData = src/* group */.Os0(top20Data, function (d) {\n        return d.Country;\n      });\n      var colorScale = src/* scaleOrdinal */.UMr(src/* schemeCategory10 */.t55);\n      var legendInfo = Array.from(groupedData, function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          country = _ref2[0],\n          companies = _ref2[1];\n        var countryRevenue = src/* sum */.czq(companies, function (company) {\n          return company.totalRevenue;\n        });\n        return {\n          country: country,\n          color: colorScale(country),\n          percentage: countryRevenue / totalRev * 100\n        };\n      });\n      legendInfo.sort(function (a, b) {\n        return b.percentage - a.percentage;\n      });\n      setLegendData(legendInfo);\n      var root = src/* hierarchy */.Sk5({\n        children: top20Data\n      }).sum(function (d) {\n        return d.totalRevenue;\n      }).sort(function (a, b) {\n        return b.value - a.value;\n      });\n      src/* treemap */.hkb().size([width, height - 20]).padding(2)(root);\n      var treemapGroup = svg.append(\'g\').attr(\'transform\', "translate(0, 20)");\n      treemapGroup.selectAll(\'rect\').data(root.leaves()).enter().append(\'rect\').attr(\'x\', function (d) {\n        return d.x0;\n      }).attr(\'y\', function (d) {\n        return d.y0;\n      }).attr(\'width\', function (d) {\n        return d.x1 - d.x0 - 4;\n      }).attr(\'height\', function (d) {\n        return d.y1 - d.y0 - 4;\n      }).attr(\'fill\', function (d) {\n        return colorMap[d.data.Country] || defaultColor;\n      }).attr(\'opacity\', 0.9).attr(\'rx\', 4) // Set corner radius for rounded corners\n      .attr(\'ry\', 4) // Optional, can be the same or different from rx\n      .on(\'mouseover\', function (event, d) {\n        var revenuePercentage = (d.data.totalRevenue / totalRev * 100).toFixed(1);\n        tooltip.style("display", "block").html("\\n              <strong>".concat(d.data.Company, "</strong>: $").concat(d.data.totalRevenue.toLocaleString(), "M (").concat(revenuePercentage, "%)\\n            "));\n        /* \n        setTooltip({\n         visible: true,\n         x: event.pageX - 100,\n         y: event.pageY - 100,\n         content: `${d.data.Company}\\nRevenue: $${d.data.totalRevenue.toLocaleString()} (${revenuePercentage}%)`,\n        });\n           */\n        src/* select */.Ltv(event.currentTarget).transition().duration(200).attr(\'x\', d.x0 - 5).attr(\'y\', d.y0 - 5).attr(\'width\', d.x1 - d.x0 + 20).attr(\'height\', d.y1 - d.y0 + 20).attr(\'fill\', \'#FF5733\');\n      }).on(\'mousemove\', function (event) {\n        tooltip.style("left", "".concat(event.pageX + 10, "px")).style("top", "".concat(event.pageY + 10, "px"));\n      }).on(\'mouseout\', function (event, d) {\n        tooltip.style("display", "none");\n        src/* select */.Ltv(event.currentTarget).transition().duration(200).attr(\'x\', d.x0).attr(\'y\', d.y0).attr(\'width\', d.x1 - d.x0 - 4).attr(\'height\', d.y1 - d.y0 - 4).attr(\'fill\', function (d) {\n          return colorMap[d.data.Country] || defaultColor;\n        }).attr(\'opacity\', 0.9);\n      });\n      treemapGroup.selectAll(\'text\').data(root.leaves()).enter().append(\'text\').attr(\'x\', function (d) {\n        return d.x0 + 10;\n      }) // Padding for text\n      .attr(\'y\', function (d) {\n        return d.y0 + 20;\n      }) // Padding for text\n      .attr(\'font-size\', \'16px\').attr(\'font-weight\', \'bold\').attr(\'fill\', \'#444444\').style(\'pointer-events\', \'none\').text(function (d) {\n        return d.data.Company;\n      }); // Append the company name as a single line\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n      svg.append(\'text\').attr(\'x\', width / 2).attr(\'y\', height / 2).attr(\'text-anchor\', \'middle\').text(\'Failed to load data\');\n    });\n  }, [selectedYear]);\n  return /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Top 20 Arms Companies by Revenue ", selectedYear), /*#__PURE__*/react.createElement("div", {\n    style: {\n      marginTop: \'20px\',\n      textAlign: \'center\'\n    }\n  }, /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "yearRange",\n    min: 2003,\n    max: 2022,\n    step: "1",\n    value: selectedYear,\n    onChange: function onChange(e) {\n      return setSelectedYear(parseInt(e.target.value));\n    },\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  })), /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'flex\',\n      alignItems: \'flex-start\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\',\n      padding: \'20px\'\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    style: {\n      flex: \'1\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    width: width,\n    height: height\n  }), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      top: tooltip.y + 5,\n      left: tooltip.x + 5,\n      whiteSpace: \'pre-line\',\n      backgroundColor: \'rgba(255, 255, 255, 0.9)\',\n      padding: \'8px\',\n      borderRadius: \'5px\',\n      boxShadow: \'0px 4px 8px rgba(0, 0, 0, 0.3)\',\n      fontSize: \'12px\',\n      color: \'#333\',\n      pointerEvents: \'none\',\n      maxWidth: \'200px\'\n    }\n  }, tooltip.content)), /*#__PURE__*/react.createElement("div", {\n    style: {\n      marginLeft: \'20px\',\n      display: \'flex\',\n      flexDirection: \'column\',\n      marginTop: \'20px\',\n      padding: \'20px\',\n      // Increase padding for larger box size\n      background: \'rgba(0, 0, 0, 0.9)\',\n      borderRadius: \'8px\',\n      fontSize: \'14px\',\n      color: \'#e0e0e0\',\n      width: \'250px\' // Increase width for larger legend box\n    }\n  }, /*#__PURE__*/react.createElement("p", {\n    style: {\n      fontSize: \'16px\',\n      marginBottom: \'20px\',\n      fontWeight: \'bold\',\n      color: \'#e74c3c\'\n    }\n  }, "Total Revenue: $", (totalRevenue / 1000).toLocaleString(), "B"), legendData.map(function (entry, index) {\n    return /*#__PURE__*/react.createElement("div", {\n      key: index,\n      style: {\n        display: \'flex\',\n        alignItems: \'center\',\n        marginBottom: \'8px\'\n      }\n    }, /*#__PURE__*/react.createElement("div", {\n      style: {\n        display: \'flex\',\n        alignItems: \'center\',\n        flex: 1\n      }\n    }, /*#__PURE__*/react.createElement("div", {\n      style: {\n        width: \'20px\',\n        height: \'20px\',\n        borderRadius: \'4px\',\n        backgroundColor: colorMap[entry.country] || defaultColor,\n        // Use colormap or fallback\n        marginRight: \'15px\'\n      }\n    }), /*#__PURE__*/react.createElement("span", {\n      style: {\n        fontWeight: \'bold\',\n        fontSize: \'16px\',\n        marginRight: \'5px\'\n      }\n    }, entry.country)), /*#__PURE__*/react.createElement("span", {\n      style: {\n        fontSize: \'16px\',\n        textAlign: \'right\',\n        whiteSpace: \'nowrap\'\n      }\n    }, entry.percentage.toFixed(1), "%"));\n  }))));\n};\n/* harmony default export */ const _006_ManufacturerTreemap = (ManufacturerTreeMap);\n;// ./src/components/006_manufacturers.js\nfunction _006_manufacturers_slicedToArray(r, e) { return _006_manufacturers_arrayWithHoles(r) || _006_manufacturers_iterableToArrayLimit(r, e) || _006_manufacturers_unsupportedIterableToArray(r, e) || _006_manufacturers_nonIterableRest(); }\nfunction _006_manufacturers_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _006_manufacturers_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _006_manufacturers_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _006_manufacturers_arrayLikeToArray(r, a) : void 0; } }\nfunction _006_manufacturers_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _006_manufacturers_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _006_manufacturers_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar manufacturers = function manufacturers() {\n  var _useState = (0,react.useState)(2023),\n    _useState2 = _006_manufacturers_slicedToArray(_useState, 2),\n    selectedYear = _useState2[0],\n    setSelectedYear = _useState2[1];\n  return /*#__PURE__*/react.createElement("section", {\n    id: "006"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "From Tensions to Strategic Economic Engines"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Since the Cold War, the arms trade has evolved into a multipolar competition. While the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " remains dominant, its share has decreased from 69.45% in 2010 to 55.95% in 2022, as ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " rapidly expanded to capture 24.74% of the market. European and Russian shares have declined, reflecting China\\u2019s rising influence and ambition to challenge Western defense markets."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Defense industries benefit immensely, with geopolitical conflicts boosting demand for advanced systems, driving innovation, and fueling growth. Thus, the global arms trade serves both economic and strategic purposes, enabling superpowers to advance interests, stabilize allies, and counter rivals through targeted arms exports."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_006_ManufacturerTreemap, {\n    selectedYear: selectedYear,\n    setSelectedYear: setSelectedYear\n  })));\n};\n/* harmony default export */ const _006_manufacturers = (manufacturers);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4660\n')}}]);