"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[705],{1705:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _008_conclusion)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 272 modules\nvar src = __webpack_require__(1445);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(1796);\n;// ./src/components/graphs/008_ConflictDotMap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar ConflictDotMap = function ConflictDotMap() {\n  var svgRef = (0,react.useRef)();\n  var containerRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      csvData: [],\n      mapData: {}\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: \'\'\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    tooltip = _useState4[0],\n    setTooltip = _useState4[1];\n  var _useState5 = (0,react.useState)(2019),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedYear = _useState6[0],\n    setSelectedYear = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    uniqueYears = _useState8[0],\n    setUniqueYears = _useState8[1];\n  var _useState9 = (0,react.useState)(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isPlaying = _useState10[0],\n    setIsPlaying = _useState10[1]; // Start in "play" mode by default\n  var intervalRef = (0,react.useRef)(null);\n  var conflictsDataUrl = "".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/data/processed/processed_conflicts_locations_with_coordinates.csv");\n  (0,react.useEffect)(function () {\n    Promise.all([src/* csv */.fu7(conflictsDataUrl), src/* json */.Pq9("".concat("https://raw.githubusercontent.com/dlee8267/arming-for-stability/main/public", "/countries-110m.json"))]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        csvData = _ref2[0],\n        mapData = _ref2[1];\n      var intensityData = src/* rollup */.zaV(csvData, function (v) {\n        return v.length;\n      }, function (d) {\n        return "".concat(d.location, "_").concat(d.year);\n      });\n      csvData.forEach(function (d) {\n        d.year = +d.year;\n        d.latitude = +d.latitude;\n        d.longitude = +d.longitude;\n        d.intensity = intensityData.get("".concat(d.location, "_").concat(d.year)) || 1;\n      });\n      setData({\n        csvData: csvData,\n        mapData: mapData\n      });\n      var years = Array.from(new Set(csvData.map(function (d) {\n        return d.year;\n      }))).sort(function (a, b) {\n        return a - b;\n      });\n      setUniqueYears(years);\n      setSelectedYear(years.includes(2019) ? 2019 : years[0]);\n    })["catch"](function (error) {\n      return console.error("Error loading data:", error);\n    });\n  }, []);\n  (0,react.useEffect)(function () {\n    if (data.csvData.length > 0 && Object.keys(data.mapData).length > 0) {\n      drawMap();\n    }\n  }, [selectedYear, data]);\n  var drawMap = function drawMap() {\n    var width = 800;\n    var height = 400;\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'width\', \'100%\').style(\'height\', \'auto\').style("background-color", "");\n    svg.selectAll("*").remove();\n    var projection = src/* geoMercator */.bAh().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW().projection(projection);\n    var mapGroup = svg.append("g");\n    var countries = feature/* default */.A(data.mapData, data.mapData.objects.countries).features;\n    mapGroup.selectAll("path").data(countries).enter().append("path").attr("d", path).attr("fill", "#ccc").attr("stroke", "#333");\n    var yearData = data.csvData.filter(function (d) {\n      return d.year === +selectedYear;\n    });\n    var colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([1, src/* max */.T9B(yearData, function (d) {\n      return d.intensity;\n    })]);\n    mapGroup.selectAll("circle").data(yearData).enter().append("circle").attr("cx", function (d) {\n      return projection([d.longitude, d.latitude])[0];\n    }).attr("cy", function (d) {\n      return projection([d.longitude, d.latitude])[1];\n    }).attr("r", function (d) {\n      return Math.sqrt(d.intensity) * 5;\n    }).attr("fill", function (d) {\n      return d.intensity > 1 ? colorScale(d.intensity) : "#BC8F8F";\n    }).attr("stroke", "#333").attr("stroke-width", 1).on("mouseenter", function (event, d) {\n      var containerRect = containerRef.current.getBoundingClientRect();\n      var x = event.clientX - containerRect.left + 10;\n      var y = event.clientY - containerRect.top - 10;\n      setTooltip({\n        visible: true,\n        x: x,\n        y: y,\n        content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, /*#__PURE__*/react.createElement("strong", null, d.location), /*#__PURE__*/react.createElement("br", null), "Party A: ", d.party_a, /*#__PURE__*/react.createElement("br", null), "Party B: ", d.party_b, /*#__PURE__*/react.createElement("br", null), "Intensity: ", d.intensity))\n      });\n    }).on("mousemove", function (event) {\n      var containerRect = containerRef.current.getBoundingClientRect();\n      var x = event.clientX - containerRect.left + 10;\n      var y = event.clientY - containerRect.top - 10;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: x,\n          y: y\n        });\n      });\n    }).on("mouseleave", function () {\n      setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: \'\'\n      });\n    });\n  };\n  var handleYearChange = function handleYearChange(event) {\n    setSelectedYear(event.target.value);\n  };\n  var togglePlayPause = function togglePlayPause() {\n    setIsPlaying(function (prev) {\n      return !prev;\n    });\n  };\n  (0,react.useEffect)(function () {\n    if (isPlaying) {\n      intervalRef.current = setInterval(function () {\n        setSelectedYear(function (prevYear) {\n          var currentIndex = uniqueYears.indexOf(prevYear);\n          return uniqueYears[(currentIndex + 1) % uniqueYears.length]; // Loop to the first year\n        });\n      }, 500); // Update every second\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return function () {\n      return clearInterval(intervalRef.current);\n    }; // Clean up on unmount\n  }, [isPlaying, uniqueYears]);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\'\n    },\n    ref: containerRef\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Global Conflict Map ", selectedYear, " ", /*#__PURE__*/react.createElement("button", {\n    onClick: togglePlayPause,\n    style: {\n      margin: \'10px 10px\',\n      padding: \'12px\',\n      backgroundColor: isPlaying ? \'#e74c3c\' : \'#4682B4\',\n      color: \'#e0e0e0\',\n      border: \'none\',\n      borderRadius: \'5px\',\n      cursor: \'pointer\',\n      fontSize: \'24px\',\n      width: \'120px\',\n      justifyContent: \'center\',\n      alignItems: \'center\'\n    }\n  }, isPlaying ? \'Pause\' : \'Play\')), /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "year-slider",\n    min: Math.min.apply(Math, _toConsumableArray(uniqueYears)),\n    max: Math.max.apply(Math, _toConsumableArray(uniqueYears)),\n    value: selectedYear,\n    onChange: handleYearChange,\n    step: "1",\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      left: tooltip.x,\n      top: tooltip.y,\n      backgroundColor: \'rgba(0, 0, 0, 0.9)\',\n      color: \'#e0e0e0\',\n      padding: \'8px\',\n      borderRadius: \'8px\',\n      pointerEvents: \'none\',\n      whiteSpace: \'nowrap\',\n      fontSize: \'16px\',\n      lineHeight: \'1.6\',\n      zIndex: 10\n    }\n  }, tooltip.content));\n};\n/* harmony default export */ const _008_ConflictDotMap = (ConflictDotMap);\n;// ./src/components/008_conclusion.js\n\n\nvar conclusion = function conclusion() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "008"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Conclusion"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The world is not getting safer. The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "Global Conflict Map"), " below highlights conflict distribution across decades, showcasing shifts in hotspots and their correlation with geopolitical changes. These trends reflect the evolving nature of global conflicts and the strategic influence of major players like the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), "."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_008_ConflictDotMap, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", null, "Key Insights:"), /*#__PURE__*/react.createElement("ul", {\n    style: {\n      margin: "1em 0",\n      paddingLeft: "1.5em"\n    }\n  }, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "1950s\\u20131960s:"), " Concentrated in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "East and Southeast Asia"), ", driven by Cold War proxy wars (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Korean War"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Vietnam War"), ")."), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "1970s:"), " Increased conflicts in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Africa"), " and the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Middle East"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Yom Kippur War"), "), while Southeast Asia remained active."), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "1980s:"), " Spread to ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Central America"), ", intensified in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Africa"), " (post-colonial struggles), and in the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Middle East"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Iran-Iraq War"), ")."), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "1990s:"), " Shifts to ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Eastern Europe"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Yugoslav Wars"), ") and the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Middle East"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Gulf War"), ") after the Cold War."), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "2010s:"), " Predominantly in the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Middle East"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Syrian Civil War"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Yemen"), ") and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Africa"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Boko Haram"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "South Sudan"), "), alongside the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "US Wars on Global Terrorism"), " (e.g., ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Iraq"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Afghanistan"), ")."), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "2020s:"), " Marked by the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Russia-Ukraine"), " conflict, which has reshaped security dynamics in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Eastern Europe"), " and intensified global tensions."))), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " has strategically used arms exports to build alliances, counter rivals like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), ", and maintain global dominance. By fortifying allies in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Europe, the Middle East, and Asia-Pacific"), ", the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " ensures regional stability while projecting power globally. The conflict hotspots on the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "Global Conflict Map"), " correlate with top countries supported by the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " or major importers of its weapons, as shown on the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FF7F50"\n    }\n  }, "Top Arms Trade chart"), " in the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic",\n      fontWeight: "bold"\n    }\n  }, "Countering through Proxy Support"), " section."));\n};\n/* harmony default export */ const _008_conclusion = (conclusion);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1705\n')},1796:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ feature)\n});\n\n// UNUSED EXPORTS: object\n\n;// ./node_modules/topojson-client/src/reverse.js\n/* harmony default export */ function reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\n;// ./node_modules/topojson-client/src/identity.js\n/* harmony default export */ function identity(x) {\n  return x;\n}\n\n;// ./node_modules/topojson-client/src/transform.js\n\n\n/* harmony default export */ function transform(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n\n;// ./node_modules/topojson-client/src/feature.js\n\n\n\n/* harmony default export */ function feature(topology, o) {\n  if (typeof o === "string") o = topology.objects[o];\n  return o.type === "GeometryCollection"\n      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature_feature(topology, o); })}\n      : feature_feature(topology, o);\n}\n\nfunction feature_feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}\n      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}\n      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};\n      case "Point": coordinates = point(o.coordinates); break;\n      case "MultiPoint": coordinates = o.coordinates.map(point); break;\n      case "LineString": coordinates = line(o.arcs); break;\n      case "MultiLineString": coordinates = o.arcs.map(line); break;\n      case "Polygon": coordinates = polygon(o.arcs); break;\n      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2QkFBZSxpQkFBUztBQUN4QjtBQUNBO0FBQ0E7OztBQ0hBLDZCQUFlLGtCQUFTO0FBQ3hCO0FBQ0E7OztBQ0ZxQzs7QUFFckMsNkJBQWUsbUJBQVM7QUFDeEIsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQm1DO0FBQ0k7O0FBRXZDLDZCQUFlLGlCQUFTO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLG9FQUFvRSxPQUFPLGVBQU8sZ0JBQWdCO0FBQzNHLFFBQVEsZUFBTztBQUNmOztBQUVBLFNBQVMsZUFBTztBQUNoQjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7O0FBRU87QUFDUCx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDLG1EQUFtRDtBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdEQUF3RDtBQUN4RCxpRUFBaUU7QUFDakUscURBQXFEO0FBQ3JELDhEQUE4RDtBQUM5RCxxREFBcUQ7QUFDckQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9yZXZlcnNlLmpzPzYwYTciLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzPzM5OTUiLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcz83ZmQ0Iiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9mZWF0dXJlLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1796\n')}}]);